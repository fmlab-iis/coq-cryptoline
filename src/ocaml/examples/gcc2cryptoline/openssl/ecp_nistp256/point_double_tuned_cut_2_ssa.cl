(*
Postcondition is verified on frege.
Verification result:                    [OK]            15.941229 seconds
*)
proc main(uint128 alpha_0_0, uint128 alpha_16_0, uint128 alpha_32_0, uint128 alpha_48_0, uint128 beta_0_0, uint128 beta_16_0, uint128 beta_32_0, uint128 beta_48_0, uint128 delta_0_0, uint128 delta_16_0, uint128 delta_32_0, uint128 delta_48_0, uint128 gamma_0_0, uint128 gamma_16_0, uint128 gamma_32_0, uint128 gamma_48_0, uint64 small1_0_0, uint64 small1_16_0, uint64 small1_24_0, uint64 small1_8_0, uint64 small2_0_0, uint64 small2_16_0, uint64 small2_24_0, uint64 small2_8_0, uint128 x0_0, uint128 x1_0, uint128 x2_0, uint128 x3_0, uint128 x_in2_0_0, uint128 x_in2_16_0, uint128 x_in2_32_0, uint128 x_in2_48_0, uint128 y0_0, uint128 y1_0, uint128 y2_0, uint128 y3_0, uint128 y_in5_0_0, uint128 y_in5_16_0, uint128 y_in5_32_0, uint128 y_in5_48_0, uint128 z0_0, uint128 z1_0, uint128 z2_0, uint128 z3_0, uint128 z_in3_0_0, uint128 z_in3_16_0, uint128 z_in3_32_0, uint128 z_in3_48_0) =
{ and [x_in2_0_0 = x0_0, x_in2_16_0 = x1_0, x_in2_32_0 = x2_0, x_in2_48_0 = x3_0, y_in5_0_0 = y0_0, y_in5_16_0 = y1_0, y_in5_32_0 = y2_0, y_in5_48_0 = y3_0, z_in3_0_0 = z0_0, z_in3_16_0 = z1_0, z_in3_32_0 = z2_0, z_in3_48_0 = z3_0, delta_0_0 + (delta_16_0 * 18446744073709551616) + (delta_32_0 * 340282366920938463463374607431768211456) + (delta_48_0 * 6277101735386680763835789423207666416102355444464034512896) = (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) (mod 18446744073709551615 + (4294967295 * 18446744073709551616) + (0 * 340282366920938463463374607431768211456) + (18446744069414584321 * 6277101735386680763835789423207666416102355444464034512896)), gamma_0_0 + (gamma_16_0 * 18446744073709551616) + (gamma_32_0 * 340282366920938463463374607431768211456) + (gamma_48_0 * 6277101735386680763835789423207666416102355444464034512896) = (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) (mod 18446744073709551615 + (4294967295 * 18446744073709551616) + (0 * 340282366920938463463374607431768211456) + (18446744069414584321 * 6277101735386680763835789423207666416102355444464034512896)), beta_0_0 + (beta_16_0 * 18446744073709551616) + (beta_32_0 * 340282366920938463463374607431768211456) + (beta_48_0 * 6277101735386680763835789423207666416102355444464034512896) = (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (gamma_0_0 + (gamma_16_0 * 18446744073709551616) + (gamma_32_0 * 340282366920938463463374607431768211456) + (gamma_48_0 * 6277101735386680763835789423207666416102355444464034512896)) (mod 18446744073709551615 + (4294967295 * 18446744073709551616) + (0 * 340282366920938463463374607431768211456) + (18446744069414584321 * 6277101735386680763835789423207666416102355444464034512896)), alpha_0_0 + (alpha_16_0 * 18446744073709551616) + (alpha_32_0 * 340282366920938463463374607431768211456) + (alpha_48_0 * 6277101735386680763835789423207666416102355444464034512896) = 3 * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896) - (delta_0_0 + (delta_16_0 * 18446744073709551616) + (delta_32_0 * 340282366920938463463374607431768211456) + (delta_48_0 * 6277101735386680763835789423207666416102355444464034512896))) * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896) + delta_0_0 + (delta_16_0 * 18446744073709551616) + (delta_32_0 * 340282366920938463463374607431768211456) + (delta_48_0 * 6277101735386680763835789423207666416102355444464034512896)) (mod 18446744073709551615 + (4294967295 * 18446744073709551616) + (0 * 340282366920938463463374607431768211456) + (18446744069414584321 * 6277101735386680763835789423207666416102355444464034512896)), small1_0_0 + (small1_8_0 * 18446744073709551616) + (small1_16_0 * 340282366920938463463374607431768211456) + (small1_24_0 * 6277101735386680763835789423207666416102355444464034512896) = (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) (mod 18446744073709551615 + (4294967295 * 18446744073709551616) + (0 * 340282366920938463463374607431768211456) + (18446744069414584321 * 6277101735386680763835789423207666416102355444464034512896)), small2_0_0 + (small2_8_0 * 18446744073709551616) + (small2_16_0 * 340282366920938463463374607431768211456) + (small2_24_0 * 6277101735386680763835789423207666416102355444464034512896) = alpha_0_0 + (alpha_16_0 * 18446744073709551616) + (alpha_32_0 * 340282366920938463463374607431768211456) + (alpha_48_0 * 6277101735386680763835789423207666416102355444464034512896) (mod 18446744073709551615 + (4294967295 * 18446744073709551616) + (0 * 340282366920938463463374607431768211456) + (18446744069414584321 * 6277101735386680763835789423207666416102355444464034512896))] && true }
mov small38_0_1 small2_0_0;
mov small38_8_1 small2_8_0;
mov small38_16_1 small2_16_0;
mov small38_24_1 small2_24_0;
mov v1_1 small38_0_1;
mulj a39_1 v1_1 v1_1;
split v3_1 tmp_to_use_1 a39_1 64;
mov value_lo_1 18446744073709551615@uint64;
mov value_hi_1 0@uint64;
join value_1 value_hi_1 value_lo_1;
and v58_1@uint128 a39_1 value_1;
assume v58_1 = tmp_to_use_1 && true;
mov out40_0_1 v58_1;
mov v4_1 small38_8_1;
mulj a42_1 v1_1 v4_1;
split v6_1 tmp_to_use_2 a42_1 64;
mov value_lo_2 18446744073709551615@uint64;
mov value_hi_2 0@uint64;
join value_2 value_hi_2 value_lo_2;
and v59_1@uint128 a42_1 value_2;
assume v59_1 = tmp_to_use_2 && true;
mov value_lo_3 2@uint64;
mov value_hi_3 0@uint64;
join value_3 value_hi_3 value_lo_3;
mul v69_1 v59_1 value_3;
add v8_1 v3_1 v69_1;
mov out40_16_1 v8_1;
mov v9_1 small38_16_1;
mulj a44_1 v1_1 v9_1;
split v11_1 tmp_to_use_3 a44_1 64;
mov value_lo_4 18446744073709551615@uint64;
mov value_hi_4 0@uint64;
join value_4 value_hi_4 value_lo_4;
and v60_1@uint128 a44_1 value_4;
assume v60_1 = tmp_to_use_3 && true;
add v12_1 v6_1 v60_1;
mov value_lo_5 2@uint64;
mov value_hi_5 0@uint64;
join value_5 value_hi_5 value_lo_5;
mul v13_1 v12_1 value_5;
mov v14_1 small38_24_1;
mulj a45_1 v1_1 v14_1;
split v16_1 tmp_to_use_4 a45_1 64;
mov value_lo_6 18446744073709551615@uint64;
mov value_hi_6 0@uint64;
join value_6 value_hi_6 value_lo_6;
and v61_1@uint128 a45_1 value_6;
assume v61_1 = tmp_to_use_4 && true;
add v17_1 v11_1 v61_1;
mulj a46_1 v4_1 v9_1;
split v18_1 tmp_to_use_5 a46_1 64;
mov value_lo_7 18446744073709551615@uint64;
mov value_hi_7 0@uint64;
join value_7 value_hi_7 value_lo_7;
and v62_1@uint128 a46_1 value_7;
assume v62_1 = tmp_to_use_5 && true;
add v19_1 v17_1 v62_1;
mov value_lo_8 2@uint64;
mov value_hi_8 0@uint64;
join value_8 value_hi_8 value_lo_8;
mul v20_1 v19_1 value_8;
add v21_1 v16_1 v18_1;
mulj a47_1 v4_1 v4_1;
split v22_1 tmp_to_use_6 a47_1 64;
mov value_lo_9 18446744073709551615@uint64;
mov value_hi_9 0@uint64;
join value_9 value_hi_9 value_lo_9;
and v63_1@uint128 a47_1 value_9;
assume v63_1 = tmp_to_use_6 && true;
add v23_1 v13_1 v63_1;
mov out40_32_1 v23_1;
add v24_1 v20_1 v22_1;
mov out40_48_1 v24_1;
mulj a50_1 v4_1 v14_1;
split v25_1 tmp_to_use_7 a50_1 64;
mov value_lo_10 18446744073709551615@uint64;
mov value_hi_10 0@uint64;
join value_10 value_hi_10 value_lo_10;
and v64_1@uint128 a50_1 value_10;
assume v64_1 = tmp_to_use_7 && true;
add v26_1 v21_1 v64_1;
mov value_lo_11 2@uint64;
mov value_hi_11 0@uint64;
join value_11 value_hi_11 value_lo_11;
mul v27_1 v26_1 value_11;
mulj a51_1 v9_1 v14_1;
split v28_1 tmp_to_use_8 a51_1 64;
mov value_lo_12 18446744073709551615@uint64;
mov value_hi_12 0@uint64;
join value_12 value_hi_12 value_lo_12;
and v65_1@uint128 a51_1 value_12;
assume v65_1 = tmp_to_use_8 && true;
add v29_1 v25_1 v65_1;
mov value_lo_13 2@uint64;
mov value_hi_13 0@uint64;
join value_13 value_hi_13 value_lo_13;
mul v30_1 v29_1 value_13;
mov value_lo_14 2@uint64;
mov value_hi_14 0@uint64;
join value_14 value_hi_14 value_lo_14;
mul v31_1 v28_1 value_14;
mulj a52_1 v9_1 v9_1;
split v32_1 tmp_to_use_9 a52_1 64;
mov value_lo_15 18446744073709551615@uint64;
mov value_hi_15 0@uint64;
join value_15 value_hi_15 value_lo_15;
and v66_1@uint128 a52_1 value_15;
assume v66_1 = tmp_to_use_9 && true;
add v33_1 v27_1 v66_1;
mov out40_64_1 v33_1;
add v34_1 v30_1 v32_1;
mov out40_80_1 v34_1;
mulj a55_1 v14_1 v14_1;
split v35_1 tmp_to_use_10 a55_1 64;
mov value_lo_16 18446744073709551615@uint64;
mov value_hi_16 0@uint64;
join value_16 value_hi_16 value_lo_16;
and v67_1@uint128 a55_1 value_16;
assume v67_1 = tmp_to_use_10 && true;
add v36_1 v31_1 v67_1;
mov out40_96_1 v36_1;
mov out40_112_1 v35_1;
mov tmp_0_1 out40_0_1;
mov tmp_16_1 out40_16_1;
mov tmp_32_1 out40_32_1;
mov tmp_48_1 out40_48_1;
mov tmp_64_1 out40_64_1;
mov tmp_80_1 out40_80_1;
mov tmp_96_1 out40_96_1;
mov tmp_112_1 out40_112_1;
mov in10_0_1 tmp_0_1;
mov in10_16_1 tmp_16_1;
mov in10_32_1 tmp_32_1;
mov in10_48_1 tmp_48_1;
mov in10_64_1 tmp_64_1;
mov in10_80_1 tmp_80_1;
mov in10_96_1 tmp_96_1;
mov in10_112_1 tmp_112_1;
mov v1_2 in10_0_1;
add v2_1 v1_2 1267650600228229401427983728624@uint128;
mov out11_0_1 v2_1;
mov v3_2 in10_16_1;
add v4_2 v3_2 1267650600228229401496703205376@uint128;
mov out11_16_1 v4_2;
mov v5_1 in10_32_1;
add v6_2 v5_1 1267650600228229401427983728656@uint128;
mov out11_32_1 v6_2;
mov v7_1 in10_48_1;
add v8_2 v7_1 1267650600228229401427983728656@uint128;
mov out11_48_1 v8_2;
mov v17_2 in10_64_1;
mov v18_2 in10_80_1;
split tmp1_1 tmp2_1 v18_2 96;
shl v19_2 tmp2_1 32;
assume tmp1_1 = 0 && true;
add v20_2 v17_2 v19_2;
add v22_2 v2_1 v20_2;
mov out11_0_2 v22_2;
sub v24_2 v8_2 v20_2;
mov out11_48_2 v24_2;
mov v25_2 in10_80_1;
mov v26_2 in10_112_1;
sub v30_2 v4_2 v26_2;
add v29_2 v25_2 v30_2;
mov out11_16_2 v29_2;
sub v28_2 v6_2 v25_2;
add v32_2 v26_2 v28_2;
mov out11_32_2 v32_2;
mov v33_2 in10_64_1;
split tmp1_2 tmp2_2 v33_2 96;
shl v34_2 tmp2_2 32;
assume tmp1_2 = 0 && true;
sub v35_2 v29_2 v34_2;
mov out11_16_3 v35_2;
mov v36_2 in10_64_1;
split tmp1_3 tmp2_3 v36_2 96;
shl v37_1 tmp2_3 32;
assume tmp1_3 = 0 && true;
add v38_1 v24_2 v37_1;
mov out11_48_3 v38_1;
mov v39_1 in10_80_1;
split tmp1_4 tmp2_4 v39_1 96;
shl v40_1 tmp2_4 32;
assume tmp1_4 = 0 && true;
sub v41_1 v32_2 v40_1;
mov out11_32_3 v41_1;
mov v42_1 in10_96_1;
sub v43_1 v22_2 v42_1;
mov out11_0_3 v43_1;
mov v44_1 in10_96_1;
split tmp1_5 tmp2_5 v44_1 96;
shl v45_1 tmp2_5 32;
assume tmp1_5 = 0 && true;
sub v46_1 v43_1 v45_1;
mov out11_0_4 v46_1;
mov v47_1 in10_96_1;
split tmp1_6 tmp2_6 v47_1 95;
shl v48_1 tmp2_6 33;
assume tmp1_6 = 0 && true;
add v49_1 v35_2 v48_1;
mov out11_16_4 v49_1;
mov v50_1 in10_96_1;
mul v51_1 v50_1 2@uint128;
add v52_1 v41_1 v51_1;
mov out11_32_4 v52_1;
mov v53_1 in10_96_1;
split tmp1_7 tmp2_7 v53_1 96;
shl v54_1 tmp2_7 32;
assume tmp1_7 = 0 && true;
sub v55_1 v38_1 v54_1;
mov out11_48_4 v55_1;
mov v56_1 in10_112_1;
sub v57_1 v46_1 v56_1;
mov out11_0_5 v57_1;
mov v58_2 in10_112_1;
split tmp1_8 tmp2_8 v58_2 96;
shl v59_2 tmp2_8 32;
assume tmp1_8 = 0 && true;
sub v60_2 v57_1 v59_2;
mov out11_0_6 v60_2;
mov v61_2 in10_112_1;
split tmp1_9 tmp2_9 v61_2 95;
shl v62_2 tmp2_9 33;
assume tmp1_9 = 0 && true;
add v63_2 v52_1 v62_2;
mov out11_32_5 v63_2;
mov v64_2 in10_112_1;
mul v65_2 v64_2 3@uint128;
add v66_2 v55_1 v65_2;
mov out11_48_5 v66_2;
mov x_out13_0_1 out11_0_6;
mov x_out13_16_1 out11_16_4;
mov x_out13_32_1 out11_32_5;
mov x_out13_48_1 out11_48_5;
mov v123_1 beta_0_0;
mov v124_1 beta_16_0;
mov v125_1 beta_32_0;
mov v126_1 beta_48_0;
mul v119_1 v123_1 8@uint128;
mul v120_1 v124_1 8@uint128;
mul v121_1 v125_1 8@uint128;
mul v122_1 v126_1 8@uint128;
mov v107_1 x_out13_0_1;
mov v109_1 x_out13_16_1;
mov v111_1 x_out13_32_1;
mov v113_1 x_out13_48_1;
sub v292_1 40564819207303340845695479315968@uint128 v119_1;
add v115_1 v107_1 v292_1;
mov x_out13_0_2 v115_1;
sub v291_1 40564819207303340847894502572032@uint128 v120_1;
add v116_1 v109_1 v291_1;
mov x_out13_16_2 v116_1;
sub v290_1 40564819207303340845695479316992@uint128 v121_1;
add v117_1 v111_1 v290_1;
mov x_out13_32_2 v117_1;
sub v289_1 40564819207303340845695479316992@uint128 v122_1;
add v118_1 v113_1 v289_1;
mov x_out13_48_2 v118_1;
mov v95_1 delta_0_0;
mov v96_1 gamma_0_0;
add v97_1 v95_1 v96_1;
mov delta_0_1 v97_1;
mov v98_1 delta_16_0;
mov v99_1 gamma_16_0;
add v100_1 v98_1 v99_1;
mov delta_16_1 v100_1;
mov v101_1 delta_32_0;
mov v102_1 gamma_32_0;
add v103_1 v101_1 v102_1;
mov delta_32_1 v103_1;
mov v104_1 delta_48_0;
mov v105_1 gamma_48_0;
add v106_1 v104_1 v105_1;
mov delta_48_1 v106_1;
mov v91_1 y_in5_0_0;
mov v92_1 y_in5_16_0;
mov v93_1 y_in5_32_0;
mov v94_1 y_in5_48_0;
mov v83_1 z_in3_0_0;
add v84_1 v83_1 v91_1;
mov ftmp_0_1 v84_1;
mov v85_1 z_in3_16_0;
add v86_1 v85_1 v92_1;
mov ftmp_16_1 v86_1;
mov v87_1 z_in3_32_0;
add v88_1 v87_1 v93_1;
mov ftmp_32_1 v88_1;
mov v89_1 z_in3_48_0;
add v90_1 v89_1 v94_1;
mov ftmp_48_1 v90_1;
mov in50_0_1 ftmp_0_1;
mov in50_16_1 ftmp_16_1;
mov in50_32_1 ftmp_32_1;
mov in50_48_1 ftmp_48_1;
mov v2_2 in50_48_1;
mov value_lo_17 18446744069414584320@uint64;
mov value_hi_17 0@uint64;
join value_17 value_hi_17 value_lo_17;
add v3_3 v2_2 value_17;
mov v4_3 in50_32_1;
split v5_2 tmp_to_use_11 v4_3 64;
add v6_3 v3_3 v5_2;
mov value_lo_18 18446744073709551615@uint64;
mov value_hi_18 0@uint64;
join value_18 value_hi_18 value_lo_18;
and v1_3@uint128 v4_3 value_18;
assume v1_3 = tmp_to_use_11 && true;
mov value_lo_19 18446673704965373952@uint64;
mov value_hi_19 0@uint64;
join value_19 value_hi_19 value_lo_19;
add v8_3 v1_3 value_19;
mov v10_1 in50_0_1;
mov value_lo_20 18446744073709551615@uint64;
mov value_hi_20 0@uint64;
join value_20 value_hi_20 value_lo_20;
add v11_2 v10_1 value_20;
mov v12_2 in50_16_1;
mov value_lo_21 4294967295@uint64;
mov value_hi_21 70368744177664@uint64;
join value_21 value_hi_21 value_lo_21;
add v13_2 v12_2 value_21;
split v14_2 tmp_to_use_12 v6_3 64;
vpc a52_2@uint64 v14_2;
mov value_lo_22 18446744073709551615@uint64;
mov value_hi_22 0@uint64;
join value_22 value_hi_22 value_lo_22;
and v7_2@uint128 v6_3 value_22;
assume v7_2 = tmp_to_use_12 && true;
split tmp1_10 tmp2_10 v14_2 96;
shl v16_2 tmp2_10 32;
assume tmp1_10 = 0 && true;
sub v76_1 v16_2 v14_2;
add v17_3 v7_2 v76_1;
split v18_3 tmp_to_use_13 v17_3 64;
vpc a53_1@uint64 v18_3;
add b54_1 a52_2 a53_1;
mov value_lo_23 18446744073709551615@uint64;
mov value_hi_23 0@uint64;
join value_23 value_hi_23 value_lo_23;
and v9_2@uint128 v17_3 value_23;
assume v9_2 = tmp_to_use_13 && true;
split tmp1_11 tmp2_11 v18_3 96;
shl v20_3 tmp2_11 32;
assume tmp1_11 = 0 && true;
sub v75_1 v20_3 v18_3;
add v21_2 v9_2 v75_1;
vpc v22_3@uint128 b54_1;
add v23_2 v11_2 v22_3;
split tmp1_12 tmp2_12 v22_3 96;
shl v24_3 tmp2_12 32;
assume tmp1_12 = 0 && true;
sub v25_3 v13_2 v24_3;
split v26_3 tmp_to_use_14 v21_2 64;
vpc high55_1@uint64 v26_3;
subb high_1 high56_1 0@uint64 high55_1;
cast low57_1@uint64 v21_2;
vpc tmp_to_use_p_1@uint64 tmp_to_use_14;
assume low57_1 = tmp_to_use_14 && true;
cast v27_2@int64 v21_2;
assume v27_2 = low57_1 && true;
split low_h1bit_1 low_l63bit_1 low57_1 63;
vpc mask_1@uint1 low_h1bit_1;
and low59_1@uint64 low57_1 9223372036854775807@uint64;
adds discarded_1 low60_1 low59_1 9223372041149743103@uint64;
not low61_1@uint64 low60_1;
split low_1 discarded_2 low61_1 63;
vpc low_2@uint1 low_1;
cmov v31_2 mask_1 low_2 0@uint1;
cmov mask63_1 v31_2 1@uint1 high_1;
cmov v32_3 mask63_1 18446744073709551615@uint128 0@uint128;
sub v33_3 v23_2 v32_3;
cmov v34_3 mask63_1 4294967295@uint64 0@uint64;
vpc v35_3@uint128 v34_3;
sub v36_3 v25_3 v35_3;
cmov v37_2 mask63_1 18446744069414584321@uint64 0@uint64;
vpc v38_2@uint128 v37_2;
sub v39_2 v21_2 v38_2;
split v40_2 tmp_to_use_15 v33_3 64;
add v41_2 v36_3 v40_2;
cast v42_2@uint64 v33_3;
vpc tmp_to_use_p_2@uint64 tmp_to_use_15;
assume v42_2 = tmp_to_use_p_2 && true;
split v43_2 tmp_to_use_16 v41_2 64;
add v44_2 v8_3 v43_2;
cast v45_2@uint64 v41_2;
vpc tmp_to_use_p_3@uint64 tmp_to_use_16;
assume v45_2 = tmp_to_use_16 && true;
split v46_2 tmp_to_use_17 v44_2 64;
add v47_2 v39_2 v46_2;
cast v48_2@uint64 v44_2;
vpc tmp_to_use_p_4@uint64 tmp_to_use_17;
assume v48_2 = tmp_to_use_17 && true;
mov out64_0_1 v42_2;
mov out64_8_1 v45_2;
mov out64_16_1 v48_2;
vpc v49_2@uint64 v47_2;
mov out64_24_1 v49_2;
mov small_0_1 out64_0_1;
mov small_8_1 out64_8_1;
mov small_16_1 out64_16_1;
mov small_24_1 out64_24_1;
mov small38_0_2 small_0_1;
mov small38_8_2 small_8_1;
mov small38_16_2 small_16_1;
mov small38_24_2 small_24_1;
mov v1_4 small38_0_2;
mulj a39_2 v1_4 v1_4;
split v3_4 tmp_to_use_18 a39_2 64;
mov value_lo_24 18446744073709551615@uint64;
mov value_hi_24 0@uint64;
join value_24 value_hi_24 value_lo_24;
and v58_3@uint128 a39_2 value_24;
assume v58_3 = tmp_to_use_18 && true;
mov out40_0_2 v58_3;
mov v4_4 small38_8_2;
mulj a42_2 v1_4 v4_4;
split v6_4 tmp_to_use_19 a42_2 64;
mov value_lo_25 18446744073709551615@uint64;
mov value_hi_25 0@uint64;
join value_25 value_hi_25 value_lo_25;
and v59_3@uint128 a42_2 value_25;
assume v59_3 = tmp_to_use_19 && true;
mov value_lo_26 2@uint64;
mov value_hi_26 0@uint64;
join value_26 value_hi_26 value_lo_26;
mul v69_2 v59_3 value_26;
add v8_4 v3_4 v69_2;
mov out40_16_2 v8_4;
mov v9_3 small38_16_2;
mulj a44_2 v1_4 v9_3;
split v11_3 tmp_to_use_20 a44_2 64;
mov value_lo_27 18446744073709551615@uint64;
mov value_hi_27 0@uint64;
join value_27 value_hi_27 value_lo_27;
and v60_3@uint128 a44_2 value_27;
assume v60_3 = tmp_to_use_20 && true;
add v12_3 v6_4 v60_3;
mov value_lo_28 2@uint64;
mov value_hi_28 0@uint64;
join value_28 value_hi_28 value_lo_28;
mul v13_3 v12_3 value_28;
mov v14_3 small38_24_2;
mulj a45_2 v1_4 v14_3;
split v16_3 tmp_to_use_21 a45_2 64;
mov value_lo_29 18446744073709551615@uint64;
mov value_hi_29 0@uint64;
join value_29 value_hi_29 value_lo_29;
and v61_3@uint128 a45_2 value_29;
assume v61_3 = tmp_to_use_21 && true;
add v17_4 v11_3 v61_3;
mulj a46_2 v4_4 v9_3;
split v18_4 tmp_to_use_22 a46_2 64;
mov value_lo_30 18446744073709551615@uint64;
mov value_hi_30 0@uint64;
join value_30 value_hi_30 value_lo_30;
and v62_3@uint128 a46_2 value_30;
assume v62_3 = tmp_to_use_22 && true;
add v19_3 v17_4 v62_3;
mov value_lo_31 2@uint64;
mov value_hi_31 0@uint64;
join value_31 value_hi_31 value_lo_31;
mul v20_4 v19_3 value_31;
add v21_3 v16_3 v18_4;
mulj a47_2 v4_4 v4_4;
split v22_4 tmp_to_use_23 a47_2 64;
mov value_lo_32 18446744073709551615@uint64;
mov value_hi_32 0@uint64;
join value_32 value_hi_32 value_lo_32;
and v63_3@uint128 a47_2 value_32;
assume v63_3 = tmp_to_use_23 && true;
add v23_3 v13_3 v63_3;
mov out40_32_2 v23_3;
add v24_4 v20_4 v22_4;
mov out40_48_2 v24_4;
mulj a50_2 v4_4 v14_3;
split v25_4 tmp_to_use_24 a50_2 64;
mov value_lo_33 18446744073709551615@uint64;
mov value_hi_33 0@uint64;
join value_33 value_hi_33 value_lo_33;
and v64_3@uint128 a50_2 value_33;
assume v64_3 = tmp_to_use_24 && true;
add v26_4 v21_3 v64_3;
mov value_lo_34 2@uint64;
mov value_hi_34 0@uint64;
join value_34 value_hi_34 value_lo_34;
mul v27_3 v26_4 value_34;
mulj a51_2 v9_3 v14_3;
split v28_3 tmp_to_use_25 a51_2 64;
mov value_lo_35 18446744073709551615@uint64;
mov value_hi_35 0@uint64;
join value_35 value_hi_35 value_lo_35;
and v65_3@uint128 a51_2 value_35;
assume v65_3 = tmp_to_use_25 && true;
add v29_3 v25_4 v65_3;
mov value_lo_36 2@uint64;
mov value_hi_36 0@uint64;
join value_36 value_hi_36 value_lo_36;
mul v30_3 v29_3 value_36;
mov value_lo_37 2@uint64;
mov value_hi_37 0@uint64;
join value_37 value_hi_37 value_lo_37;
mul v31_3 v28_3 value_37;
mulj a52_3 v9_3 v9_3;
split v32_4 tmp_to_use_26 a52_3 64;
mov value_lo_38 18446744073709551615@uint64;
mov value_hi_38 0@uint64;
join value_38 value_hi_38 value_lo_38;
and v66_3@uint128 a52_3 value_38;
assume v66_3 = tmp_to_use_26 && true;
add v33_4 v27_3 v66_3;
mov out40_64_2 v33_4;
add v34_4 v30_3 v32_4;
mov out40_80_2 v34_4;
mulj a55_2 v14_3 v14_3;
split v35_4 tmp_to_use_27 a55_2 64;
mov value_lo_39 18446744073709551615@uint64;
mov value_hi_39 0@uint64;
join value_39 value_hi_39 value_lo_39;
and v67_2@uint128 a55_2 value_39;
assume v67_2 = tmp_to_use_27 && true;
add v36_4 v31_3 v67_2;
mov out40_96_2 v36_4;
mov out40_112_2 v35_4;
mov tmp_0_2 out40_0_2;
mov tmp_16_2 out40_16_2;
mov tmp_32_2 out40_32_2;
mov tmp_48_2 out40_48_2;
mov tmp_64_2 out40_64_2;
mov tmp_80_2 out40_80_2;
mov tmp_96_2 out40_96_2;
mov tmp_112_2 out40_112_2;
mov in10_0_2 tmp_0_2;
mov in10_16_2 tmp_16_2;
mov in10_32_2 tmp_32_2;
mov in10_48_2 tmp_48_2;
mov in10_64_2 tmp_64_2;
mov in10_80_2 tmp_80_2;
mov in10_96_2 tmp_96_2;
mov in10_112_2 tmp_112_2;
mov v1_5 in10_0_2;
add v2_3 v1_5 1267650600228229401427983728624@uint128;
mov out11_0_7 v2_3;
mov v3_5 in10_16_2;
add v4_5 v3_5 1267650600228229401496703205376@uint128;
mov out11_16_5 v4_5;
mov v5_3 in10_32_2;
add v6_5 v5_3 1267650600228229401427983728656@uint128;
mov out11_32_6 v6_5;
mov v7_3 in10_48_2;
add v8_5 v7_3 1267650600228229401427983728656@uint128;
mov out11_48_6 v8_5;
mov v17_5 in10_64_2;
mov v18_5 in10_80_2;
split tmp1_13 tmp2_13 v18_5 96;
shl v19_4 tmp2_13 32;
assume tmp1_13 = 0 && true;
add v20_5 v17_5 v19_4;
add v22_5 v2_3 v20_5;
mov out11_0_8 v22_5;
sub v24_5 v8_5 v20_5;
mov out11_48_7 v24_5;
mov v25_5 in10_80_2;
mov v26_5 in10_112_2;
sub v30_4 v4_5 v26_5;
add v29_4 v25_5 v30_4;
mov out11_16_6 v29_4;
sub v28_4 v6_5 v25_5;
add v32_5 v26_5 v28_4;
mov out11_32_7 v32_5;
mov v33_5 in10_64_2;
split tmp1_14 tmp2_14 v33_5 96;
shl v34_5 tmp2_14 32;
assume tmp1_14 = 0 && true;
sub v35_5 v29_4 v34_5;
mov out11_16_7 v35_5;
mov v36_5 in10_64_2;
split tmp1_15 tmp2_15 v36_5 96;
shl v37_3 tmp2_15 32;
assume tmp1_15 = 0 && true;
add v38_3 v24_5 v37_3;
mov out11_48_8 v38_3;
mov v39_3 in10_80_2;
split tmp1_16 tmp2_16 v39_3 96;
shl v40_3 tmp2_16 32;
assume tmp1_16 = 0 && true;
sub v41_3 v32_5 v40_3;
mov out11_32_8 v41_3;
mov v42_3 in10_96_2;
sub v43_3 v22_5 v42_3;
mov out11_0_9 v43_3;
mov v44_3 in10_96_2;
split tmp1_17 tmp2_17 v44_3 96;
shl v45_3 tmp2_17 32;
assume tmp1_17 = 0 && true;
sub v46_3 v43_3 v45_3;
mov out11_0_10 v46_3;
mov v47_3 in10_96_2;
split tmp1_18 tmp2_18 v47_3 95;
shl v48_3 tmp2_18 33;
assume tmp1_18 = 0 && true;
add v49_3 v35_5 v48_3;
mov out11_16_8 v49_3;
mov v50_2 in10_96_2;
mul v51_2 v50_2 2@uint128;
add v52_2 v41_3 v51_2;
mov out11_32_9 v52_2;
mov v53_2 in10_96_2;
split tmp1_19 tmp2_19 v53_2 96;
shl v54_2 tmp2_19 32;
assume tmp1_19 = 0 && true;
sub v55_2 v38_3 v54_2;
mov out11_48_9 v55_2;
mov v56_2 in10_112_2;
sub v57_2 v46_3 v56_2;
mov out11_0_11 v57_2;
mov v58_4 in10_112_2;
split tmp1_20 tmp2_20 v58_4 96;
shl v59_4 tmp2_20 32;
assume tmp1_20 = 0 && true;
sub v60_4 v57_2 v59_4;
mov out11_0_12 v60_4;
mov v61_4 in10_112_2;
split tmp1_21 tmp2_21 v61_4 95;
shl v62_4 tmp2_21 33;
assume tmp1_21 = 0 && true;
add v63_4 v52_2 v62_4;
mov out11_32_10 v63_4;
mov v64_4 in10_112_2;
mul v65_4 v64_4 3@uint128;
add v66_4 v55_2 v65_4;
mov out11_48_10 v66_4;
mov z_out15_0_1 out11_0_12;
mov z_out15_16_1 out11_16_8;
mov z_out15_32_1 out11_32_10;
mov z_out15_48_1 out11_48_10;
mov v67_3 z_out15_0_1;
mov v69_3 z_out15_16_1;
mov v71_1 z_out15_32_1;
mov v73_1 z_out15_48_1;
mov v75_2 delta_0_1;
sub v288_1 40564819207303340845695479315968@uint128 v75_2;
add v76_2 v67_3 v288_1;
mov z_out15_0_2 v76_2;
mov v77_1 delta_16_1;
sub v287_1 40564819207303340847894502572032@uint128 v77_1;
add v78_1 v69_3 v287_1;
mov z_out15_16_2 v78_1;
mov v79_1 delta_32_1;
sub v286_1 40564819207303340845695479316992@uint128 v79_1;
add v80_1 v71_1 v286_1;
mov z_out15_32_2 v80_1;
mov v81_1 delta_48_1;
sub v285_1 40564819207303340845695479316992@uint128 v81_1;
add v82_1 v73_1 v285_1;
mov z_out15_48_2 v82_1;
mov v59_5 beta_0_0;
mul v60_5 v59_5 4@uint128;
mov v61_5 beta_16_0;
mul v62_5 v61_5 4@uint128;
mov v63_5 beta_32_0;
mul v64_5 v63_5 4@uint128;
mov v65_5 beta_48_0;
mul v66_5 v65_5 4@uint128;
add v47_4 v60_5 162259276829213363382781917263872@uint128;
add v48_4 v62_5 162259276829213363391578010288128@uint128;
add v49_4 v64_5 162259276829213363382781917267968@uint128;
add v50_3 v66_5 162259276829213363382781917267968@uint128;
mov v51_3 x_out13_0_2;
sub v52_3 v47_4 v51_3;
mov beta_0_1 v52_3;
mov v53_3 x_out13_16_2;
sub v54_3 v48_4 v53_3;
mov beta_16_1 v54_3;
mov v55_3 x_out13_32_2;
sub v56_3 v49_4 v55_3;
mov beta_32_1 v56_3;
mov v57_3 x_out13_48_2;
sub v58_5 v50_3 v57_3;
mov beta_48_1 v58_5;
mov in50_0_2 beta_0_1;
mov in50_16_2 beta_16_1;
mov in50_32_2 beta_32_1;
mov in50_48_2 beta_48_1;
mov v2_4 in50_48_2;
mov value_lo_40 18446744069414584320@uint64;
mov value_hi_40 0@uint64;
join value_40 value_hi_40 value_lo_40;
add v3_6 v2_4 value_40;
mov v4_6 in50_32_2;
split v5_4 tmp_to_use_28 v4_6 64;
add v6_6 v3_6 v5_4;
mov value_lo_41 18446744073709551615@uint64;
mov value_hi_41 0@uint64;
join value_41 value_hi_41 value_lo_41;
and v1_6@uint128 v4_6 value_41;
assume v1_6 = tmp_to_use_28 && true;
mov value_lo_42 18446673704965373952@uint64;
mov value_hi_42 0@uint64;
join value_42 value_hi_42 value_lo_42;
add v8_6 v1_6 value_42;
mov v10_2 in50_0_2;
mov value_lo_43 18446744073709551615@uint64;
mov value_hi_43 0@uint64;
join value_43 value_hi_43 value_lo_43;
add v11_4 v10_2 value_43;
mov v12_4 in50_16_2;
mov value_lo_44 4294967295@uint64;
mov value_hi_44 70368744177664@uint64;
join value_44 value_hi_44 value_lo_44;
add v13_4 v12_4 value_44;
split v14_4 tmp_to_use_29 v6_6 64;
vpc a52_4@uint64 v14_4;
mov value_lo_45 18446744073709551615@uint64;
mov value_hi_45 0@uint64;
join value_45 value_hi_45 value_lo_45;
and v7_4@uint128 v6_6 value_45;
assume v7_4 = tmp_to_use_29 && true;
split tmp1_22 tmp2_22 v14_4 96;
shl v16_4 tmp2_22 32;
assume tmp1_22 = 0 && true;
sub v76_3 v16_4 v14_4;
add v17_6 v7_4 v76_3;
split v18_6 tmp_to_use_30 v17_6 64;
vpc a53_2@uint64 v18_6;
add b54_2 a52_4 a53_2;
mov value_lo_46 18446744073709551615@uint64;
mov value_hi_46 0@uint64;
join value_46 value_hi_46 value_lo_46;
and v9_4@uint128 v17_6 value_46;
assume v9_4 = tmp_to_use_30 && true;
split tmp1_23 tmp2_23 v18_6 96;
shl v20_6 tmp2_23 32;
assume tmp1_23 = 0 && true;
sub v75_3 v20_6 v18_6;
add v21_4 v9_4 v75_3;
vpc v22_6@uint128 b54_2;
add v23_4 v11_4 v22_6;
split tmp1_24 tmp2_24 v22_6 96;
shl v24_6 tmp2_24 32;
assume tmp1_24 = 0 && true;
sub v25_6 v13_4 v24_6;
split v26_6 tmp_to_use_31 v21_4 64;
vpc high55_2@uint64 v26_6;
subb high_2 high56_2 0@uint64 high55_2;
cast low57_2@uint64 v21_4;
vpc tmp_to_use_p_5@uint64 tmp_to_use_31;
assume low57_2 = tmp_to_use_31 && true;
cast v27_4@int64 v21_4;
assume v27_4 = low57_2 && true;
split low_h1bit_2 low_l63bit_2 low57_2 63;
vpc mask_2@uint1 low_h1bit_2;
and low59_2@uint64 low57_2 9223372036854775807@uint64;
adds discarded_3 low60_2 low59_2 9223372041149743103@uint64;
not low61_2@uint64 low60_2;
split low_3 discarded_4 low61_2 63;
vpc low_4@uint1 low_3;
cmov v31_4 mask_2 low_4 0@uint1;
cmov mask63_2 v31_4 1@uint1 high_2;
cmov v32_6 mask63_2 18446744073709551615@uint128 0@uint128;
sub v33_6 v23_4 v32_6;
cmov v34_6 mask63_2 4294967295@uint64 0@uint64;
vpc v35_6@uint128 v34_6;
sub v36_6 v25_6 v35_6;
cmov v37_4 mask63_2 18446744069414584321@uint64 0@uint64;
vpc v38_4@uint128 v37_4;
sub v39_4 v21_4 v38_4;
split v40_4 tmp_to_use_32 v33_6 64;
add v41_4 v36_6 v40_4;
cast v42_4@uint64 v33_6;
vpc tmp_to_use_p_6@uint64 tmp_to_use_32;
assume v42_4 = tmp_to_use_p_6 && true;
split v43_4 tmp_to_use_33 v41_4 64;
add v44_4 v8_6 v43_4;
cast v45_4@uint64 v41_4;
vpc tmp_to_use_p_7@uint64 tmp_to_use_33;
assume v45_4 = tmp_to_use_33 && true;
split v46_4 tmp_to_use_34 v44_4 64;
add v47_5 v39_4 v46_4;
cast v48_5@uint64 v44_4;
vpc tmp_to_use_p_8@uint64 tmp_to_use_34;
assume v48_5 = tmp_to_use_34 && true;
mov out64_0_2 v42_4;
mov out64_8_2 v45_4;
mov out64_16_2 v48_5;
vpc v49_5@uint64 v47_5;
mov out64_24_2 v49_5;
mov small2_wrong_0_1 out64_0_2;
mov small2_wrong_8_1 out64_8_2;
mov small2_wrong_16_1 out64_16_2;
mov small2_wrong_24_1 out64_24_2;
mov small158_0_1 small2_0_0;
mov small158_8_1 small2_8_0;
mov small158_16_1 small2_16_0;
mov small158_24_1 small2_24_0;
mov small259_0_1 small2_wrong_0_1;
mov small259_8_1 small2_wrong_8_1;
mov small259_16_1 small2_wrong_16_1;
mov small259_24_1 small2_wrong_24_1;
mov v1_7 small158_0_1;
mov v3_7 small259_0_1;
mulj a60_1 v1_7 v3_7;
split v5_5 tmp_to_use_35 a60_1 64;
mov value_lo_47 18446744073709551615@uint64;
mov value_hi_47 0@uint64;
join value_47 value_hi_47 value_lo_47;
and v85_2@uint128 a60_1 value_47;
assume v85_2 = tmp_to_use_35 && true;
mov out61_0_1 v85_2;
mov v6_7 small259_8_1;
mulj a63_1 v1_7 v6_7;
split v8_7 tmp_to_use_36 a63_1 64;
mov value_lo_48 18446744073709551615@uint64;
mov value_hi_48 0@uint64;
join value_48 value_hi_48 value_lo_48;
and v86_2@uint128 a63_1 value_48;
assume v86_2 = tmp_to_use_36 && true;
add v9_5 v5_5 v86_2;
mov v10_3 small158_8_1;
mulj a64_1 v3_7 v10_3;
split v12_5 tmp_to_use_37 a64_1 64;
mov value_lo_49 18446744073709551615@uint64;
mov value_hi_49 0@uint64;
join value_49 value_hi_49 value_lo_49;
and v87_2@uint128 a64_1 value_49;
assume v87_2 = tmp_to_use_37 && true;
add v13_5 v9_5 v87_2;
mov out61_16_1 v13_5;
add v14_5 v8_7 v12_5;
mov v15_1 small259_16_1;
mulj a66_1 v1_7 v15_1;
split v17_7 tmp_to_use_38 a66_1 64;
mov value_lo_50 18446744073709551615@uint64;
mov value_hi_50 0@uint64;
join value_50 value_hi_50 value_lo_50;
and v88_2@uint128 a66_1 value_50;
assume v88_2 = tmp_to_use_38 && true;
add v18_7 v14_5 v88_2;
mulj a67_1 v6_7 v10_3;
split v19_5 tmp_to_use_39 a67_1 64;
mov value_lo_51 18446744073709551615@uint64;
mov value_hi_51 0@uint64;
join value_51 value_hi_51 value_lo_51;
and v89_2@uint128 a67_1 value_51;
assume v89_2 = tmp_to_use_39 && true;
add v20_7 v18_7 v89_2;
add v21_5 v17_7 v19_5;
mov v22_7 small158_16_1;
mulj a68_1 v3_7 v22_7;
split v24_7 tmp_to_use_40 a68_1 64;
mov value_lo_52 18446744073709551615@uint64;
mov value_hi_52 0@uint64;
join value_52 value_hi_52 value_lo_52;
and v90_2@uint128 a68_1 value_52;
assume v90_2 = tmp_to_use_40 && true;
add v25_7 v20_7 v90_2;
mov out61_32_1 v25_7;
add v26_7 v21_5 v24_7;
mov v27_5 small259_24_1;
mulj a70_1 v1_7 v27_5;
split v29_5 tmp_to_use_41 a70_1 64;
mov value_lo_53 18446744073709551615@uint64;
mov value_hi_53 0@uint64;
join value_53 value_hi_53 value_lo_53;
and v91_2@uint128 a70_1 value_53;
assume v91_2 = tmp_to_use_41 && true;
add v30_5 v26_7 v91_2;
mulj a71_1 v10_3 v15_1;
split v31_5 tmp_to_use_42 a71_1 64;
mov value_lo_54 18446744073709551615@uint64;
mov value_hi_54 0@uint64;
join value_54 value_hi_54 value_lo_54;
and v92_2@uint128 a71_1 value_54;
assume v92_2 = tmp_to_use_42 && true;
add v32_7 v30_5 v92_2;
add v33_7 v29_5 v31_5;
mulj a72_1 v6_7 v22_7;
split v34_7 tmp_to_use_43 a72_1 64;
mov value_lo_55 18446744073709551615@uint64;
mov value_hi_55 0@uint64;
join value_55 value_hi_55 value_lo_55;
and v93_2@uint128 a72_1 value_55;
assume v93_2 = tmp_to_use_43 && true;
add v35_7 v32_7 v93_2;
add v36_7 v33_7 v34_7;
mov v37_5 small158_24_1;
mulj a73_1 v3_7 v37_5;
split v39_5 tmp_to_use_44 a73_1 64;
mov value_lo_56 18446744073709551615@uint64;
mov value_hi_56 0@uint64;
join value_56 value_hi_56 value_lo_56;
and v94_2@uint128 a73_1 value_56;
assume v94_2 = tmp_to_use_44 && true;
add v40_5 v35_7 v94_2;
mov out61_48_1 v40_5;
add v41_5 v36_7 v39_5;
mulj a75_1 v10_3 v27_5;
split v42_5 tmp_to_use_45 a75_1 64;
mov value_lo_57 18446744073709551615@uint64;
mov value_hi_57 0@uint64;
join value_57 value_hi_57 value_lo_57;
and v95_2@uint128 a75_1 value_57;
assume v95_2 = tmp_to_use_45 && true;
add v43_5 v41_5 v95_2;
mulj a76_1 v15_1 v22_7;
split v44_5 tmp_to_use_46 a76_1 64;
mov value_lo_58 18446744073709551615@uint64;
mov value_hi_58 0@uint64;
join value_58 value_hi_58 value_lo_58;
and v96_2@uint128 a76_1 value_58;
assume v96_2 = tmp_to_use_46 && true;
add v45_5 v43_5 v96_2;
add v46_5 v42_5 v44_5;
mulj a77_1 v6_7 v37_5;
split v47_6 tmp_to_use_47 a77_1 64;
mov value_lo_59 18446744073709551615@uint64;
mov value_hi_59 0@uint64;
join value_59 value_hi_59 value_lo_59;
and v97_2@uint128 a77_1 value_59;
assume v97_2 = tmp_to_use_47 && true;
add v48_6 v45_5 v97_2;
mov out61_64_1 v48_6;
add v49_6 v46_5 v47_6;
mulj a79_1 v22_7 v27_5;
split v50_4 tmp_to_use_48 a79_1 64;
mov value_lo_60 18446744073709551615@uint64;
mov value_hi_60 0@uint64;
join value_60 value_hi_60 value_lo_60;
and v98_2@uint128 a79_1 value_60;
assume v98_2 = tmp_to_use_48 && true;
add v51_4 v49_6 v98_2;
mulj a80_1 v15_1 v37_5;
split v52_4 tmp_to_use_49 a80_1 64;
mov value_lo_61 18446744073709551615@uint64;
mov value_hi_61 0@uint64;
join value_61 value_hi_61 value_lo_61;
and v99_2@uint128 a80_1 value_61;
assume v99_2 = tmp_to_use_49 && true;
add v53_4 v51_4 v99_2;
mov out61_80_1 v53_4;
add v54_4 v50_4 v52_4;
mulj a82_1 v27_5 v37_5;
split v55_4 tmp_to_use_50 a82_1 64;
mov value_lo_62 18446744073709551615@uint64;
mov value_hi_62 0@uint64;
join value_62 value_hi_62 value_lo_62;
and v100_2@uint128 a82_1 value_62;
assume v100_2 = tmp_to_use_50 && true;
add v56_4 v54_4 v100_2;
mov out61_96_1 v56_4;
mov out61_112_1 v55_4;
mov tmp_0_3 out61_0_1;
mov tmp_16_3 out61_16_1;
mov tmp_32_3 out61_32_1;
mov tmp_48_3 out61_48_1;
mov tmp_64_3 out61_64_1;
mov tmp_80_3 out61_80_1;
mov tmp_96_3 out61_96_1;
mov tmp_112_3 out61_112_1;
mov small38_0_3 small1_0_0;
mov small38_8_3 small1_8_0;
mov small38_16_3 small1_16_0;
mov small38_24_3 small1_24_0;
mov v1_8 small38_0_3;
mulj a39_3 v1_8 v1_8;
split v3_8 tmp_to_use_51 a39_3 64;
mov value_lo_63 18446744073709551615@uint64;
mov value_hi_63 0@uint64;
join value_63 value_hi_63 value_lo_63;
and v58_6@uint128 a39_3 value_63;
assume v58_6 = tmp_to_use_51 && true;
mov out40_0_3 v58_6;
mov v4_7 small38_8_3;
mulj a42_3 v1_8 v4_7;
split v6_8 tmp_to_use_52 a42_3 64;
mov value_lo_64 18446744073709551615@uint64;
mov value_hi_64 0@uint64;
join value_64 value_hi_64 value_lo_64;
and v59_6@uint128 a42_3 value_64;
assume v59_6 = tmp_to_use_52 && true;
mov value_lo_65 2@uint64;
mov value_hi_65 0@uint64;
join value_65 value_hi_65 value_lo_65;
mul v69_4 v59_6 value_65;
add v8_8 v3_8 v69_4;
mov out40_16_3 v8_8;
mov v9_6 small38_16_3;
mulj a44_3 v1_8 v9_6;
split v11_5 tmp_to_use_53 a44_3 64;
mov value_lo_66 18446744073709551615@uint64;
mov value_hi_66 0@uint64;
join value_66 value_hi_66 value_lo_66;
and v60_6@uint128 a44_3 value_66;
assume v60_6 = tmp_to_use_53 && true;
add v12_6 v6_8 v60_6;
mov value_lo_67 2@uint64;
mov value_hi_67 0@uint64;
join value_67 value_hi_67 value_lo_67;
mul v13_6 v12_6 value_67;
mov v14_6 small38_24_3;
mulj a45_3 v1_8 v14_6;
split v16_5 tmp_to_use_54 a45_3 64;
mov value_lo_68 18446744073709551615@uint64;
mov value_hi_68 0@uint64;
join value_68 value_hi_68 value_lo_68;
and v61_6@uint128 a45_3 value_68;
assume v61_6 = tmp_to_use_54 && true;
add v17_8 v11_5 v61_6;
mulj a46_3 v4_7 v9_6;
split v18_8 tmp_to_use_55 a46_3 64;
mov value_lo_69 18446744073709551615@uint64;
mov value_hi_69 0@uint64;
join value_69 value_hi_69 value_lo_69;
and v62_6@uint128 a46_3 value_69;
assume v62_6 = tmp_to_use_55 && true;
add v19_6 v17_8 v62_6;
mov value_lo_70 2@uint64;
mov value_hi_70 0@uint64;
join value_70 value_hi_70 value_lo_70;
mul v20_8 v19_6 value_70;
add v21_6 v16_5 v18_8;
mulj a47_3 v4_7 v4_7;
split v22_8 tmp_to_use_56 a47_3 64;
mov value_lo_71 18446744073709551615@uint64;
mov value_hi_71 0@uint64;
join value_71 value_hi_71 value_lo_71;
and v63_6@uint128 a47_3 value_71;
assume v63_6 = tmp_to_use_56 && true;
add v23_5 v13_6 v63_6;
mov out40_32_3 v23_5;
add v24_8 v20_8 v22_8;
mov out40_48_3 v24_8;
mulj a50_3 v4_7 v14_6;
split v25_8 tmp_to_use_57 a50_3 64;
mov value_lo_72 18446744073709551615@uint64;
mov value_hi_72 0@uint64;
join value_72 value_hi_72 value_lo_72;
and v64_6@uint128 a50_3 value_72;
assume v64_6 = tmp_to_use_57 && true;
add v26_8 v21_6 v64_6;
mov value_lo_73 2@uint64;
mov value_hi_73 0@uint64;
join value_73 value_hi_73 value_lo_73;
mul v27_6 v26_8 value_73;
mulj a51_3 v9_6 v14_6;
split v28_5 tmp_to_use_58 a51_3 64;
mov value_lo_74 18446744073709551615@uint64;
mov value_hi_74 0@uint64;
join value_74 value_hi_74 value_lo_74;
and v65_6@uint128 a51_3 value_74;
assume v65_6 = tmp_to_use_58 && true;
add v29_6 v25_8 v65_6;
mov value_lo_75 2@uint64;
mov value_hi_75 0@uint64;
join value_75 value_hi_75 value_lo_75;
mul v30_6 v29_6 value_75;
mov value_lo_76 2@uint64;
mov value_hi_76 0@uint64;
join value_76 value_hi_76 value_lo_76;
mul v31_6 v28_5 value_76;
mulj a52_5 v9_6 v9_6;
split v32_8 tmp_to_use_59 a52_5 64;
mov value_lo_77 18446744073709551615@uint64;
mov value_hi_77 0@uint64;
join value_77 value_hi_77 value_lo_77;
and v66_6@uint128 a52_5 value_77;
assume v66_6 = tmp_to_use_59 && true;
add v33_8 v27_6 v66_6;
mov out40_64_3 v33_8;
add v34_8 v30_6 v32_8;
mov out40_80_3 v34_8;
mulj a55_3 v14_6 v14_6;
split v35_8 tmp_to_use_60 a55_3 64;
mov value_lo_78 18446744073709551615@uint64;
mov value_hi_78 0@uint64;
join value_78 value_hi_78 value_lo_78;
and v67_4@uint128 a55_3 value_78;
assume v67_4 = tmp_to_use_60 && true;
add v36_8 v31_6 v67_4;
mov out40_96_3 v36_8;
mov out40_112_3 v35_8;
mov tmp2_0_1 out40_0_3;
mov tmp2_16_1 out40_16_3;
mov tmp2_32_1 out40_32_3;
mov tmp2_48_1 out40_48_3;
mov tmp2_64_1 out40_64_3;
mov tmp2_80_1 out40_80_3;
mov tmp2_96_1 out40_96_3;
mov tmp2_112_1 out40_112_3;
mov v31_7 tmp2_0_1;
mul v32_9 v31_7 8@uint128;
mov tmp2_0_2 v32_9;
mov v33_9 tmp2_16_1;
mul v34_9 v33_9 8@uint128;
mov tmp2_16_2 v34_9;
mov v35_9 tmp2_32_1;
mul v36_9 v35_9 8@uint128;
mov tmp2_32_2 v36_9;
mov v37_6 tmp2_48_1;
mul v38_5 v37_6 8@uint128;
mov tmp2_48_2 v38_5;
mov v39_6 tmp2_64_1;
mul v40_6 v39_6 8@uint128;
mov tmp2_64_2 v40_6;
mov v41_6 tmp2_80_1;
mul v42_6 v41_6 8@uint128;
mov tmp2_80_2 v42_6;
mov v43_6 tmp2_96_1;
mul v44_6 v43_6 8@uint128;
mov tmp2_96_2 v44_6;
mov v45_6 tmp2_112_1;
mul v46_6 v45_6 8@uint128;
mov tmp2_112_2 v46_6;
mov v226_1 tmp_0_3;
add v227_1 v226_1 1180591620717411303232@uint128;
mov v228_1 tmp_16_3;
add v229_1 v228_1 1180591621816922931200@uint128;
mov v230_1 tmp_32_3;
add v231_1 v230_1 1180591620717411303424@uint128;
mov v232_1 tmp_48_3;
add v233_1 v232_1 1180591619343021768768@uint128;
mov v234_1 tmp_64_3;
add v235_1 v234_1 1180591620717411303360@uint128;
mov v236_1 tmp_80_3;
add v237_1 v236_1 1180591620717411303360@uint128;
mov v238_1 tmp_96_3;
add v239_1 v238_1 1180591620717411303360@uint128;
mov v240_1 tmp_112_3;
add v241_1 v240_1 1180591620717411303360@uint128;
sub v243_1 v227_1 v32_9;
mov tmp_0_4 v243_1;
sub v245_1 v229_1 v34_9;
mov tmp_16_4 v245_1;
sub v247_1 v231_1 v36_9;
mov tmp_32_4 v247_1;
sub v249_1 v233_1 v38_5;
mov tmp_48_4 v249_1;
sub v251_1 v235_1 v40_6;
mov tmp_64_4 v251_1;
sub v253_1 v237_1 v42_6;
mov tmp_80_4 v253_1;
sub v255_1 v239_1 v44_6;
mov tmp_96_4 v255_1;
sub v257_1 v241_1 v46_6;
mov tmp_112_4 v257_1;
add v219_1 v243_1 40564819207303340845695479315968@uint128;
mov y_out19_0_1 v219_1;
add v221_1 v245_1 40564819207303340847894502572032@uint128;
mov y_out19_16_1 v221_1;
add v223_1 v247_1 40564819207303340845695479316992@uint128;
mov y_out19_32_1 v223_1;
add v225_1 v249_1 40564819207303340845695479316992@uint128;
mov y_out19_48_1 v225_1;
mov in51_64_1 tmp_64_4;
mov in51_80_1 tmp_80_4;
mov in51_96_1 tmp_96_4;
mov in51_112_1 tmp_112_4;
mov out53_0_1 y_out19_0_1;
mov out53_16_1 y_out19_16_1;
mov out53_32_1 y_out19_32_1;
mov out53_48_1 y_out19_48_1;
mov v1_9 in51_64_1;
mov v2_5 in51_80_1;
split tmp1_25 tmp2_25 v2_5 96;
shl v3_9 tmp2_25 32;
assume tmp1_25 = 0 && true;
add v4_8 v1_9 v3_9;
mov v5_6 out53_0_1;
add v7_5 v4_8 v5_6;
mov out53_0_2 v7_5;
mov v8_9 out53_48_1;
sub v9_7 v8_9 v4_8;
mov out53_48_2 v9_7;
mov v10_4 in51_80_1;
mov v11_6 in51_112_1;
mov v13_7 out53_16_1;
add v73_2 v10_4 v13_7;
sub v14_7 v73_2 v11_6;
mov out53_16_2 v14_7;
mov v15_2 out53_32_1;
add v72_1 v11_6 v15_2;
sub v16_6 v72_1 v10_4;
mov out53_32_2 v16_6;
mov v17_9 in51_64_1;
split tmp1_26 tmp2_26 v17_9 96;
shl v18_9 tmp2_26 32;
assume tmp1_26 = 0 && true;
sub v19_7 v14_7 v18_9;
mov out53_16_3 v19_7;
mov v20_9 in51_64_1;
split tmp1_27 tmp2_27 v20_9 96;
shl v21_7 tmp2_27 32;
assume tmp1_27 = 0 && true;
add v22_9 v9_7 v21_7;
mov out53_48_3 v22_9;
mov v23_6 in51_80_1;
split tmp1_28 tmp2_28 v23_6 96;
shl v24_9 tmp2_28 32;
assume tmp1_28 = 0 && true;
sub v25_9 v16_6 v24_9;
mov out53_32_3 v25_9;
mov v26_9 in51_96_1;
sub v27_7 v7_5 v26_9;
mov out53_0_3 v27_7;
mov v28_6 in51_96_1;
split tmp1_29 tmp2_29 v28_6 96;
shl v29_7 tmp2_29 32;
assume tmp1_29 = 0 && true;
sub v30_7 v27_7 v29_7;
mov out53_0_4 v30_7;
mov v31_8 in51_96_1;
split tmp1_30 tmp2_30 v31_8 95;
shl v32_10 tmp2_30 33;
assume tmp1_30 = 0 && true;
add v33_10 v19_7 v32_10;
mov out53_16_4 v33_10;
mov v34_10 in51_96_1;
mul v35_10 v34_10 2@uint128;
add v36_10 v25_9 v35_10;
mov out53_32_4 v36_10;
mov v37_7 in51_96_1;
split tmp1_31 tmp2_31 v37_7 96;
shl v38_6 tmp2_31 32;
assume tmp1_31 = 0 && true;
sub v39_7 v22_9 v38_6;
mov out53_48_4 v39_7;
mov v40_7 in51_112_1;
sub v41_7 v30_7 v40_7;
mov out53_0_5 v41_7;
mov v42_7 in51_112_1;
split tmp1_32 tmp2_32 v42_7 96;
shl v43_7 tmp2_32 32;
assume tmp1_32 = 0 && true;
sub v44_7 v41_7 v43_7;
mov out53_0_6 v44_7;
mov v45_7 in51_112_1;
split tmp1_33 tmp2_33 v45_7 95;
shl v46_7 tmp2_33 33;
assume tmp1_33 = 0 && true;
add v47_7 v36_10 v46_7;
mov out53_32_5 v47_7;
mov v48_7 in51_112_1;
mul v49_7 v48_7 3@uint128;
add v50_5 v39_7 v49_7;
mov out53_48_5 v50_5;
mov y_out19_0_2 out53_0_6;
mov y_out19_16_2 out53_16_4;
mov y_out19_32_2 out53_32_5;
mov y_out19_48_2 out53_48_5;
mov xp0_1 x_out13_0_2;
mov xp1_1 x_out13_16_2;
mov xp2_1 x_out13_32_2;
mov xp3_1 x_out13_48_2;
mov yp0_1 y_out19_0_2;
mov yp1_1 y_out19_16_2;
mov yp2_1 y_out19_32_2;
mov yp3_1 y_out19_48_2;
mov zp0_1 z_out15_0_2;
mov zp1_1 z_out15_16_2;
mov zp2_1 z_out15_32_2;
mov zp3_1 z_out15_48_2;
{ and [xp0_1 + (xp1_1 * 18446744073709551616) + (xp2_1 * 340282366920938463463374607431768211456) + (xp3_1 * 6277101735386680763835789423207666416102355444464034512896) = (3 * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896) - ((z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)))) * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896) + ((z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)))) * 3 * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896) - ((z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)))) * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896) + ((z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896))))) - (8 * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896))) (mod 18446744073709551615 + (4294967295 * 18446744073709551616) + (0 * 340282366920938463463374607431768211456) + (18446744069414584321 * 6277101735386680763835789423207666416102355444464034512896)), yp0_1 + (yp1_1 * 18446744073709551616) + (yp2_1 * 340282366920938463463374607431768211456) + (yp3_1 * 6277101735386680763835789423207666416102355444464034512896) = (3 * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896) - ((z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)))) * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896) + ((z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)))) * ((4 * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896))) - (xp0_1 + (xp1_1 * 18446744073709551616) + (xp2_1 * 340282366920938463463374607431768211456) + (xp3_1 * 6277101735386680763835789423207666416102355444464034512896)))) - (8 * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896))) (mod 18446744073709551615 + (4294967295 * 18446744073709551616) + (0 * 340282366920938463463374607431768211456) + (18446744069414584321 * 6277101735386680763835789423207666416102355444464034512896)), zp0_1 + (zp1_1 * 18446744073709551616) + (zp2_1 * 340282366920938463463374607431768211456) + (zp3_1 * 6277101735386680763835789423207666416102355444464034512896) = 2 * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) (mod 18446744073709551615 + (4294967295 * 18446744073709551616) + (0 * 340282366920938463463374607431768211456) + (18446744069414584321 * 6277101735386680763835789423207666416102355444464034512896))] && and [v58_1 = tmp_to_use_1, v59_1 = tmp_to_use_2, v60_1 = tmp_to_use_3, v61_1 = tmp_to_use_4, v62_1 = tmp_to_use_5, v63_1 = tmp_to_use_6, v64_1 = tmp_to_use_7, v65_1 = tmp_to_use_8, v66_1 = tmp_to_use_9, v67_1 = tmp_to_use_10, tmp1_1 = 0@128, tmp1_2 = 0@128, tmp1_3 = 0@128, tmp1_4 = 0@128, tmp1_5 = 0@128, tmp1_6 = 0@128, tmp1_7 = 0@128, tmp1_8 = 0@128, tmp1_9 = 0@128, v1_3 = tmp_to_use_11, v7_2 = tmp_to_use_12, tmp1_10 = 0@128, v9_2 = tmp_to_use_13, tmp1_11 = 0@128, tmp1_12 = 0@128, low57_1 = tmp_to_use_p_1, v27_2 = low57_1, v42_2 = tmp_to_use_p_2, v45_2 = tmp_to_use_p_3, v48_2 = tmp_to_use_p_4, v58_3 = tmp_to_use_18, v59_3 = tmp_to_use_19, v60_3 = tmp_to_use_20, v61_3 = tmp_to_use_21, v62_3 = tmp_to_use_22, v63_3 = tmp_to_use_23, v64_3 = tmp_to_use_24, v65_3 = tmp_to_use_25, v66_3 = tmp_to_use_26, v67_2 = tmp_to_use_27, tmp1_13 = 0@128, tmp1_14 = 0@128, tmp1_15 = 0@128, tmp1_16 = 0@128, tmp1_17 = 0@128, tmp1_18 = 0@128, tmp1_19 = 0@128, tmp1_20 = 0@128, tmp1_21 = 0@128, v1_6 = tmp_to_use_28, v7_4 = tmp_to_use_29, tmp1_22 = 0@128, v9_4 = tmp_to_use_30, tmp1_23 = 0@128, tmp1_24 = 0@128, low57_2 = tmp_to_use_p_5, v27_4 = low57_2, v42_4 = tmp_to_use_p_6, v45_4 = tmp_to_use_p_7, v48_5 = tmp_to_use_p_8, v85_2 = tmp_to_use_35, v86_2 = tmp_to_use_36, v87_2 = tmp_to_use_37, v88_2 = tmp_to_use_38, v89_2 = tmp_to_use_39, v90_2 = tmp_to_use_40, v91_2 = tmp_to_use_41, v92_2 = tmp_to_use_42, v93_2 = tmp_to_use_43, v94_2 = tmp_to_use_44, v95_2 = tmp_to_use_45, v96_2 = tmp_to_use_46, v97_2 = tmp_to_use_47, v98_2 = tmp_to_use_48, v99_2 = tmp_to_use_49, v100_2 = tmp_to_use_50, v58_6 = tmp_to_use_51, v59_6 = tmp_to_use_52, v60_6 = tmp_to_use_53, v61_6 = tmp_to_use_54, v62_6 = tmp_to_use_55, v63_6 = tmp_to_use_56, v64_6 = tmp_to_use_57, v65_6 = tmp_to_use_58, v66_6 = tmp_to_use_59, v67_4 = tmp_to_use_60, tmp1_25 = 0@128, tmp1_26 = 0@128, tmp1_27 = 0@128, tmp1_28 = 0@128, tmp1_29 = 0@128, tmp1_30 = 0@128, tmp1_31 = 0@128, tmp1_32 = 0@128, tmp1_33 = 0@128] }
