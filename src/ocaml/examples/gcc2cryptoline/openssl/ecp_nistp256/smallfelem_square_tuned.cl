proc main(uint64 a0_0, uint64 a1_0, uint64 a2_0, uint64 a3_0) =
{ true && true }
mov small38_0_1 a0_0;
mov small38_8_1 a1_0;
mov small38_16_1 a2_0;
mov small38_24_1 a3_0;
mov v1_1 small38_0_1;
mulj a39_1 v1_1 v1_1;
split v3_1 tmp_to_use_1 a39_1 64;
mov value_lo_1 18446744073709551615@uint64;
mov value_hi_1 0@uint64;
join value_1 value_hi_1 value_lo_1;
and v58_1@uint128 a39_1 value_1;
assume v58_1 = tmp_to_use_1 && true;
mov out40_0_1 v58_1;
mov v4_1 small38_8_1;
mulj a42_1 v1_1 v4_1;
split v6_1 tmp_to_use_2 a42_1 64;
mov value_lo_2 18446744073709551615@uint64;
mov value_hi_2 0@uint64;
join value_2 value_hi_2 value_lo_2;
and v59_1@uint128 a42_1 value_2;
assume v59_1 = tmp_to_use_2 && true;
mov value_lo_3 2@uint64;
mov value_hi_3 0@uint64;
join value_3 value_hi_3 value_lo_3;
mul v69_1 v59_1 value_3;
add v8_1 v3_1 v69_1;
mov out40_16_1 v8_1;
mov v9_1 small38_16_1;
mulj a44_1 v1_1 v9_1;
split v11_1 tmp_to_use_3 a44_1 64;
mov value_lo_4 18446744073709551615@uint64;
mov value_hi_4 0@uint64;
join value_4 value_hi_4 value_lo_4;
and v60_1@uint128 a44_1 value_4;
assume v60_1 = tmp_to_use_3 && true;
add v12_1 v6_1 v60_1;
mov value_lo_5 2@uint64;
mov value_hi_5 0@uint64;
join value_5 value_hi_5 value_lo_5;
mul v13_1 v12_1 value_5;
mov v14_1 small38_24_1;
mulj a45_1 v1_1 v14_1;
split v16_1 tmp_to_use_4 a45_1 64;
mov value_lo_6 18446744073709551615@uint64;
mov value_hi_6 0@uint64;
join value_6 value_hi_6 value_lo_6;
and v61_1@uint128 a45_1 value_6;
assume v61_1 = tmp_to_use_4 && true;
add v17_1 v11_1 v61_1;
mulj a46_1 v4_1 v9_1;
split v18_1 tmp_to_use_5 a46_1 64;
mov value_lo_7 18446744073709551615@uint64;
mov value_hi_7 0@uint64;
join value_7 value_hi_7 value_lo_7;
and v62_1@uint128 a46_1 value_7;
assume v62_1 = tmp_to_use_5 && true;
add v19_1 v17_1 v62_1;
mov value_lo_8 2@uint64;
mov value_hi_8 0@uint64;
join value_8 value_hi_8 value_lo_8;
mul v20_1 v19_1 value_8;
add v21_1 v16_1 v18_1;
mulj a47_1 v4_1 v4_1;
split v22_1 tmp_to_use_6 a47_1 64;
mov value_lo_9 18446744073709551615@uint64;
mov value_hi_9 0@uint64;
join value_9 value_hi_9 value_lo_9;
and v63_1@uint128 a47_1 value_9;
assume v63_1 = tmp_to_use_6 && true;
add v23_1 v13_1 v63_1;
mov out40_32_1 v23_1;
add v24_1 v20_1 v22_1;
mov out40_48_1 v24_1;
mulj a50_1 v4_1 v14_1;
split v25_1 tmp_to_use_7 a50_1 64;
mov value_lo_10 18446744073709551615@uint64;
mov value_hi_10 0@uint64;
join value_10 value_hi_10 value_lo_10;
and v64_1@uint128 a50_1 value_10;
assume v64_1 = tmp_to_use_7 && true;
add v26_1 v21_1 v64_1;
mov value_lo_11 2@uint64;
mov value_hi_11 0@uint64;
join value_11 value_hi_11 value_lo_11;
mul v27_1 v26_1 value_11;
mulj a51_1 v9_1 v14_1;
split v28_1 tmp_to_use_8 a51_1 64;
mov value_lo_12 18446744073709551615@uint64;
mov value_hi_12 0@uint64;
join value_12 value_hi_12 value_lo_12;
and v65_1@uint128 a51_1 value_12;
assume v65_1 = tmp_to_use_8 && true;
add v29_1 v25_1 v65_1;
mov value_lo_13 2@uint64;
mov value_hi_13 0@uint64;
join value_13 value_hi_13 value_lo_13;
mul v30_1 v29_1 value_13;
mov value_lo_14 2@uint64;
mov value_hi_14 0@uint64;
join value_14 value_hi_14 value_lo_14;
mul v31_1 v28_1 value_14;
mulj a52_1 v9_1 v9_1;
split v32_1 tmp_to_use_9 a52_1 64;
mov value_lo_15 18446744073709551615@uint64;
mov value_hi_15 0@uint64;
join value_15 value_hi_15 value_lo_15;
and v66_1@uint128 a52_1 value_15;
assume v66_1 = tmp_to_use_9 && true;
add v33_1 v27_1 v66_1;
mov out40_64_1 v33_1;
add v34_1 v30_1 v32_1;
mov out40_80_1 v34_1;
mulj a55_1 v14_1 v14_1;
split v35_1 tmp_to_use_10 a55_1 64;
mov value_lo_16 18446744073709551615@uint64;
mov value_hi_16 0@uint64;
join value_16 value_hi_16 value_lo_16;
and v67_1@uint128 a55_1 value_16;
assume v67_1 = tmp_to_use_10 && true;
add v36_1 v31_1 v67_1;
mov out40_96_1 v36_1;
mov out40_112_1 v35_1;
mov c0_1 out40_0_1;
mov c1_1 out40_16_1;
mov c2_1 out40_32_1;
mov c3_1 out40_48_1;
mov c4_1 out40_64_1;
mov c5_1 out40_80_1;
mov c6_1 out40_96_1;
mov c7_1 out40_112_1;
{ c0_1 + (c1_1 * 18446744073709551616) + (c2_1 * 340282366920938463463374607431768211456) + (c3_1 * 6277101735386680763835789423207666416102355444464034512896) + (c4_1 * 115792089237316195423570985008687907853269984665640564039457584007913129639936) + (c5_1 * 2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936576) + (c6_1 * 39402006196394479212279040100143613805079739270465446667948293404245721771497210611414266254884915640806627990306816) + (c7_1 * 726838724295606890549323807888004534353641360687318060281490199180639288113397923326191050713763565560762521606266177933534601628614656) = (a0_0 + (a1_0 * 18446744073709551616) + (a2_0 * 340282366920938463463374607431768211456) + (a3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (a0_0 + (a1_0 * 18446744073709551616) + (a2_0 * 340282366920938463463374607431768211456) + (a3_0 * 6277101735386680763835789423207666416102355444464034512896)) (mod 18446744073709551615 + (4294967295 * 18446744073709551616) + (0 * 340282366920938463463374607431768211456) + (18446744069414584321 * 6277101735386680763835789423207666416102355444464034512896)) && and [v58_1 = tmp_to_use_1, v59_1 = tmp_to_use_2, v60_1 = tmp_to_use_3, v61_1 = tmp_to_use_4, v62_1 = tmp_to_use_5, v63_1 = tmp_to_use_6, v64_1 = tmp_to_use_7, v65_1 = tmp_to_use_8, v66_1 = tmp_to_use_9, v67_1 = tmp_to_use_10, c0_1 <u 129127208515966861312@128, c1_1 <u 129127208515966861312@128, c2_1 <u 129127208515966861312@128, c3_1 <u 129127208515966861312@128, c4_1 <u 129127208515966861312@128, c5_1 <u 129127208515966861312@128, c6_1 <u 129127208515966861312@128, c7_1 <u 129127208515966861312@128] }
