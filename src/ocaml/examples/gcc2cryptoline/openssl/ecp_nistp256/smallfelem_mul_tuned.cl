proc main(uint64 a0_0, uint64 a1_0, uint64 a2_0, uint64 a3_0, uint64 b0_0, uint64 b1_0, uint64 b2_0, uint64 b3_0) =
{ true && true }
mov small158_0_1 a0_0;
mov small158_8_1 a1_0;
mov small158_16_1 a2_0;
mov small158_24_1 a3_0;
mov small259_0_1 b0_0;
mov small259_8_1 b1_0;
mov small259_16_1 b2_0;
mov small259_24_1 b3_0;
mov v1_1 small158_0_1;
mov v3_1 small259_0_1;
mulj a60_1 v1_1 v3_1;
split v5_1 tmp_to_use_1 a60_1 64;
mov value_lo_1 18446744073709551615@uint64;
mov value_hi_1 0@uint64;
join value_1 value_hi_1 value_lo_1;
and v85_1@uint128 a60_1 value_1;
assume v85_1 = tmp_to_use_1 && true;
mov out61_0_1 v85_1;
mov v6_1 small259_8_1;
mulj a63_1 v1_1 v6_1;
split v8_1 tmp_to_use_2 a63_1 64;
mov value_lo_2 18446744073709551615@uint64;
mov value_hi_2 0@uint64;
join value_2 value_hi_2 value_lo_2;
and v86_1@uint128 a63_1 value_2;
assume v86_1 = tmp_to_use_2 && true;
add v9_1 v5_1 v86_1;
mov v10_1 small158_8_1;
mulj a64_1 v3_1 v10_1;
split v12_1 tmp_to_use_3 a64_1 64;
mov value_lo_3 18446744073709551615@uint64;
mov value_hi_3 0@uint64;
join value_3 value_hi_3 value_lo_3;
and v87_1@uint128 a64_1 value_3;
assume v87_1 = tmp_to_use_3 && true;
add v13_1 v9_1 v87_1;
mov out61_16_1 v13_1;
add v14_1 v8_1 v12_1;
mov v15_1 small259_16_1;
mulj a66_1 v1_1 v15_1;
split v17_1 tmp_to_use_4 a66_1 64;
mov value_lo_4 18446744073709551615@uint64;
mov value_hi_4 0@uint64;
join value_4 value_hi_4 value_lo_4;
and v88_1@uint128 a66_1 value_4;
assume v88_1 = tmp_to_use_4 && true;
add v18_1 v14_1 v88_1;
mulj a67_1 v6_1 v10_1;
split v19_1 tmp_to_use_5 a67_1 64;
mov value_lo_5 18446744073709551615@uint64;
mov value_hi_5 0@uint64;
join value_5 value_hi_5 value_lo_5;
and v89_1@uint128 a67_1 value_5;
assume v89_1 = tmp_to_use_5 && true;
add v20_1 v18_1 v89_1;
add v21_1 v17_1 v19_1;
mov v22_1 small158_16_1;
mulj a68_1 v3_1 v22_1;
split v24_1 tmp_to_use_6 a68_1 64;
mov value_lo_6 18446744073709551615@uint64;
mov value_hi_6 0@uint64;
join value_6 value_hi_6 value_lo_6;
and v90_1@uint128 a68_1 value_6;
assume v90_1 = tmp_to_use_6 && true;
add v25_1 v20_1 v90_1;
mov out61_32_1 v25_1;
add v26_1 v21_1 v24_1;
mov v27_1 small259_24_1;
mulj a70_1 v1_1 v27_1;
split v29_1 tmp_to_use_7 a70_1 64;
mov value_lo_7 18446744073709551615@uint64;
mov value_hi_7 0@uint64;
join value_7 value_hi_7 value_lo_7;
and v91_1@uint128 a70_1 value_7;
assume v91_1 = tmp_to_use_7 && true;
add v30_1 v26_1 v91_1;
mulj a71_1 v10_1 v15_1;
split v31_1 tmp_to_use_8 a71_1 64;
mov value_lo_8 18446744073709551615@uint64;
mov value_hi_8 0@uint64;
join value_8 value_hi_8 value_lo_8;
and v92_1@uint128 a71_1 value_8;
assume v92_1 = tmp_to_use_8 && true;
add v32_1 v30_1 v92_1;
add v33_1 v29_1 v31_1;
mulj a72_1 v6_1 v22_1;
split v34_1 tmp_to_use_9 a72_1 64;
mov value_lo_9 18446744073709551615@uint64;
mov value_hi_9 0@uint64;
join value_9 value_hi_9 value_lo_9;
and v93_1@uint128 a72_1 value_9;
assume v93_1 = tmp_to_use_9 && true;
add v35_1 v32_1 v93_1;
add v36_1 v33_1 v34_1;
mov v37_1 small158_24_1;
mulj a73_1 v3_1 v37_1;
split v39_1 tmp_to_use_10 a73_1 64;
mov value_lo_10 18446744073709551615@uint64;
mov value_hi_10 0@uint64;
join value_10 value_hi_10 value_lo_10;
and v94_1@uint128 a73_1 value_10;
assume v94_1 = tmp_to_use_10 && true;
add v40_1 v35_1 v94_1;
mov out61_48_1 v40_1;
add v41_1 v36_1 v39_1;
mulj a75_1 v10_1 v27_1;
split v42_1 tmp_to_use_11 a75_1 64;
mov value_lo_11 18446744073709551615@uint64;
mov value_hi_11 0@uint64;
join value_11 value_hi_11 value_lo_11;
and v95_1@uint128 a75_1 value_11;
assume v95_1 = tmp_to_use_11 && true;
add v43_1 v41_1 v95_1;
mulj a76_1 v15_1 v22_1;
split v44_1 tmp_to_use_12 a76_1 64;
mov value_lo_12 18446744073709551615@uint64;
mov value_hi_12 0@uint64;
join value_12 value_hi_12 value_lo_12;
and v96_1@uint128 a76_1 value_12;
assume v96_1 = tmp_to_use_12 && true;
add v45_1 v43_1 v96_1;
add v46_1 v42_1 v44_1;
mulj a77_1 v6_1 v37_1;
split v47_1 tmp_to_use_13 a77_1 64;
mov value_lo_13 18446744073709551615@uint64;
mov value_hi_13 0@uint64;
join value_13 value_hi_13 value_lo_13;
and v97_1@uint128 a77_1 value_13;
assume v97_1 = tmp_to_use_13 && true;
add v48_1 v45_1 v97_1;
mov out61_64_1 v48_1;
add v49_1 v46_1 v47_1;
mulj a79_1 v22_1 v27_1;
split v50_1 tmp_to_use_14 a79_1 64;
mov value_lo_14 18446744073709551615@uint64;
mov value_hi_14 0@uint64;
join value_14 value_hi_14 value_lo_14;
and v98_1@uint128 a79_1 value_14;
assume v98_1 = tmp_to_use_14 && true;
add v51_1 v49_1 v98_1;
mulj a80_1 v15_1 v37_1;
split v52_1 tmp_to_use_15 a80_1 64;
mov value_lo_15 18446744073709551615@uint64;
mov value_hi_15 0@uint64;
join value_15 value_hi_15 value_lo_15;
and v99_1@uint128 a80_1 value_15;
assume v99_1 = tmp_to_use_15 && true;
add v53_1 v51_1 v99_1;
mov out61_80_1 v53_1;
add v54_1 v50_1 v52_1;
mulj a82_1 v27_1 v37_1;
split v55_1 tmp_to_use_16 a82_1 64;
mov value_lo_16 18446744073709551615@uint64;
mov value_hi_16 0@uint64;
join value_16 value_hi_16 value_lo_16;
and v100_1@uint128 a82_1 value_16;
assume v100_1 = tmp_to_use_16 && true;
add v56_1 v54_1 v100_1;
mov out61_96_1 v56_1;
mov out61_112_1 v55_1;
mov c0_1 out61_0_1;
mov c1_1 out61_16_1;
mov c2_1 out61_32_1;
mov c3_1 out61_48_1;
mov c4_1 out61_64_1;
mov c5_1 out61_80_1;
mov c6_1 out61_96_1;
mov c7_1 out61_112_1;
{ c0_1 + (c1_1 * 18446744073709551616) + (c2_1 * 340282366920938463463374607431768211456) + (c3_1 * 6277101735386680763835789423207666416102355444464034512896) + (c4_1 * 115792089237316195423570985008687907853269984665640564039457584007913129639936) + (c5_1 * 2135987035920910082395021706169552114602704522356652769947041607822219725780640550022962086936576) + (c6_1 * 39402006196394479212279040100143613805079739270465446667948293404245721771497210611414266254884915640806627990306816) + (c7_1 * 726838724295606890549323807888004534353641360687318060281490199180639288113397923326191050713763565560762521606266177933534601628614656) = (a0_0 + (a1_0 * 18446744073709551616) + (a2_0 * 340282366920938463463374607431768211456) + (a3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (b0_0 + (b1_0 * 18446744073709551616) + (b2_0 * 340282366920938463463374607431768211456) + (b3_0 * 6277101735386680763835789423207666416102355444464034512896)) (mod 18446744073709551615 + (4294967295 * 18446744073709551616) + (0 * 340282366920938463463374607431768211456) + (18446744069414584321 * 6277101735386680763835789423207666416102355444464034512896)) && and [v85_1 = tmp_to_use_1, v86_1 = tmp_to_use_2, v87_1 = tmp_to_use_3, v88_1 = tmp_to_use_4, v89_1 = tmp_to_use_5, v90_1 = tmp_to_use_6, v91_1 = tmp_to_use_7, v92_1 = tmp_to_use_8, v93_1 = tmp_to_use_9, v94_1 = tmp_to_use_10, v95_1 = tmp_to_use_11, v96_1 = tmp_to_use_12, v97_1 = tmp_to_use_13, v98_1 = tmp_to_use_14, v99_1 = tmp_to_use_15, v100_1 = tmp_to_use_16, c0_1 <u 129127208515966861312@128, c1_1 <u 129127208515966861312@128, c2_1 <u 129127208515966861312@128, c3_1 <u 129127208515966861312@128, c4_1 <u 129127208515966861312@128, c5_1 <u 129127208515966861312@128, c6_1 <u 129127208515966861312@128, c7_1 <u 129127208515966861312@128] }
