proc main(uint128 x0_0, uint128 x1_0, uint128 x2_0, uint128 x3_0, uint128 y0_0, uint128 y1_0, uint128 y2_0, uint128 y3_0, uint128 z0_0, uint128 z1_0, uint128 z2_0, uint128 z3_0) =
{ true && and [x0_0 <u 81129638414606681695789005144064@128, x1_0 <u 81129638414606681695789005144064@128, x2_0 <u 81129638414606681695789005144064@128, x3_0 <u 81129638414606681695789005144064@128, y0_0 <u 649037107316853453566312041152512@128, y1_0 <u 649037107316853453566312041152512@128, y2_0 <u 649037107316853453566312041152512@128, y3_0 <u 649037107316853453566312041152512@128, z0_0 <u 649037107316853453566312041152512@128, z1_0 <u 649037107316853453566312041152512@128, z2_0 <u 649037107316853453566312041152512@128, z3_0 <u 649037107316853453566312041152512@128] }
mov x_in2_0_1 x0_0;
mov x_in2_16_1 x1_0;
mov x_in2_32_1 x2_0;
mov x_in2_48_1 x3_0;
mov y_in5_0_1 y0_0;
mov y_in5_16_1 y1_0;
mov y_in5_32_1 y2_0;
mov y_in5_48_1 y3_0;
mov z_in3_0_1 z0_0;
mov z_in3_16_1 z1_0;
mov z_in3_32_1 z2_0;
mov z_in3_48_1 z3_0;
mov v155_1 x_in2_0_1;
mov ftmp_0_1 v155_1;
mov v156_1 x_in2_16_1;
mov ftmp_16_1 v156_1;
mov v157_1 x_in2_32_1;
mov ftmp_32_1 v157_1;
mov v158_1 x_in2_48_1;
mov ftmp_48_1 v158_1;
mov ftmp2_0_1 v155_1;
mov ftmp2_16_1 v156_1;
mov ftmp2_32_1 v157_1;
mov ftmp2_48_1 v158_1;
mov in50_0_1 z_in3_0_1;
mov in50_16_1 z_in3_16_1;
mov in50_32_1 z_in3_32_1;
mov in50_48_1 z_in3_48_1;
mov v2_1 in50_48_1;
mov value_lo_1 18446744069414584320@uint64;
mov value_hi_1 0@uint64;
join value_1 value_hi_1 value_lo_1;
add v3_1 v2_1 value_1;
mov v4_1 in50_32_1;
split v5_1 tmp_to_use_1 v4_1 64;
add v6_1 v3_1 v5_1;
mov value_lo_2 18446744073709551615@uint64;
mov value_hi_2 0@uint64;
join value_2 value_hi_2 value_lo_2;
and v1_1@uint128 v4_1 value_2;
assume v1_1 = tmp_to_use_1 && true;
mov value_lo_3 18446673704965373952@uint64;
mov value_hi_3 0@uint64;
join value_3 value_hi_3 value_lo_3;
add v8_1 v1_1 value_3;
mov v10_1 in50_0_1;
mov value_lo_4 18446744073709551615@uint64;
mov value_hi_4 0@uint64;
join value_4 value_hi_4 value_lo_4;
add v11_1 v10_1 value_4;
mov v12_1 in50_16_1;
mov value_lo_5 4294967295@uint64;
mov value_hi_5 70368744177664@uint64;
join value_5 value_hi_5 value_lo_5;
add v13_1 v12_1 value_5;
split v14_1 tmp_to_use_2 v6_1 64;
vpc a52_1@uint64 v14_1;
mov value_lo_6 18446744073709551615@uint64;
mov value_hi_6 0@uint64;
join value_6 value_hi_6 value_lo_6;
and v7_1@uint128 v6_1 value_6;
assume v7_1 = tmp_to_use_2 && true;
split tmp1_1 tmp2_1 v14_1 96;
shl v16_1 tmp2_1 32;
assume tmp1_1 = 0 && true;
sub v76_1 v16_1 v14_1;
add v17_1 v7_1 v76_1;
split v18_1 tmp_to_use_3 v17_1 64;
vpc a53_1@uint64 v18_1;
add b54_1 a52_1 a53_1;
mov value_lo_7 18446744073709551615@uint64;
mov value_hi_7 0@uint64;
join value_7 value_hi_7 value_lo_7;
and v9_1@uint128 v17_1 value_7;
assume v9_1 = tmp_to_use_3 && true;
split tmp1_2 tmp2_2 v18_1 96;
shl v20_1 tmp2_2 32;
assume tmp1_2 = 0 && true;
sub v75_1 v20_1 v18_1;
add v21_1 v9_1 v75_1;
vpc v22_1@uint128 b54_1;
add v23_1 v11_1 v22_1;
split tmp1_3 tmp2_3 v22_1 96;
shl v24_1 tmp2_3 32;
assume tmp1_3 = 0 && true;
sub v25_1 v13_1 v24_1;
split v26_1 tmp_to_use_4 v21_1 64;
vpc high55_1@uint64 v26_1;
subb high_1 high56_1 0@uint64 high55_1;
cast low57_1@uint64 v21_1;
vpc tmp_to_use_p_1@uint64 tmp_to_use_4;
assume low57_1 = tmp_to_use_4 && true;
cast v27_1@int64 v21_1;
assume v27_1 = low57_1 && true;
split low_h1bit_1 low_l63bit_1 low57_1 63;
vpc mask_1@uint1 low_h1bit_1;
and low59_1@uint64 low57_1 9223372036854775807@uint64;
adds discarded_1 low60_1 low59_1 9223372041149743103@uint64;
not low61_1@uint64 low60_1;
split low_1 discarded_2 low61_1 63;
vpc low_2@uint1 low_1;
cmov v31_1 mask_1 low_2 0@uint1;
cmov mask63_1 v31_1 1@uint1 high_1;
cmov v32_1 mask63_1 18446744073709551615@uint128 0@uint128;
sub v33_1 v23_1 v32_1;
cmov v34_1 mask63_1 4294967295@uint64 0@uint64;
vpc v35_1@uint128 v34_1;
sub v36_1 v25_1 v35_1;
cmov v37_1 mask63_1 18446744069414584321@uint64 0@uint64;
vpc v38_1@uint128 v37_1;
sub v39_1 v21_1 v38_1;
split v40_1 tmp_to_use_5 v33_1 64;
add v41_1 v36_1 v40_1;
cast v42_1@uint64 v33_1;
vpc tmp_to_use_p_2@uint64 tmp_to_use_5;
assume v42_1 = tmp_to_use_p_2 && true;
split v43_1 tmp_to_use_6 v41_1 64;
add v44_1 v8_1 v43_1;
cast v45_1@uint64 v41_1;
vpc tmp_to_use_p_3@uint64 tmp_to_use_6;
assume v45_1 = tmp_to_use_6 && true;
split v46_1 tmp_to_use_7 v44_1 64;
add v47_1 v39_1 v46_1;
cast v48_1@uint64 v44_1;
vpc tmp_to_use_p_4@uint64 tmp_to_use_7;
assume v48_1 = tmp_to_use_7 && true;
mov out64_0_1 v42_1;
mov out64_8_1 v45_1;
mov out64_16_1 v48_1;
vpc v49_1@uint64 v47_1;
mov out64_24_1 v49_1;
mov small_0_1 out64_0_1;
mov small_8_1 out64_8_1;
mov small_16_1 out64_16_1;
mov small_24_1 out64_24_1;
mov small38_0_1 small_0_1;
mov small38_8_1 small_8_1;
mov small38_16_1 small_16_1;
mov small38_24_1 small_24_1;
mov v1_2 small38_0_1;
mulj a39_1 v1_2 v1_2;
split v3_2 tmp_to_use_8 a39_1 64;
mov value_lo_8 18446744073709551615@uint64;
mov value_hi_8 0@uint64;
join value_8 value_hi_8 value_lo_8;
and v58_1@uint128 a39_1 value_8;
assume v58_1 = tmp_to_use_8 && true;
mov out40_0_1 v58_1;
mov v4_2 small38_8_1;
mulj a42_1 v1_2 v4_2;
split v6_2 tmp_to_use_9 a42_1 64;
mov value_lo_9 18446744073709551615@uint64;
mov value_hi_9 0@uint64;
join value_9 value_hi_9 value_lo_9;
and v59_1@uint128 a42_1 value_9;
assume v59_1 = tmp_to_use_9 && true;
mov value_lo_10 2@uint64;
mov value_hi_10 0@uint64;
join value_10 value_hi_10 value_lo_10;
mul v69_1 v59_1 value_10;
add v8_2 v3_2 v69_1;
mov out40_16_1 v8_2;
mov v9_2 small38_16_1;
mulj a44_1 v1_2 v9_2;
split v11_2 tmp_to_use_10 a44_1 64;
mov value_lo_11 18446744073709551615@uint64;
mov value_hi_11 0@uint64;
join value_11 value_hi_11 value_lo_11;
and v60_1@uint128 a44_1 value_11;
assume v60_1 = tmp_to_use_10 && true;
add v12_2 v6_2 v60_1;
mov value_lo_12 2@uint64;
mov value_hi_12 0@uint64;
join value_12 value_hi_12 value_lo_12;
mul v13_2 v12_2 value_12;
mov v14_2 small38_24_1;
mulj a45_1 v1_2 v14_2;
split v16_2 tmp_to_use_11 a45_1 64;
mov value_lo_13 18446744073709551615@uint64;
mov value_hi_13 0@uint64;
join value_13 value_hi_13 value_lo_13;
and v61_1@uint128 a45_1 value_13;
assume v61_1 = tmp_to_use_11 && true;
add v17_2 v11_2 v61_1;
mulj a46_1 v4_2 v9_2;
split v18_2 tmp_to_use_12 a46_1 64;
mov value_lo_14 18446744073709551615@uint64;
mov value_hi_14 0@uint64;
join value_14 value_hi_14 value_lo_14;
and v62_1@uint128 a46_1 value_14;
assume v62_1 = tmp_to_use_12 && true;
add v19_1 v17_2 v62_1;
mov value_lo_15 2@uint64;
mov value_hi_15 0@uint64;
join value_15 value_hi_15 value_lo_15;
mul v20_2 v19_1 value_15;
add v21_2 v16_2 v18_2;
mulj a47_1 v4_2 v4_2;
split v22_2 tmp_to_use_13 a47_1 64;
mov value_lo_16 18446744073709551615@uint64;
mov value_hi_16 0@uint64;
join value_16 value_hi_16 value_lo_16;
and v63_1@uint128 a47_1 value_16;
assume v63_1 = tmp_to_use_13 && true;
add v23_2 v13_2 v63_1;
mov out40_32_1 v23_2;
add v24_2 v20_2 v22_2;
mov out40_48_1 v24_2;
mulj a50_1 v4_2 v14_2;
split v25_2 tmp_to_use_14 a50_1 64;
mov value_lo_17 18446744073709551615@uint64;
mov value_hi_17 0@uint64;
join value_17 value_hi_17 value_lo_17;
and v64_1@uint128 a50_1 value_17;
assume v64_1 = tmp_to_use_14 && true;
add v26_2 v21_2 v64_1;
mov value_lo_18 2@uint64;
mov value_hi_18 0@uint64;
join value_18 value_hi_18 value_lo_18;
mul v27_2 v26_2 value_18;
mulj a51_1 v9_2 v14_2;
split v28_1 tmp_to_use_15 a51_1 64;
mov value_lo_19 18446744073709551615@uint64;
mov value_hi_19 0@uint64;
join value_19 value_hi_19 value_lo_19;
and v65_1@uint128 a51_1 value_19;
assume v65_1 = tmp_to_use_15 && true;
add v29_1 v25_2 v65_1;
mov value_lo_20 2@uint64;
mov value_hi_20 0@uint64;
join value_20 value_hi_20 value_lo_20;
mul v30_1 v29_1 value_20;
mov value_lo_21 2@uint64;
mov value_hi_21 0@uint64;
join value_21 value_hi_21 value_lo_21;
mul v31_2 v28_1 value_21;
mulj a52_2 v9_2 v9_2;
split v32_2 tmp_to_use_16 a52_2 64;
mov value_lo_22 18446744073709551615@uint64;
mov value_hi_22 0@uint64;
join value_22 value_hi_22 value_lo_22;
and v66_1@uint128 a52_2 value_22;
assume v66_1 = tmp_to_use_16 && true;
add v33_2 v27_2 v66_1;
mov out40_64_1 v33_2;
add v34_2 v30_1 v32_2;
mov out40_80_1 v34_2;
mulj a55_1 v14_2 v14_2;
split v35_2 tmp_to_use_17 a55_1 64;
mov value_lo_23 18446744073709551615@uint64;
mov value_hi_23 0@uint64;
join value_23 value_hi_23 value_lo_23;
and v67_1@uint128 a55_1 value_23;
assume v67_1 = tmp_to_use_17 && true;
add v36_2 v31_2 v67_1;
mov out40_96_1 v36_2;
mov out40_112_1 v35_2;
mov tmp_0_1 out40_0_1;
mov tmp_16_1 out40_16_1;
mov tmp_32_1 out40_32_1;
mov tmp_48_1 out40_48_1;
mov tmp_64_1 out40_64_1;
mov tmp_80_1 out40_80_1;
mov tmp_96_1 out40_96_1;
mov tmp_112_1 out40_112_1;
mov in10_0_1 tmp_0_1;
mov in10_16_1 tmp_16_1;
mov in10_32_1 tmp_32_1;
mov in10_48_1 tmp_48_1;
mov in10_64_1 tmp_64_1;
mov in10_80_1 tmp_80_1;
mov in10_96_1 tmp_96_1;
mov in10_112_1 tmp_112_1;
mov v1_3 in10_0_1;
add v2_2 v1_3 1267650600228229401427983728624@uint128;
mov out11_0_1 v2_2;
mov v3_3 in10_16_1;
add v4_3 v3_3 1267650600228229401496703205376@uint128;
mov out11_16_1 v4_3;
mov v5_2 in10_32_1;
add v6_3 v5_2 1267650600228229401427983728656@uint128;
mov out11_32_1 v6_3;
mov v7_2 in10_48_1;
add v8_3 v7_2 1267650600228229401427983728656@uint128;
mov out11_48_1 v8_3;
mov v17_3 in10_64_1;
mov v18_3 in10_80_1;
split tmp1_4 tmp2_4 v18_3 96;
shl v19_2 tmp2_4 32;
assume tmp1_4 = 0 && true;
add v20_3 v17_3 v19_2;
add v22_3 v2_2 v20_3;
mov out11_0_2 v22_3;
sub v24_3 v8_3 v20_3;
mov out11_48_2 v24_3;
mov v25_3 in10_80_1;
mov v26_3 in10_112_1;
sub v30_2 v4_3 v26_3;
add v29_2 v25_3 v30_2;
mov out11_16_2 v29_2;
sub v28_2 v6_3 v25_3;
add v32_3 v26_3 v28_2;
mov out11_32_2 v32_3;
mov v33_3 in10_64_1;
split tmp1_5 tmp2_5 v33_3 96;
shl v34_3 tmp2_5 32;
assume tmp1_5 = 0 && true;
sub v35_3 v29_2 v34_3;
mov out11_16_3 v35_3;
mov v36_3 in10_64_1;
split tmp1_6 tmp2_6 v36_3 96;
shl v37_2 tmp2_6 32;
assume tmp1_6 = 0 && true;
add v38_2 v24_3 v37_2;
mov out11_48_3 v38_2;
mov v39_2 in10_80_1;
split tmp1_7 tmp2_7 v39_2 96;
shl v40_2 tmp2_7 32;
assume tmp1_7 = 0 && true;
sub v41_2 v32_3 v40_2;
mov out11_32_3 v41_2;
mov v42_2 in10_96_1;
sub v43_2 v22_3 v42_2;
mov out11_0_3 v43_2;
mov v44_2 in10_96_1;
split tmp1_8 tmp2_8 v44_2 96;
shl v45_2 tmp2_8 32;
assume tmp1_8 = 0 && true;
sub v46_2 v43_2 v45_2;
mov out11_0_4 v46_2;
mov v47_2 in10_96_1;
split tmp1_9 tmp2_9 v47_2 95;
shl v48_2 tmp2_9 33;
assume tmp1_9 = 0 && true;
add v49_2 v35_3 v48_2;
mov out11_16_4 v49_2;
mov v50_1 in10_96_1;
mul v51_1 v50_1 2@uint128;
add v52_1 v41_2 v51_1;
mov out11_32_4 v52_1;
mov v53_1 in10_96_1;
split tmp1_10 tmp2_10 v53_1 96;
shl v54_1 tmp2_10 32;
assume tmp1_10 = 0 && true;
sub v55_1 v38_2 v54_1;
mov out11_48_4 v55_1;
mov v56_1 in10_112_1;
sub v57_1 v46_2 v56_1;
mov out11_0_5 v57_1;
mov v58_2 in10_112_1;
split tmp1_11 tmp2_11 v58_2 96;
shl v59_2 tmp2_11 32;
assume tmp1_11 = 0 && true;
sub v60_2 v57_1 v59_2;
mov out11_0_6 v60_2;
mov v61_2 in10_112_1;
split tmp1_12 tmp2_12 v61_2 95;
shl v62_2 tmp2_12 33;
assume tmp1_12 = 0 && true;
add v63_2 v52_1 v62_2;
mov out11_32_5 v63_2;
mov v64_2 in10_112_1;
mul v65_2 v64_2 3@uint128;
add v66_2 v55_1 v65_2;
mov out11_48_5 v66_2;
mov delta_0_1 out11_0_6;
mov delta_16_1 out11_16_4;
mov delta_32_1 out11_32_5;
mov delta_48_1 out11_48_5;
mov in50_0_2 y_in5_0_1;
mov in50_16_2 y_in5_16_1;
mov in50_32_2 y_in5_32_1;
mov in50_48_2 y_in5_48_1;
mov v2_3 in50_48_2;
mov value_lo_24 18446744069414584320@uint64;
mov value_hi_24 0@uint64;
join value_24 value_hi_24 value_lo_24;
add v3_4 v2_3 value_24;
mov v4_4 in50_32_2;
split v5_3 tmp_to_use_18 v4_4 64;
add v6_4 v3_4 v5_3;
mov value_lo_25 18446744073709551615@uint64;
mov value_hi_25 0@uint64;
join value_25 value_hi_25 value_lo_25;
and v1_4@uint128 v4_4 value_25;
assume v1_4 = tmp_to_use_18 && true;
mov value_lo_26 18446673704965373952@uint64;
mov value_hi_26 0@uint64;
join value_26 value_hi_26 value_lo_26;
add v8_4 v1_4 value_26;
mov v10_2 in50_0_2;
mov value_lo_27 18446744073709551615@uint64;
mov value_hi_27 0@uint64;
join value_27 value_hi_27 value_lo_27;
add v11_3 v10_2 value_27;
mov v12_3 in50_16_2;
mov value_lo_28 4294967295@uint64;
mov value_hi_28 70368744177664@uint64;
join value_28 value_hi_28 value_lo_28;
add v13_3 v12_3 value_28;
split v14_3 tmp_to_use_19 v6_4 64;
vpc a52_3@uint64 v14_3;
mov value_lo_29 18446744073709551615@uint64;
mov value_hi_29 0@uint64;
join value_29 value_hi_29 value_lo_29;
and v7_3@uint128 v6_4 value_29;
assume v7_3 = tmp_to_use_19 && true;
split tmp1_13 tmp2_13 v14_3 96;
shl v16_3 tmp2_13 32;
assume tmp1_13 = 0 && true;
sub v76_2 v16_3 v14_3;
add v17_4 v7_3 v76_2;
split v18_4 tmp_to_use_20 v17_4 64;
vpc a53_2@uint64 v18_4;
add b54_2 a52_3 a53_2;
mov value_lo_30 18446744073709551615@uint64;
mov value_hi_30 0@uint64;
join value_30 value_hi_30 value_lo_30;
and v9_3@uint128 v17_4 value_30;
assume v9_3 = tmp_to_use_20 && true;
split tmp1_14 tmp2_14 v18_4 96;
shl v20_4 tmp2_14 32;
assume tmp1_14 = 0 && true;
sub v75_2 v20_4 v18_4;
add v21_3 v9_3 v75_2;
vpc v22_4@uint128 b54_2;
add v23_3 v11_3 v22_4;
split tmp1_15 tmp2_15 v22_4 96;
shl v24_4 tmp2_15 32;
assume tmp1_15 = 0 && true;
sub v25_4 v13_3 v24_4;
split v26_4 tmp_to_use_21 v21_3 64;
vpc high55_2@uint64 v26_4;
subb high_2 high56_2 0@uint64 high55_2;
cast low57_2@uint64 v21_3;
vpc tmp_to_use_p_5@uint64 tmp_to_use_21;
assume low57_2 = tmp_to_use_21 && true;
cast v27_3@int64 v21_3;
assume v27_3 = low57_2 && true;
split low_h1bit_2 low_l63bit_2 low57_2 63;
vpc mask_2@uint1 low_h1bit_2;
and low59_2@uint64 low57_2 9223372036854775807@uint64;
adds discarded_3 low60_2 low59_2 9223372041149743103@uint64;
not low61_2@uint64 low60_2;
split low_3 discarded_4 low61_2 63;
vpc low_4@uint1 low_3;
cmov v31_3 mask_2 low_4 0@uint1;
cmov mask63_2 v31_3 1@uint1 high_2;
cmov v32_4 mask63_2 18446744073709551615@uint128 0@uint128;
sub v33_4 v23_3 v32_4;
cmov v34_4 mask63_2 4294967295@uint64 0@uint64;
vpc v35_4@uint128 v34_4;
sub v36_4 v25_4 v35_4;
cmov v37_3 mask63_2 18446744069414584321@uint64 0@uint64;
vpc v38_3@uint128 v37_3;
sub v39_3 v21_3 v38_3;
split v40_3 tmp_to_use_22 v33_4 64;
add v41_3 v36_4 v40_3;
cast v42_3@uint64 v33_4;
vpc tmp_to_use_p_6@uint64 tmp_to_use_22;
assume v42_3 = tmp_to_use_p_6 && true;
split v43_3 tmp_to_use_23 v41_3 64;
add v44_3 v8_4 v43_3;
cast v45_3@uint64 v41_3;
vpc tmp_to_use_p_7@uint64 tmp_to_use_23;
assume v45_3 = tmp_to_use_23 && true;
split v46_3 tmp_to_use_24 v44_3 64;
add v47_3 v39_3 v46_3;
cast v48_3@uint64 v44_3;
vpc tmp_to_use_p_8@uint64 tmp_to_use_24;
assume v48_3 = tmp_to_use_24 && true;
mov out64_0_2 v42_3;
mov out64_8_2 v45_3;
mov out64_16_2 v48_3;
vpc v49_3@uint64 v47_3;
mov out64_24_2 v49_3;
mov small_0_2 out64_0_2;
mov small_8_2 out64_8_2;
mov small_16_2 out64_16_2;
mov small_24_2 out64_24_2;
mov small38_0_2 small_0_2;
mov small38_8_2 small_8_2;
mov small38_16_2 small_16_2;
mov small38_24_2 small_24_2;
mov v1_5 small38_0_2;
mulj a39_2 v1_5 v1_5;
split v3_5 tmp_to_use_25 a39_2 64;
mov value_lo_31 18446744073709551615@uint64;
mov value_hi_31 0@uint64;
join value_31 value_hi_31 value_lo_31;
and v58_3@uint128 a39_2 value_31;
assume v58_3 = tmp_to_use_25 && true;
mov out40_0_2 v58_3;
mov v4_5 small38_8_2;
mulj a42_2 v1_5 v4_5;
split v6_5 tmp_to_use_26 a42_2 64;
mov value_lo_32 18446744073709551615@uint64;
mov value_hi_32 0@uint64;
join value_32 value_hi_32 value_lo_32;
and v59_3@uint128 a42_2 value_32;
assume v59_3 = tmp_to_use_26 && true;
mov value_lo_33 2@uint64;
mov value_hi_33 0@uint64;
join value_33 value_hi_33 value_lo_33;
mul v69_2 v59_3 value_33;
add v8_5 v3_5 v69_2;
mov out40_16_2 v8_5;
mov v9_4 small38_16_2;
mulj a44_2 v1_5 v9_4;
split v11_4 tmp_to_use_27 a44_2 64;
mov value_lo_34 18446744073709551615@uint64;
mov value_hi_34 0@uint64;
join value_34 value_hi_34 value_lo_34;
and v60_3@uint128 a44_2 value_34;
assume v60_3 = tmp_to_use_27 && true;
add v12_4 v6_5 v60_3;
mov value_lo_35 2@uint64;
mov value_hi_35 0@uint64;
join value_35 value_hi_35 value_lo_35;
mul v13_4 v12_4 value_35;
mov v14_4 small38_24_2;
mulj a45_2 v1_5 v14_4;
split v16_4 tmp_to_use_28 a45_2 64;
mov value_lo_36 18446744073709551615@uint64;
mov value_hi_36 0@uint64;
join value_36 value_hi_36 value_lo_36;
and v61_3@uint128 a45_2 value_36;
assume v61_3 = tmp_to_use_28 && true;
add v17_5 v11_4 v61_3;
mulj a46_2 v4_5 v9_4;
split v18_5 tmp_to_use_29 a46_2 64;
mov value_lo_37 18446744073709551615@uint64;
mov value_hi_37 0@uint64;
join value_37 value_hi_37 value_lo_37;
and v62_3@uint128 a46_2 value_37;
assume v62_3 = tmp_to_use_29 && true;
add v19_3 v17_5 v62_3;
mov value_lo_38 2@uint64;
mov value_hi_38 0@uint64;
join value_38 value_hi_38 value_lo_38;
mul v20_5 v19_3 value_38;
add v21_4 v16_4 v18_5;
mulj a47_2 v4_5 v4_5;
split v22_5 tmp_to_use_30 a47_2 64;
mov value_lo_39 18446744073709551615@uint64;
mov value_hi_39 0@uint64;
join value_39 value_hi_39 value_lo_39;
and v63_3@uint128 a47_2 value_39;
assume v63_3 = tmp_to_use_30 && true;
add v23_4 v13_4 v63_3;
mov out40_32_2 v23_4;
add v24_5 v20_5 v22_5;
mov out40_48_2 v24_5;
mulj a50_2 v4_5 v14_4;
split v25_5 tmp_to_use_31 a50_2 64;
mov value_lo_40 18446744073709551615@uint64;
mov value_hi_40 0@uint64;
join value_40 value_hi_40 value_lo_40;
and v64_3@uint128 a50_2 value_40;
assume v64_3 = tmp_to_use_31 && true;
add v26_5 v21_4 v64_3;
mov value_lo_41 2@uint64;
mov value_hi_41 0@uint64;
join value_41 value_hi_41 value_lo_41;
mul v27_4 v26_5 value_41;
mulj a51_2 v9_4 v14_4;
split v28_3 tmp_to_use_32 a51_2 64;
mov value_lo_42 18446744073709551615@uint64;
mov value_hi_42 0@uint64;
join value_42 value_hi_42 value_lo_42;
and v65_3@uint128 a51_2 value_42;
assume v65_3 = tmp_to_use_32 && true;
add v29_3 v25_5 v65_3;
mov value_lo_43 2@uint64;
mov value_hi_43 0@uint64;
join value_43 value_hi_43 value_lo_43;
mul v30_3 v29_3 value_43;
mov value_lo_44 2@uint64;
mov value_hi_44 0@uint64;
join value_44 value_hi_44 value_lo_44;
mul v31_4 v28_3 value_44;
mulj a52_4 v9_4 v9_4;
split v32_5 tmp_to_use_33 a52_4 64;
mov value_lo_45 18446744073709551615@uint64;
mov value_hi_45 0@uint64;
join value_45 value_hi_45 value_lo_45;
and v66_3@uint128 a52_4 value_45;
assume v66_3 = tmp_to_use_33 && true;
add v33_5 v27_4 v66_3;
mov out40_64_2 v33_5;
add v34_5 v30_3 v32_5;
mov out40_80_2 v34_5;
mulj a55_2 v14_4 v14_4;
split v35_5 tmp_to_use_34 a55_2 64;
mov value_lo_46 18446744073709551615@uint64;
mov value_hi_46 0@uint64;
join value_46 value_hi_46 value_lo_46;
and v67_2@uint128 a55_2 value_46;
assume v67_2 = tmp_to_use_34 && true;
add v36_5 v31_4 v67_2;
mov out40_96_2 v36_5;
mov out40_112_2 v35_5;
mov tmp_0_2 out40_0_2;
mov tmp_16_2 out40_16_2;
mov tmp_32_2 out40_32_2;
mov tmp_48_2 out40_48_2;
mov tmp_64_2 out40_64_2;
mov tmp_80_2 out40_80_2;
mov tmp_96_2 out40_96_2;
mov tmp_112_2 out40_112_2;
mov in10_0_2 tmp_0_2;
mov in10_16_2 tmp_16_2;
mov in10_32_2 tmp_32_2;
mov in10_48_2 tmp_48_2;
mov in10_64_2 tmp_64_2;
mov in10_80_2 tmp_80_2;
mov in10_96_2 tmp_96_2;
mov in10_112_2 tmp_112_2;
mov v1_6 in10_0_2;
add v2_4 v1_6 1267650600228229401427983728624@uint128;
mov out11_0_7 v2_4;
mov v3_6 in10_16_2;
add v4_6 v3_6 1267650600228229401496703205376@uint128;
mov out11_16_5 v4_6;
mov v5_4 in10_32_2;
add v6_6 v5_4 1267650600228229401427983728656@uint128;
mov out11_32_6 v6_6;
mov v7_4 in10_48_2;
add v8_6 v7_4 1267650600228229401427983728656@uint128;
mov out11_48_6 v8_6;
mov v17_6 in10_64_2;
mov v18_6 in10_80_2;
split tmp1_16 tmp2_16 v18_6 96;
shl v19_4 tmp2_16 32;
assume tmp1_16 = 0 && true;
add v20_6 v17_6 v19_4;
add v22_6 v2_4 v20_6;
mov out11_0_8 v22_6;
sub v24_6 v8_6 v20_6;
mov out11_48_7 v24_6;
mov v25_6 in10_80_2;
mov v26_6 in10_112_2;
sub v30_4 v4_6 v26_6;
add v29_4 v25_6 v30_4;
mov out11_16_6 v29_4;
sub v28_4 v6_6 v25_6;
add v32_6 v26_6 v28_4;
mov out11_32_7 v32_6;
mov v33_6 in10_64_2;
split tmp1_17 tmp2_17 v33_6 96;
shl v34_6 tmp2_17 32;
assume tmp1_17 = 0 && true;
sub v35_6 v29_4 v34_6;
mov out11_16_7 v35_6;
mov v36_6 in10_64_2;
split tmp1_18 tmp2_18 v36_6 96;
shl v37_4 tmp2_18 32;
assume tmp1_18 = 0 && true;
add v38_4 v24_6 v37_4;
mov out11_48_8 v38_4;
mov v39_4 in10_80_2;
split tmp1_19 tmp2_19 v39_4 96;
shl v40_4 tmp2_19 32;
assume tmp1_19 = 0 && true;
sub v41_4 v32_6 v40_4;
mov out11_32_8 v41_4;
mov v42_4 in10_96_2;
sub v43_4 v22_6 v42_4;
mov out11_0_9 v43_4;
mov v44_4 in10_96_2;
split tmp1_20 tmp2_20 v44_4 96;
shl v45_4 tmp2_20 32;
assume tmp1_20 = 0 && true;
sub v46_4 v43_4 v45_4;
mov out11_0_10 v46_4;
mov v47_4 in10_96_2;
split tmp1_21 tmp2_21 v47_4 95;
shl v48_4 tmp2_21 33;
assume tmp1_21 = 0 && true;
add v49_4 v35_6 v48_4;
mov out11_16_8 v49_4;
mov v50_2 in10_96_2;
mul v51_2 v50_2 2@uint128;
add v52_2 v41_4 v51_2;
mov out11_32_9 v52_2;
mov v53_2 in10_96_2;
split tmp1_22 tmp2_22 v53_2 96;
shl v54_2 tmp2_22 32;
assume tmp1_22 = 0 && true;
sub v55_2 v38_4 v54_2;
mov out11_48_9 v55_2;
mov v56_2 in10_112_2;
sub v57_2 v46_4 v56_2;
mov out11_0_11 v57_2;
mov v58_4 in10_112_2;
split tmp1_23 tmp2_23 v58_4 96;
shl v59_4 tmp2_23 32;
assume tmp1_23 = 0 && true;
sub v60_4 v57_2 v59_4;
mov out11_0_12 v60_4;
mov v61_4 in10_112_2;
split tmp1_24 tmp2_24 v61_4 95;
shl v62_4 tmp2_24 33;
assume tmp1_24 = 0 && true;
add v63_4 v52_2 v62_4;
mov out11_32_10 v63_4;
mov v64_4 in10_112_2;
mul v65_4 v64_4 3@uint128;
add v66_4 v55_2 v65_4;
mov out11_48_10 v66_4;
mov gamma_0_1 out11_0_12;
mov gamma_16_1 out11_16_8;
mov gamma_32_1 out11_32_10;
mov gamma_48_1 out11_48_10;
mov in50_0_3 gamma_0_1;
mov in50_16_3 gamma_16_1;
mov in50_32_3 gamma_32_1;
mov in50_48_3 gamma_48_1;
mov v2_5 in50_48_3;
mov value_lo_47 18446744069414584320@uint64;
mov value_hi_47 0@uint64;
join value_47 value_hi_47 value_lo_47;
add v3_7 v2_5 value_47;
mov v4_7 in50_32_3;
split v5_5 tmp_to_use_35 v4_7 64;
add v6_7 v3_7 v5_5;
mov value_lo_48 18446744073709551615@uint64;
mov value_hi_48 0@uint64;
join value_48 value_hi_48 value_lo_48;
and v1_7@uint128 v4_7 value_48;
assume v1_7 = tmp_to_use_35 && true;
mov value_lo_49 18446673704965373952@uint64;
mov value_hi_49 0@uint64;
join value_49 value_hi_49 value_lo_49;
add v8_7 v1_7 value_49;
mov v10_3 in50_0_3;
mov value_lo_50 18446744073709551615@uint64;
mov value_hi_50 0@uint64;
join value_50 value_hi_50 value_lo_50;
add v11_5 v10_3 value_50;
mov v12_5 in50_16_3;
mov value_lo_51 4294967295@uint64;
mov value_hi_51 70368744177664@uint64;
join value_51 value_hi_51 value_lo_51;
add v13_5 v12_5 value_51;
split v14_5 tmp_to_use_36 v6_7 64;
vpc a52_5@uint64 v14_5;
mov value_lo_52 18446744073709551615@uint64;
mov value_hi_52 0@uint64;
join value_52 value_hi_52 value_lo_52;
and v7_5@uint128 v6_7 value_52;
assume v7_5 = tmp_to_use_36 && true;
split tmp1_25 tmp2_25 v14_5 96;
shl v16_5 tmp2_25 32;
assume tmp1_25 = 0 && true;
sub v76_3 v16_5 v14_5;
add v17_7 v7_5 v76_3;
split v18_7 tmp_to_use_37 v17_7 64;
vpc a53_3@uint64 v18_7;
add b54_3 a52_5 a53_3;
mov value_lo_53 18446744073709551615@uint64;
mov value_hi_53 0@uint64;
join value_53 value_hi_53 value_lo_53;
and v9_5@uint128 v17_7 value_53;
assume v9_5 = tmp_to_use_37 && true;
split tmp1_26 tmp2_26 v18_7 96;
shl v20_7 tmp2_26 32;
assume tmp1_26 = 0 && true;
sub v75_3 v20_7 v18_7;
add v21_5 v9_5 v75_3;
vpc v22_7@uint128 b54_3;
add v23_5 v11_5 v22_7;
split tmp1_27 tmp2_27 v22_7 96;
shl v24_7 tmp2_27 32;
assume tmp1_27 = 0 && true;
sub v25_7 v13_5 v24_7;
split v26_7 tmp_to_use_38 v21_5 64;
vpc high55_3@uint64 v26_7;
subb high_3 high56_3 0@uint64 high55_3;
cast low57_3@uint64 v21_5;
vpc tmp_to_use_p_9@uint64 tmp_to_use_38;
assume low57_3 = tmp_to_use_38 && true;
cast v27_5@int64 v21_5;
assume v27_5 = low57_3 && true;
split low_h1bit_3 low_l63bit_3 low57_3 63;
vpc mask_3@uint1 low_h1bit_3;
and low59_3@uint64 low57_3 9223372036854775807@uint64;
adds discarded_5 low60_3 low59_3 9223372041149743103@uint64;
not low61_3@uint64 low60_3;
split low_5 discarded_6 low61_3 63;
vpc low_6@uint1 low_5;
cmov v31_5 mask_3 low_6 0@uint1;
cmov mask63_3 v31_5 1@uint1 high_3;
cmov v32_7 mask63_3 18446744073709551615@uint128 0@uint128;
sub v33_7 v23_5 v32_7;
cmov v34_7 mask63_3 4294967295@uint64 0@uint64;
vpc v35_7@uint128 v34_7;
sub v36_7 v25_7 v35_7;
cmov v37_5 mask63_3 18446744069414584321@uint64 0@uint64;
vpc v38_5@uint128 v37_5;
sub v39_5 v21_5 v38_5;
split v40_5 tmp_to_use_39 v33_7 64;
add v41_5 v36_7 v40_5;
cast v42_5@uint64 v33_7;
vpc tmp_to_use_p_10@uint64 tmp_to_use_39;
assume v42_5 = tmp_to_use_p_10 && true;
split v43_5 tmp_to_use_40 v41_5 64;
add v44_5 v8_7 v43_5;
cast v45_5@uint64 v41_5;
vpc tmp_to_use_p_11@uint64 tmp_to_use_40;
assume v45_5 = tmp_to_use_40 && true;
split v46_5 tmp_to_use_41 v44_5 64;
add v47_5 v39_5 v46_5;
cast v48_5@uint64 v44_5;
vpc tmp_to_use_p_12@uint64 tmp_to_use_41;
assume v48_5 = tmp_to_use_41 && true;
mov out64_0_3 v42_5;
mov out64_8_3 v45_5;
mov out64_16_3 v48_5;
vpc v49_5@uint64 v47_5;
mov out64_24_3 v49_5;
mov small1_0_1 out64_0_3;
mov small1_8_1 out64_8_3;
mov small1_16_1 out64_16_3;
mov small1_24_1 out64_24_3;
mov in50_0_4 x_in2_0_1;
mov in50_16_4 x_in2_16_1;
mov in50_32_4 x_in2_32_1;
mov in50_48_4 x_in2_48_1;
mov v2_6 in50_48_4;
mov value_lo_54 18446744069414584320@uint64;
mov value_hi_54 0@uint64;
join value_54 value_hi_54 value_lo_54;
add v3_8 v2_6 value_54;
mov v4_8 in50_32_4;
split v5_6 tmp_to_use_42 v4_8 64;
add v6_8 v3_8 v5_6;
mov value_lo_55 18446744073709551615@uint64;
mov value_hi_55 0@uint64;
join value_55 value_hi_55 value_lo_55;
and v1_8@uint128 v4_8 value_55;
assume v1_8 = tmp_to_use_42 && true;
mov value_lo_56 18446673704965373952@uint64;
mov value_hi_56 0@uint64;
join value_56 value_hi_56 value_lo_56;
add v8_8 v1_8 value_56;
mov v10_4 in50_0_4;
mov value_lo_57 18446744073709551615@uint64;
mov value_hi_57 0@uint64;
join value_57 value_hi_57 value_lo_57;
add v11_6 v10_4 value_57;
mov v12_6 in50_16_4;
mov value_lo_58 4294967295@uint64;
mov value_hi_58 70368744177664@uint64;
join value_58 value_hi_58 value_lo_58;
add v13_6 v12_6 value_58;
split v14_6 tmp_to_use_43 v6_8 64;
vpc a52_6@uint64 v14_6;
mov value_lo_59 18446744073709551615@uint64;
mov value_hi_59 0@uint64;
join value_59 value_hi_59 value_lo_59;
and v7_6@uint128 v6_8 value_59;
assume v7_6 = tmp_to_use_43 && true;
split tmp1_28 tmp2_28 v14_6 96;
shl v16_6 tmp2_28 32;
assume tmp1_28 = 0 && true;
sub v76_4 v16_6 v14_6;
add v17_8 v7_6 v76_4;
split v18_8 tmp_to_use_44 v17_8 64;
vpc a53_4@uint64 v18_8;
add b54_4 a52_6 a53_4;
mov value_lo_60 18446744073709551615@uint64;
mov value_hi_60 0@uint64;
join value_60 value_hi_60 value_lo_60;
and v9_6@uint128 v17_8 value_60;
assume v9_6 = tmp_to_use_44 && true;
split tmp1_29 tmp2_29 v18_8 96;
shl v20_8 tmp2_29 32;
assume tmp1_29 = 0 && true;
sub v75_4 v20_8 v18_8;
add v21_6 v9_6 v75_4;
vpc v22_8@uint128 b54_4;
add v23_6 v11_6 v22_8;
split tmp1_30 tmp2_30 v22_8 96;
shl v24_8 tmp2_30 32;
assume tmp1_30 = 0 && true;
sub v25_8 v13_6 v24_8;
split v26_8 tmp_to_use_45 v21_6 64;
vpc high55_4@uint64 v26_8;
subb high_4 high56_4 0@uint64 high55_4;
cast low57_4@uint64 v21_6;
vpc tmp_to_use_p_13@uint64 tmp_to_use_45;
assume low57_4 = tmp_to_use_45 && true;
cast v27_6@int64 v21_6;
assume v27_6 = low57_4 && true;
split low_h1bit_4 low_l63bit_4 low57_4 63;
vpc mask_4@uint1 low_h1bit_4;
and low59_4@uint64 low57_4 9223372036854775807@uint64;
adds discarded_7 low60_4 low59_4 9223372041149743103@uint64;
not low61_4@uint64 low60_4;
split low_7 discarded_8 low61_4 63;
vpc low_8@uint1 low_7;
cmov v31_6 mask_4 low_8 0@uint1;
cmov mask63_4 v31_6 1@uint1 high_4;
cmov v32_8 mask63_4 18446744073709551615@uint128 0@uint128;
sub v33_8 v23_6 v32_8;
cmov v34_8 mask63_4 4294967295@uint64 0@uint64;
vpc v35_8@uint128 v34_8;
sub v36_8 v25_8 v35_8;
cmov v37_6 mask63_4 18446744069414584321@uint64 0@uint64;
vpc v38_6@uint128 v37_6;
sub v39_6 v21_6 v38_6;
split v40_6 tmp_to_use_46 v33_8 64;
add v41_6 v36_8 v40_6;
cast v42_6@uint64 v33_8;
vpc tmp_to_use_p_14@uint64 tmp_to_use_46;
assume v42_6 = tmp_to_use_p_14 && true;
split v43_6 tmp_to_use_47 v41_6 64;
add v44_6 v8_8 v43_6;
cast v45_6@uint64 v41_6;
vpc tmp_to_use_p_15@uint64 tmp_to_use_47;
assume v45_6 = tmp_to_use_47 && true;
split v46_6 tmp_to_use_48 v44_6 64;
add v47_6 v39_6 v46_6;
cast v48_6@uint64 v44_6;
vpc tmp_to_use_p_16@uint64 tmp_to_use_48;
assume v48_6 = tmp_to_use_48 && true;
mov out64_0_4 v42_6;
mov out64_8_4 v45_6;
mov out64_16_4 v48_6;
vpc v49_6@uint64 v47_6;
mov out64_24_4 v49_6;
mov small2_0_1 out64_0_4;
mov small2_8_1 out64_8_4;
mov small2_16_1 out64_16_4;
mov small2_24_1 out64_24_4;
mov small158_0_1 small1_0_1;
mov small158_8_1 small1_8_1;
mov small158_16_1 small1_16_1;
mov small158_24_1 small1_24_1;
mov small259_0_1 small2_0_1;
mov small259_8_1 small2_8_1;
mov small259_16_1 small2_16_1;
mov small259_24_1 small2_24_1;
mov v1_9 small158_0_1;
mov v3_9 small259_0_1;
mulj a60_1 v1_9 v3_9;
split v5_7 tmp_to_use_49 a60_1 64;
mov value_lo_61 18446744073709551615@uint64;
mov value_hi_61 0@uint64;
join value_61 value_hi_61 value_lo_61;
and v85_1@uint128 a60_1 value_61;
assume v85_1 = tmp_to_use_49 && true;
mov out61_0_1 v85_1;
mov v6_9 small259_8_1;
mulj a63_1 v1_9 v6_9;
split v8_9 tmp_to_use_50 a63_1 64;
mov value_lo_62 18446744073709551615@uint64;
mov value_hi_62 0@uint64;
join value_62 value_hi_62 value_lo_62;
and v86_1@uint128 a63_1 value_62;
assume v86_1 = tmp_to_use_50 && true;
add v9_7 v5_7 v86_1;
mov v10_5 small158_8_1;
mulj a64_1 v3_9 v10_5;
split v12_7 tmp_to_use_51 a64_1 64;
mov value_lo_63 18446744073709551615@uint64;
mov value_hi_63 0@uint64;
join value_63 value_hi_63 value_lo_63;
and v87_1@uint128 a64_1 value_63;
assume v87_1 = tmp_to_use_51 && true;
add v13_7 v9_7 v87_1;
mov out61_16_1 v13_7;
add v14_7 v8_9 v12_7;
mov v15_1 small259_16_1;
mulj a66_1 v1_9 v15_1;
split v17_9 tmp_to_use_52 a66_1 64;
mov value_lo_64 18446744073709551615@uint64;
mov value_hi_64 0@uint64;
join value_64 value_hi_64 value_lo_64;
and v88_1@uint128 a66_1 value_64;
assume v88_1 = tmp_to_use_52 && true;
add v18_9 v14_7 v88_1;
mulj a67_1 v6_9 v10_5;
split v19_5 tmp_to_use_53 a67_1 64;
mov value_lo_65 18446744073709551615@uint64;
mov value_hi_65 0@uint64;
join value_65 value_hi_65 value_lo_65;
and v89_1@uint128 a67_1 value_65;
assume v89_1 = tmp_to_use_53 && true;
add v20_9 v18_9 v89_1;
add v21_7 v17_9 v19_5;
mov v22_9 small158_16_1;
mulj a68_1 v3_9 v22_9;
split v24_9 tmp_to_use_54 a68_1 64;
mov value_lo_66 18446744073709551615@uint64;
mov value_hi_66 0@uint64;
join value_66 value_hi_66 value_lo_66;
and v90_1@uint128 a68_1 value_66;
assume v90_1 = tmp_to_use_54 && true;
add v25_9 v20_9 v90_1;
mov out61_32_1 v25_9;
add v26_9 v21_7 v24_9;
mov v27_7 small259_24_1;
mulj a70_1 v1_9 v27_7;
split v29_5 tmp_to_use_55 a70_1 64;
mov value_lo_67 18446744073709551615@uint64;
mov value_hi_67 0@uint64;
join value_67 value_hi_67 value_lo_67;
and v91_1@uint128 a70_1 value_67;
assume v91_1 = tmp_to_use_55 && true;
add v30_5 v26_9 v91_1;
mulj a71_1 v10_5 v15_1;
split v31_7 tmp_to_use_56 a71_1 64;
mov value_lo_68 18446744073709551615@uint64;
mov value_hi_68 0@uint64;
join value_68 value_hi_68 value_lo_68;
and v92_1@uint128 a71_1 value_68;
assume v92_1 = tmp_to_use_56 && true;
add v32_9 v30_5 v92_1;
add v33_9 v29_5 v31_7;
mulj a72_1 v6_9 v22_9;
split v34_9 tmp_to_use_57 a72_1 64;
mov value_lo_69 18446744073709551615@uint64;
mov value_hi_69 0@uint64;
join value_69 value_hi_69 value_lo_69;
and v93_1@uint128 a72_1 value_69;
assume v93_1 = tmp_to_use_57 && true;
add v35_9 v32_9 v93_1;
add v36_9 v33_9 v34_9;
mov v37_7 small158_24_1;
mulj a73_1 v3_9 v37_7;
split v39_7 tmp_to_use_58 a73_1 64;
mov value_lo_70 18446744073709551615@uint64;
mov value_hi_70 0@uint64;
join value_70 value_hi_70 value_lo_70;
and v94_1@uint128 a73_1 value_70;
assume v94_1 = tmp_to_use_58 && true;
add v40_7 v35_9 v94_1;
mov out61_48_1 v40_7;
add v41_7 v36_9 v39_7;
mulj a75_1 v10_5 v27_7;
split v42_7 tmp_to_use_59 a75_1 64;
mov value_lo_71 18446744073709551615@uint64;
mov value_hi_71 0@uint64;
join value_71 value_hi_71 value_lo_71;
and v95_1@uint128 a75_1 value_71;
assume v95_1 = tmp_to_use_59 && true;
add v43_7 v41_7 v95_1;
mulj a76_1 v15_1 v22_9;
split v44_7 tmp_to_use_60 a76_1 64;
mov value_lo_72 18446744073709551615@uint64;
mov value_hi_72 0@uint64;
join value_72 value_hi_72 value_lo_72;
and v96_1@uint128 a76_1 value_72;
assume v96_1 = tmp_to_use_60 && true;
add v45_7 v43_7 v96_1;
add v46_7 v42_7 v44_7;
mulj a77_1 v6_9 v37_7;
split v47_7 tmp_to_use_61 a77_1 64;
mov value_lo_73 18446744073709551615@uint64;
mov value_hi_73 0@uint64;
join value_73 value_hi_73 value_lo_73;
and v97_1@uint128 a77_1 value_73;
assume v97_1 = tmp_to_use_61 && true;
add v48_7 v45_7 v97_1;
mov out61_64_1 v48_7;
add v49_7 v46_7 v47_7;
mulj a79_1 v22_9 v27_7;
split v50_3 tmp_to_use_62 a79_1 64;
mov value_lo_74 18446744073709551615@uint64;
mov value_hi_74 0@uint64;
join value_74 value_hi_74 value_lo_74;
and v98_1@uint128 a79_1 value_74;
assume v98_1 = tmp_to_use_62 && true;
add v51_3 v49_7 v98_1;
mulj a80_1 v15_1 v37_7;
split v52_3 tmp_to_use_63 a80_1 64;
mov value_lo_75 18446744073709551615@uint64;
mov value_hi_75 0@uint64;
join value_75 value_hi_75 value_lo_75;
and v99_1@uint128 a80_1 value_75;
assume v99_1 = tmp_to_use_63 && true;
add v53_3 v51_3 v99_1;
mov out61_80_1 v53_3;
add v54_3 v50_3 v52_3;
mulj a82_1 v27_7 v37_7;
split v55_3 tmp_to_use_64 a82_1 64;
mov value_lo_76 18446744073709551615@uint64;
mov value_hi_76 0@uint64;
join value_76 value_hi_76 value_lo_76;
and v100_1@uint128 a82_1 value_76;
assume v100_1 = tmp_to_use_64 && true;
add v56_3 v54_3 v100_1;
mov out61_96_1 v56_3;
mov out61_112_1 v55_3;
mov tmp_0_3 out61_0_1;
mov tmp_16_3 out61_16_1;
mov tmp_32_3 out61_32_1;
mov tmp_48_3 out61_48_1;
mov tmp_64_3 out61_64_1;
mov tmp_80_3 out61_80_1;
mov tmp_96_3 out61_96_1;
mov tmp_112_3 out61_112_1;
mov in10_0_3 tmp_0_3;
mov in10_16_3 tmp_16_3;
mov in10_32_3 tmp_32_3;
mov in10_48_3 tmp_48_3;
mov in10_64_3 tmp_64_3;
mov in10_80_3 tmp_80_3;
mov in10_96_3 tmp_96_3;
mov in10_112_3 tmp_112_3;
mov v1_10 in10_0_3;
add v2_7 v1_10 1267650600228229401427983728624@uint128;
mov out11_0_13 v2_7;
mov v3_10 in10_16_3;
add v4_9 v3_10 1267650600228229401496703205376@uint128;
mov out11_16_9 v4_9;
mov v5_8 in10_32_3;
add v6_10 v5_8 1267650600228229401427983728656@uint128;
mov out11_32_11 v6_10;
mov v7_7 in10_48_3;
add v8_10 v7_7 1267650600228229401427983728656@uint128;
mov out11_48_11 v8_10;
mov v17_10 in10_64_3;
mov v18_10 in10_80_3;
split tmp1_31 tmp2_31 v18_10 96;
shl v19_6 tmp2_31 32;
assume tmp1_31 = 0 && true;
add v20_10 v17_10 v19_6;
add v22_10 v2_7 v20_10;
mov out11_0_14 v22_10;
sub v24_10 v8_10 v20_10;
mov out11_48_12 v24_10;
mov v25_10 in10_80_3;
mov v26_10 in10_112_3;
sub v30_6 v4_9 v26_10;
add v29_6 v25_10 v30_6;
mov out11_16_10 v29_6;
sub v28_5 v6_10 v25_10;
add v32_10 v26_10 v28_5;
mov out11_32_12 v32_10;
mov v33_10 in10_64_3;
split tmp1_32 tmp2_32 v33_10 96;
shl v34_10 tmp2_32 32;
assume tmp1_32 = 0 && true;
sub v35_10 v29_6 v34_10;
mov out11_16_11 v35_10;
mov v36_10 in10_64_3;
split tmp1_33 tmp2_33 v36_10 96;
shl v37_8 tmp2_33 32;
assume tmp1_33 = 0 && true;
add v38_7 v24_10 v37_8;
mov out11_48_13 v38_7;
mov v39_8 in10_80_3;
split tmp1_34 tmp2_34 v39_8 96;
shl v40_8 tmp2_34 32;
assume tmp1_34 = 0 && true;
sub v41_8 v32_10 v40_8;
mov out11_32_13 v41_8;
mov v42_8 in10_96_3;
sub v43_8 v22_10 v42_8;
mov out11_0_15 v43_8;
mov v44_8 in10_96_3;
split tmp1_35 tmp2_35 v44_8 96;
shl v45_8 tmp2_35 32;
assume tmp1_35 = 0 && true;
sub v46_8 v43_8 v45_8;
mov out11_0_16 v46_8;
mov v47_8 in10_96_3;
split tmp1_36 tmp2_36 v47_8 95;
shl v48_8 tmp2_36 33;
assume tmp1_36 = 0 && true;
add v49_8 v35_10 v48_8;
mov out11_16_12 v49_8;
mov v50_4 in10_96_3;
mul v51_4 v50_4 2@uint128;
add v52_4 v41_8 v51_4;
mov out11_32_14 v52_4;
mov v53_4 in10_96_3;
split tmp1_37 tmp2_37 v53_4 96;
shl v54_4 tmp2_37 32;
assume tmp1_37 = 0 && true;
sub v55_4 v38_7 v54_4;
mov out11_48_14 v55_4;
mov v56_4 in10_112_3;
sub v57_3 v46_8 v56_4;
mov out11_0_17 v57_3;
mov v58_5 in10_112_3;
split tmp1_38 tmp2_38 v58_5 96;
shl v59_5 tmp2_38 32;
assume tmp1_38 = 0 && true;
sub v60_5 v57_3 v59_5;
mov out11_0_18 v60_5;
mov v61_5 in10_112_3;
split tmp1_39 tmp2_39 v61_5 95;
shl v62_5 tmp2_39 33;
assume tmp1_39 = 0 && true;
add v63_5 v52_4 v62_5;
mov out11_32_15 v63_5;
mov v64_5 in10_112_3;
mul v65_5 v64_5 3@uint128;
add v66_5 v55_4 v65_5;
mov out11_48_15 v66_5;
mov beta_0_1 out11_0_18;
mov beta_16_1 out11_16_12;
mov beta_32_1 out11_32_15;
mov beta_48_1 out11_48_15;
mov v139_1 ftmp_0_1;
add v140_1 v139_1 40564819207303340845695479315968@uint128;
mov v141_1 ftmp_16_1;
add v142_1 v141_1 40564819207303340847894502572032@uint128;
mov v143_1 ftmp_32_1;
add v144_1 v143_1 40564819207303340845695479316992@uint128;
mov v145_1 ftmp_48_1;
add v146_1 v145_1 40564819207303340845695479316992@uint128;
mov v147_1 delta_0_1;
sub v148_1 v140_1 v147_1;
mov ftmp_0_2 v148_1;
mov v149_1 delta_16_1;
sub v150_1 v142_1 v149_1;
mov ftmp_16_2 v150_1;
mov v151_1 delta_32_1;
sub v152_1 v144_1 v151_1;
mov ftmp_32_2 v152_1;
mov v153_1 delta_48_1;
sub v154_1 v146_1 v153_1;
mov ftmp_48_2 v154_1;
mov v131_1 ftmp2_0_1;
add v132_1 v131_1 v147_1;
mov v133_1 ftmp2_16_1;
add v134_1 v133_1 v149_1;
mov v135_1 ftmp2_32_1;
add v136_1 v135_1 v151_1;
mov v137_1 ftmp2_48_1;
add v138_1 v137_1 v153_1;
mul v127_1 v132_1 3@uint128;
mov ftmp2_0_2 v127_1;
mul v128_1 v134_1 3@uint128;
mov ftmp2_16_2 v128_1;
mul v129_1 v136_1 3@uint128;
mov ftmp2_32_2 v129_1;
mul v130_1 v138_1 3@uint128;
mov ftmp2_48_2 v130_1;
mov in50_0_5 ftmp_0_2;
mov in50_16_5 ftmp_16_2;
mov in50_32_5 ftmp_32_2;
mov in50_48_5 ftmp_48_2;
mov v2_8 in50_48_5;
mov value_lo_77 18446744069414584320@uint64;
mov value_hi_77 0@uint64;
join value_77 value_hi_77 value_lo_77;
add v3_11 v2_8 value_77;
mov v4_10 in50_32_5;
split v5_9 tmp_to_use_65 v4_10 64;
add v6_11 v3_11 v5_9;
mov value_lo_78 18446744073709551615@uint64;
mov value_hi_78 0@uint64;
join value_78 value_hi_78 value_lo_78;
and v1_11@uint128 v4_10 value_78;
assume v1_11 = tmp_to_use_65 && true;
mov value_lo_79 18446673704965373952@uint64;
mov value_hi_79 0@uint64;
join value_79 value_hi_79 value_lo_79;
add v8_11 v1_11 value_79;
mov v10_6 in50_0_5;
mov value_lo_80 18446744073709551615@uint64;
mov value_hi_80 0@uint64;
join value_80 value_hi_80 value_lo_80;
add v11_7 v10_6 value_80;
mov v12_8 in50_16_5;
mov value_lo_81 4294967295@uint64;
mov value_hi_81 70368744177664@uint64;
join value_81 value_hi_81 value_lo_81;
add v13_8 v12_8 value_81;
split v14_8 tmp_to_use_66 v6_11 64;
vpc a52_7@uint64 v14_8;
mov value_lo_82 18446744073709551615@uint64;
mov value_hi_82 0@uint64;
join value_82 value_hi_82 value_lo_82;
and v7_8@uint128 v6_11 value_82;
assume v7_8 = tmp_to_use_66 && true;
split tmp1_40 tmp2_40 v14_8 96;
shl v16_7 tmp2_40 32;
assume tmp1_40 = 0 && true;
sub v76_5 v16_7 v14_8;
add v17_11 v7_8 v76_5;
split v18_11 tmp_to_use_67 v17_11 64;
vpc a53_5@uint64 v18_11;
add b54_5 a52_7 a53_5;
mov value_lo_83 18446744073709551615@uint64;
mov value_hi_83 0@uint64;
join value_83 value_hi_83 value_lo_83;
and v9_8@uint128 v17_11 value_83;
assume v9_8 = tmp_to_use_67 && true;
split tmp1_41 tmp2_41 v18_11 96;
shl v20_11 tmp2_41 32;
assume tmp1_41 = 0 && true;
sub v75_5 v20_11 v18_11;
add v21_8 v9_8 v75_5;
vpc v22_11@uint128 b54_5;
add v23_7 v11_7 v22_11;
split tmp1_42 tmp2_42 v22_11 96;
shl v24_11 tmp2_42 32;
assume tmp1_42 = 0 && true;
sub v25_11 v13_8 v24_11;
split v26_11 tmp_to_use_68 v21_8 64;
vpc high55_5@uint64 v26_11;
subb high_5 high56_5 0@uint64 high55_5;
cast low57_5@uint64 v21_8;
vpc tmp_to_use_p_17@uint64 tmp_to_use_68;
assume low57_5 = tmp_to_use_68 && true;
cast v27_8@int64 v21_8;
assume v27_8 = low57_5 && true;
split low_h1bit_5 low_l63bit_5 low57_5 63;
vpc mask_5@uint1 low_h1bit_5;
and low59_5@uint64 low57_5 9223372036854775807@uint64;
adds discarded_9 low60_5 low59_5 9223372041149743103@uint64;
not low61_5@uint64 low60_5;
split low_9 discarded_10 low61_5 63;
vpc low_10@uint1 low_9;
cmov v31_8 mask_5 low_10 0@uint1;
cmov mask63_5 v31_8 1@uint1 high_5;
cmov v32_11 mask63_5 18446744073709551615@uint128 0@uint128;
sub v33_11 v23_7 v32_11;
cmov v34_11 mask63_5 4294967295@uint64 0@uint64;
vpc v35_11@uint128 v34_11;
sub v36_11 v25_11 v35_11;
cmov v37_9 mask63_5 18446744069414584321@uint64 0@uint64;
vpc v38_8@uint128 v37_9;
sub v39_9 v21_8 v38_8;
split v40_9 tmp_to_use_69 v33_11 64;
add v41_9 v36_11 v40_9;
cast v42_9@uint64 v33_11;
vpc tmp_to_use_p_18@uint64 tmp_to_use_69;
assume v42_9 = tmp_to_use_p_18 && true;
split v43_9 tmp_to_use_70 v41_9 64;
add v44_9 v8_11 v43_9;
cast v45_9@uint64 v41_9;
vpc tmp_to_use_p_19@uint64 tmp_to_use_70;
assume v45_9 = tmp_to_use_70 && true;
split v46_9 tmp_to_use_71 v44_9 64;
add v47_9 v39_9 v46_9;
cast v48_9@uint64 v44_9;
vpc tmp_to_use_p_20@uint64 tmp_to_use_71;
assume v48_9 = tmp_to_use_71 && true;
mov out64_0_5 v42_9;
mov out64_8_5 v45_9;
mov out64_16_5 v48_9;
vpc v49_9@uint64 v47_9;
mov out64_24_5 v49_9;
mov small1_0_2 out64_0_5;
mov small1_8_2 out64_8_5;
mov small1_16_2 out64_16_5;
mov small1_24_2 out64_24_5;
mov in50_0_6 ftmp2_0_2;
mov in50_16_6 ftmp2_16_2;
mov in50_32_6 ftmp2_32_2;
mov in50_48_6 ftmp2_48_2;
mov v2_9 in50_48_6;
mov value_lo_84 18446744069414584320@uint64;
mov value_hi_84 0@uint64;
join value_84 value_hi_84 value_lo_84;
add v3_12 v2_9 value_84;
mov v4_11 in50_32_6;
split v5_10 tmp_to_use_72 v4_11 64;
add v6_12 v3_12 v5_10;
mov value_lo_85 18446744073709551615@uint64;
mov value_hi_85 0@uint64;
join value_85 value_hi_85 value_lo_85;
and v1_12@uint128 v4_11 value_85;
assume v1_12 = tmp_to_use_72 && true;
mov value_lo_86 18446673704965373952@uint64;
mov value_hi_86 0@uint64;
join value_86 value_hi_86 value_lo_86;
add v8_12 v1_12 value_86;
mov v10_7 in50_0_6;
mov value_lo_87 18446744073709551615@uint64;
mov value_hi_87 0@uint64;
join value_87 value_hi_87 value_lo_87;
add v11_8 v10_7 value_87;
mov v12_9 in50_16_6;
mov value_lo_88 4294967295@uint64;
mov value_hi_88 70368744177664@uint64;
join value_88 value_hi_88 value_lo_88;
add v13_9 v12_9 value_88;
split v14_9 tmp_to_use_73 v6_12 64;
vpc a52_8@uint64 v14_9;
mov value_lo_89 18446744073709551615@uint64;
mov value_hi_89 0@uint64;
join value_89 value_hi_89 value_lo_89;
and v7_9@uint128 v6_12 value_89;
assume v7_9 = tmp_to_use_73 && true;
split tmp1_43 tmp2_43 v14_9 96;
shl v16_8 tmp2_43 32;
assume tmp1_43 = 0 && true;
sub v76_6 v16_8 v14_9;
add v17_12 v7_9 v76_6;
split v18_12 tmp_to_use_74 v17_12 64;
vpc a53_6@uint64 v18_12;
add b54_6 a52_8 a53_6;
mov value_lo_90 18446744073709551615@uint64;
mov value_hi_90 0@uint64;
join value_90 value_hi_90 value_lo_90;
and v9_9@uint128 v17_12 value_90;
assume v9_9 = tmp_to_use_74 && true;
split tmp1_44 tmp2_44 v18_12 96;
shl v20_12 tmp2_44 32;
assume tmp1_44 = 0 && true;
sub v75_6 v20_12 v18_12;
add v21_9 v9_9 v75_6;
vpc v22_12@uint128 b54_6;
add v23_8 v11_8 v22_12;
split tmp1_45 tmp2_45 v22_12 96;
shl v24_12 tmp2_45 32;
assume tmp1_45 = 0 && true;
sub v25_12 v13_9 v24_12;
split v26_12 tmp_to_use_75 v21_9 64;
vpc high55_6@uint64 v26_12;
subb high_6 high56_6 0@uint64 high55_6;
cast low57_6@uint64 v21_9;
vpc tmp_to_use_p_21@uint64 tmp_to_use_75;
assume low57_6 = tmp_to_use_75 && true;
cast v27_9@int64 v21_9;
assume v27_9 = low57_6 && true;
split low_h1bit_6 low_l63bit_6 low57_6 63;
vpc mask_6@uint1 low_h1bit_6;
and low59_6@uint64 low57_6 9223372036854775807@uint64;
adds discarded_11 low60_6 low59_6 9223372041149743103@uint64;
not low61_6@uint64 low60_6;
split low_11 discarded_12 low61_6 63;
vpc low_12@uint1 low_11;
cmov v31_9 mask_6 low_12 0@uint1;
cmov mask63_6 v31_9 1@uint1 high_6;
cmov v32_12 mask63_6 18446744073709551615@uint128 0@uint128;
sub v33_12 v23_8 v32_12;
cmov v34_12 mask63_6 4294967295@uint64 0@uint64;
vpc v35_12@uint128 v34_12;
sub v36_12 v25_12 v35_12;
cmov v37_10 mask63_6 18446744069414584321@uint64 0@uint64;
vpc v38_9@uint128 v37_10;
sub v39_10 v21_9 v38_9;
split v40_10 tmp_to_use_76 v33_12 64;
add v41_10 v36_12 v40_10;
cast v42_10@uint64 v33_12;
vpc tmp_to_use_p_22@uint64 tmp_to_use_76;
assume v42_10 = tmp_to_use_p_22 && true;
split v43_10 tmp_to_use_77 v41_10 64;
add v44_10 v8_12 v43_10;
cast v45_10@uint64 v41_10;
vpc tmp_to_use_p_23@uint64 tmp_to_use_77;
assume v45_10 = tmp_to_use_77 && true;
split v46_10 tmp_to_use_78 v44_10 64;
add v47_10 v39_10 v46_10;
cast v48_10@uint64 v44_10;
vpc tmp_to_use_p_24@uint64 tmp_to_use_78;
assume v48_10 = tmp_to_use_78 && true;
mov out64_0_6 v42_10;
mov out64_8_6 v45_10;
mov out64_16_6 v48_10;
vpc v49_10@uint64 v47_10;
mov out64_24_6 v49_10;
mov small2_0_2 out64_0_6;
mov small2_8_2 out64_8_6;
mov small2_16_2 out64_16_6;
mov small2_24_2 out64_24_6;
mov small158_0_2 small1_0_2;
mov small158_8_2 small1_8_2;
mov small158_16_2 small1_16_2;
mov small158_24_2 small1_24_2;
mov small259_0_2 small2_0_2;
mov small259_8_2 small2_8_2;
mov small259_16_2 small2_16_2;
mov small259_24_2 small2_24_2;
mov v1_13 small158_0_2;
mov v3_13 small259_0_2;
mulj a60_2 v1_13 v3_13;
split v5_11 tmp_to_use_79 a60_2 64;
mov value_lo_91 18446744073709551615@uint64;
mov value_hi_91 0@uint64;
join value_91 value_hi_91 value_lo_91;
and v85_2@uint128 a60_2 value_91;
assume v85_2 = tmp_to_use_79 && true;
mov out61_0_2 v85_2;
mov v6_13 small259_8_2;
mulj a63_2 v1_13 v6_13;
split v8_13 tmp_to_use_80 a63_2 64;
mov value_lo_92 18446744073709551615@uint64;
mov value_hi_92 0@uint64;
join value_92 value_hi_92 value_lo_92;
and v86_2@uint128 a63_2 value_92;
assume v86_2 = tmp_to_use_80 && true;
add v9_10 v5_11 v86_2;
mov v10_8 small158_8_2;
mulj a64_2 v3_13 v10_8;
split v12_10 tmp_to_use_81 a64_2 64;
mov value_lo_93 18446744073709551615@uint64;
mov value_hi_93 0@uint64;
join value_93 value_hi_93 value_lo_93;
and v87_2@uint128 a64_2 value_93;
assume v87_2 = tmp_to_use_81 && true;
add v13_10 v9_10 v87_2;
mov out61_16_2 v13_10;
add v14_10 v8_13 v12_10;
mov v15_2 small259_16_2;
mulj a66_2 v1_13 v15_2;
split v17_13 tmp_to_use_82 a66_2 64;
mov value_lo_94 18446744073709551615@uint64;
mov value_hi_94 0@uint64;
join value_94 value_hi_94 value_lo_94;
and v88_2@uint128 a66_2 value_94;
assume v88_2 = tmp_to_use_82 && true;
add v18_13 v14_10 v88_2;
mulj a67_2 v6_13 v10_8;
split v19_7 tmp_to_use_83 a67_2 64;
mov value_lo_95 18446744073709551615@uint64;
mov value_hi_95 0@uint64;
join value_95 value_hi_95 value_lo_95;
and v89_2@uint128 a67_2 value_95;
assume v89_2 = tmp_to_use_83 && true;
add v20_13 v18_13 v89_2;
add v21_10 v17_13 v19_7;
mov v22_13 small158_16_2;
mulj a68_2 v3_13 v22_13;
split v24_13 tmp_to_use_84 a68_2 64;
mov value_lo_96 18446744073709551615@uint64;
mov value_hi_96 0@uint64;
join value_96 value_hi_96 value_lo_96;
and v90_2@uint128 a68_2 value_96;
assume v90_2 = tmp_to_use_84 && true;
add v25_13 v20_13 v90_2;
mov out61_32_2 v25_13;
add v26_13 v21_10 v24_13;
mov v27_10 small259_24_2;
mulj a70_2 v1_13 v27_10;
split v29_7 tmp_to_use_85 a70_2 64;
mov value_lo_97 18446744073709551615@uint64;
mov value_hi_97 0@uint64;
join value_97 value_hi_97 value_lo_97;
and v91_2@uint128 a70_2 value_97;
assume v91_2 = tmp_to_use_85 && true;
add v30_7 v26_13 v91_2;
mulj a71_2 v10_8 v15_2;
split v31_10 tmp_to_use_86 a71_2 64;
mov value_lo_98 18446744073709551615@uint64;
mov value_hi_98 0@uint64;
join value_98 value_hi_98 value_lo_98;
and v92_2@uint128 a71_2 value_98;
assume v92_2 = tmp_to_use_86 && true;
add v32_13 v30_7 v92_2;
add v33_13 v29_7 v31_10;
mulj a72_2 v6_13 v22_13;
split v34_13 tmp_to_use_87 a72_2 64;
mov value_lo_99 18446744073709551615@uint64;
mov value_hi_99 0@uint64;
join value_99 value_hi_99 value_lo_99;
and v93_2@uint128 a72_2 value_99;
assume v93_2 = tmp_to_use_87 && true;
add v35_13 v32_13 v93_2;
add v36_13 v33_13 v34_13;
mov v37_11 small158_24_2;
mulj a73_2 v3_13 v37_11;
split v39_11 tmp_to_use_88 a73_2 64;
mov value_lo_100 18446744073709551615@uint64;
mov value_hi_100 0@uint64;
join value_100 value_hi_100 value_lo_100;
and v94_2@uint128 a73_2 value_100;
assume v94_2 = tmp_to_use_88 && true;
add v40_11 v35_13 v94_2;
mov out61_48_2 v40_11;
add v41_11 v36_13 v39_11;
mulj a75_2 v10_8 v27_10;
split v42_11 tmp_to_use_89 a75_2 64;
mov value_lo_101 18446744073709551615@uint64;
mov value_hi_101 0@uint64;
join value_101 value_hi_101 value_lo_101;
and v95_2@uint128 a75_2 value_101;
assume v95_2 = tmp_to_use_89 && true;
add v43_11 v41_11 v95_2;
mulj a76_2 v15_2 v22_13;
split v44_11 tmp_to_use_90 a76_2 64;
mov value_lo_102 18446744073709551615@uint64;
mov value_hi_102 0@uint64;
join value_102 value_hi_102 value_lo_102;
and v96_2@uint128 a76_2 value_102;
assume v96_2 = tmp_to_use_90 && true;
add v45_11 v43_11 v96_2;
add v46_11 v42_11 v44_11;
mulj a77_2 v6_13 v37_11;
split v47_11 tmp_to_use_91 a77_2 64;
mov value_lo_103 18446744073709551615@uint64;
mov value_hi_103 0@uint64;
join value_103 value_hi_103 value_lo_103;
and v97_2@uint128 a77_2 value_103;
assume v97_2 = tmp_to_use_91 && true;
add v48_11 v45_11 v97_2;
mov out61_64_2 v48_11;
add v49_11 v46_11 v47_11;
mulj a79_2 v22_13 v27_10;
split v50_5 tmp_to_use_92 a79_2 64;
mov value_lo_104 18446744073709551615@uint64;
mov value_hi_104 0@uint64;
join value_104 value_hi_104 value_lo_104;
and v98_2@uint128 a79_2 value_104;
assume v98_2 = tmp_to_use_92 && true;
add v51_5 v49_11 v98_2;
mulj a80_2 v15_2 v37_11;
split v52_5 tmp_to_use_93 a80_2 64;
mov value_lo_105 18446744073709551615@uint64;
mov value_hi_105 0@uint64;
join value_105 value_hi_105 value_lo_105;
and v99_2@uint128 a80_2 value_105;
assume v99_2 = tmp_to_use_93 && true;
add v53_5 v51_5 v99_2;
mov out61_80_2 v53_5;
add v54_5 v50_5 v52_5;
mulj a82_2 v27_10 v37_11;
split v55_5 tmp_to_use_94 a82_2 64;
mov value_lo_106 18446744073709551615@uint64;
mov value_hi_106 0@uint64;
join value_106 value_hi_106 value_lo_106;
and v100_2@uint128 a82_2 value_106;
assume v100_2 = tmp_to_use_94 && true;
add v56_5 v54_5 v100_2;
mov out61_96_2 v56_5;
mov out61_112_2 v55_5;
mov tmp_0_4 out61_0_2;
mov tmp_16_4 out61_16_2;
mov tmp_32_4 out61_32_2;
mov tmp_48_4 out61_48_2;
mov tmp_64_4 out61_64_2;
mov tmp_80_4 out61_80_2;
mov tmp_96_4 out61_96_2;
mov tmp_112_4 out61_112_2;
mov in10_0_4 tmp_0_4;
mov in10_16_4 tmp_16_4;
mov in10_32_4 tmp_32_4;
mov in10_48_4 tmp_48_4;
mov in10_64_4 tmp_64_4;
mov in10_80_4 tmp_80_4;
mov in10_96_4 tmp_96_4;
mov in10_112_4 tmp_112_4;
mov v1_14 in10_0_4;
add v2_10 v1_14 1267650600228229401427983728624@uint128;
mov out11_0_19 v2_10;
mov v3_14 in10_16_4;
add v4_12 v3_14 1267650600228229401496703205376@uint128;
mov out11_16_13 v4_12;
mov v5_12 in10_32_4;
add v6_14 v5_12 1267650600228229401427983728656@uint128;
mov out11_32_16 v6_14;
mov v7_10 in10_48_4;
add v8_14 v7_10 1267650600228229401427983728656@uint128;
mov out11_48_16 v8_14;
mov v17_14 in10_64_4;
mov v18_14 in10_80_4;
split tmp1_46 tmp2_46 v18_14 96;
shl v19_8 tmp2_46 32;
assume tmp1_46 = 0 && true;
add v20_14 v17_14 v19_8;
add v22_14 v2_10 v20_14;
mov out11_0_20 v22_14;
sub v24_14 v8_14 v20_14;
mov out11_48_17 v24_14;
mov v25_14 in10_80_4;
mov v26_14 in10_112_4;
sub v30_8 v4_12 v26_14;
add v29_8 v25_14 v30_8;
mov out11_16_14 v29_8;
sub v28_6 v6_14 v25_14;
add v32_14 v26_14 v28_6;
mov out11_32_17 v32_14;
mov v33_14 in10_64_4;
split tmp1_47 tmp2_47 v33_14 96;
shl v34_14 tmp2_47 32;
assume tmp1_47 = 0 && true;
sub v35_14 v29_8 v34_14;
mov out11_16_15 v35_14;
mov v36_14 in10_64_4;
split tmp1_48 tmp2_48 v36_14 96;
shl v37_12 tmp2_48 32;
assume tmp1_48 = 0 && true;
add v38_10 v24_14 v37_12;
mov out11_48_18 v38_10;
mov v39_12 in10_80_4;
split tmp1_49 tmp2_49 v39_12 96;
shl v40_12 tmp2_49 32;
assume tmp1_49 = 0 && true;
sub v41_12 v32_14 v40_12;
mov out11_32_18 v41_12;
mov v42_12 in10_96_4;
sub v43_12 v22_14 v42_12;
mov out11_0_21 v43_12;
mov v44_12 in10_96_4;
split tmp1_50 tmp2_50 v44_12 96;
shl v45_12 tmp2_50 32;
assume tmp1_50 = 0 && true;
sub v46_12 v43_12 v45_12;
mov out11_0_22 v46_12;
mov v47_12 in10_96_4;
split tmp1_51 tmp2_51 v47_12 95;
shl v48_12 tmp2_51 33;
assume tmp1_51 = 0 && true;
add v49_12 v35_14 v48_12;
mov out11_16_16 v49_12;
mov v50_6 in10_96_4;
mul v51_6 v50_6 2@uint128;
add v52_6 v41_12 v51_6;
mov out11_32_19 v52_6;
mov v53_6 in10_96_4;
split tmp1_52 tmp2_52 v53_6 96;
shl v54_6 tmp2_52 32;
assume tmp1_52 = 0 && true;
sub v55_6 v38_10 v54_6;
mov out11_48_19 v55_6;
mov v56_6 in10_112_4;
sub v57_4 v46_12 v56_6;
mov out11_0_23 v57_4;
mov v58_6 in10_112_4;
split tmp1_53 tmp2_53 v58_6 96;
shl v59_6 tmp2_53 32;
assume tmp1_53 = 0 && true;
sub v60_6 v57_4 v59_6;
mov out11_0_24 v60_6;
mov v61_6 in10_112_4;
split tmp1_54 tmp2_54 v61_6 95;
shl v62_6 tmp2_54 33;
assume tmp1_54 = 0 && true;
add v63_6 v52_6 v62_6;
mov out11_32_20 v63_6;
mov v64_6 in10_112_4;
mul v65_6 v64_6 3@uint128;
add v66_6 v55_6 v65_6;
mov out11_48_20 v66_6;
mov alpha_0_1 out11_0_24;
mov alpha_16_1 out11_16_16;
mov alpha_32_1 out11_32_20;
mov alpha_48_1 out11_48_20;
mov in50_0_7 alpha_0_1;
mov in50_16_7 alpha_16_1;
mov in50_32_7 alpha_32_1;
mov in50_48_7 alpha_48_1;
mov v2_11 in50_48_7;
mov value_lo_107 18446744069414584320@uint64;
mov value_hi_107 0@uint64;
join value_107 value_hi_107 value_lo_107;
add v3_15 v2_11 value_107;
mov v4_13 in50_32_7;
split v5_13 tmp_to_use_95 v4_13 64;
add v6_15 v3_15 v5_13;
mov value_lo_108 18446744073709551615@uint64;
mov value_hi_108 0@uint64;
join value_108 value_hi_108 value_lo_108;
and v1_15@uint128 v4_13 value_108;
assume v1_15 = tmp_to_use_95 && true;
mov value_lo_109 18446673704965373952@uint64;
mov value_hi_109 0@uint64;
join value_109 value_hi_109 value_lo_109;
add v8_15 v1_15 value_109;
mov v10_9 in50_0_7;
mov value_lo_110 18446744073709551615@uint64;
mov value_hi_110 0@uint64;
join value_110 value_hi_110 value_lo_110;
add v11_9 v10_9 value_110;
mov v12_11 in50_16_7;
mov value_lo_111 4294967295@uint64;
mov value_hi_111 70368744177664@uint64;
join value_111 value_hi_111 value_lo_111;
add v13_11 v12_11 value_111;
split v14_11 tmp_to_use_96 v6_15 64;
vpc a52_9@uint64 v14_11;
mov value_lo_112 18446744073709551615@uint64;
mov value_hi_112 0@uint64;
join value_112 value_hi_112 value_lo_112;
and v7_11@uint128 v6_15 value_112;
assume v7_11 = tmp_to_use_96 && true;
split tmp1_55 tmp2_55 v14_11 96;
shl v16_9 tmp2_55 32;
assume tmp1_55 = 0 && true;
sub v76_7 v16_9 v14_11;
add v17_15 v7_11 v76_7;
split v18_15 tmp_to_use_97 v17_15 64;
vpc a53_7@uint64 v18_15;
add b54_7 a52_9 a53_7;
mov value_lo_113 18446744073709551615@uint64;
mov value_hi_113 0@uint64;
join value_113 value_hi_113 value_lo_113;
and v9_11@uint128 v17_15 value_113;
assume v9_11 = tmp_to_use_97 && true;
split tmp1_56 tmp2_56 v18_15 96;
shl v20_15 tmp2_56 32;
assume tmp1_56 = 0 && true;
sub v75_7 v20_15 v18_15;
add v21_11 v9_11 v75_7;
vpc v22_15@uint128 b54_7;
add v23_9 v11_9 v22_15;
split tmp1_57 tmp2_57 v22_15 96;
shl v24_15 tmp2_57 32;
assume tmp1_57 = 0 && true;
sub v25_15 v13_11 v24_15;
split v26_15 tmp_to_use_98 v21_11 64;
vpc high55_7@uint64 v26_15;
subb high_7 high56_7 0@uint64 high55_7;
cast low57_7@uint64 v21_11;
vpc tmp_to_use_p_25@uint64 tmp_to_use_98;
assume low57_7 = tmp_to_use_98 && true;
cast v27_11@int64 v21_11;
assume v27_11 = low57_7 && true;
split low_h1bit_7 low_l63bit_7 low57_7 63;
vpc mask_7@uint1 low_h1bit_7;
and low59_7@uint64 low57_7 9223372036854775807@uint64;
adds discarded_13 low60_7 low59_7 9223372041149743103@uint64;
not low61_7@uint64 low60_7;
split low_13 discarded_14 low61_7 63;
vpc low_14@uint1 low_13;
cmov v31_11 mask_7 low_14 0@uint1;
cmov mask63_7 v31_11 1@uint1 high_7;
cmov v32_15 mask63_7 18446744073709551615@uint128 0@uint128;
sub v33_15 v23_9 v32_15;
cmov v34_15 mask63_7 4294967295@uint64 0@uint64;
vpc v35_15@uint128 v34_15;
sub v36_15 v25_15 v35_15;
cmov v37_13 mask63_7 18446744069414584321@uint64 0@uint64;
vpc v38_11@uint128 v37_13;
sub v39_13 v21_11 v38_11;
split v40_13 tmp_to_use_99 v33_15 64;
add v41_13 v36_15 v40_13;
cast v42_13@uint64 v33_15;
vpc tmp_to_use_p_26@uint64 tmp_to_use_99;
assume v42_13 = tmp_to_use_p_26 && true;
split v43_13 tmp_to_use_100 v41_13 64;
add v44_13 v8_15 v43_13;
cast v45_13@uint64 v41_13;
vpc tmp_to_use_p_27@uint64 tmp_to_use_100;
assume v45_13 = tmp_to_use_100 && true;
split v46_13 tmp_to_use_101 v44_13 64;
add v47_13 v39_13 v46_13;
cast v48_13@uint64 v44_13;
vpc tmp_to_use_p_28@uint64 tmp_to_use_101;
assume v48_13 = tmp_to_use_101 && true;
mov out64_0_7 v42_13;
mov out64_8_7 v45_13;
mov out64_16_7 v48_13;
vpc v49_13@uint64 v47_13;
mov out64_24_7 v49_13;
mov small2_0_3 out64_0_7;
mov small2_8_3 out64_8_7;
mov small2_16_3 out64_16_7;
mov small2_24_3 out64_24_7;
mov small38_0_3 small2_0_3;
mov small38_8_3 small2_8_3;
mov small38_16_3 small2_16_3;
mov small38_24_3 small2_24_3;
mov v1_16 small38_0_3;
mulj a39_3 v1_16 v1_16;
split v3_16 tmp_to_use_102 a39_3 64;
mov value_lo_114 18446744073709551615@uint64;
mov value_hi_114 0@uint64;
join value_114 value_hi_114 value_lo_114;
and v58_7@uint128 a39_3 value_114;
assume v58_7 = tmp_to_use_102 && true;
mov out40_0_3 v58_7;
mov v4_14 small38_8_3;
mulj a42_3 v1_16 v4_14;
split v6_16 tmp_to_use_103 a42_3 64;
mov value_lo_115 18446744073709551615@uint64;
mov value_hi_115 0@uint64;
join value_115 value_hi_115 value_lo_115;
and v59_7@uint128 a42_3 value_115;
assume v59_7 = tmp_to_use_103 && true;
mov value_lo_116 2@uint64;
mov value_hi_116 0@uint64;
join value_116 value_hi_116 value_lo_116;
mul v69_3 v59_7 value_116;
add v8_16 v3_16 v69_3;
mov out40_16_3 v8_16;
mov v9_12 small38_16_3;
mulj a44_3 v1_16 v9_12;
split v11_10 tmp_to_use_104 a44_3 64;
mov value_lo_117 18446744073709551615@uint64;
mov value_hi_117 0@uint64;
join value_117 value_hi_117 value_lo_117;
and v60_7@uint128 a44_3 value_117;
assume v60_7 = tmp_to_use_104 && true;
add v12_12 v6_16 v60_7;
mov value_lo_118 2@uint64;
mov value_hi_118 0@uint64;
join value_118 value_hi_118 value_lo_118;
mul v13_12 v12_12 value_118;
mov v14_12 small38_24_3;
mulj a45_3 v1_16 v14_12;
split v16_10 tmp_to_use_105 a45_3 64;
mov value_lo_119 18446744073709551615@uint64;
mov value_hi_119 0@uint64;
join value_119 value_hi_119 value_lo_119;
and v61_7@uint128 a45_3 value_119;
assume v61_7 = tmp_to_use_105 && true;
add v17_16 v11_10 v61_7;
mulj a46_3 v4_14 v9_12;
split v18_16 tmp_to_use_106 a46_3 64;
mov value_lo_120 18446744073709551615@uint64;
mov value_hi_120 0@uint64;
join value_120 value_hi_120 value_lo_120;
and v62_7@uint128 a46_3 value_120;
assume v62_7 = tmp_to_use_106 && true;
add v19_9 v17_16 v62_7;
mov value_lo_121 2@uint64;
mov value_hi_121 0@uint64;
join value_121 value_hi_121 value_lo_121;
mul v20_16 v19_9 value_121;
add v21_12 v16_10 v18_16;
mulj a47_3 v4_14 v4_14;
split v22_16 tmp_to_use_107 a47_3 64;
mov value_lo_122 18446744073709551615@uint64;
mov value_hi_122 0@uint64;
join value_122 value_hi_122 value_lo_122;
and v63_7@uint128 a47_3 value_122;
assume v63_7 = tmp_to_use_107 && true;
add v23_10 v13_12 v63_7;
mov out40_32_3 v23_10;
add v24_16 v20_16 v22_16;
mov out40_48_3 v24_16;
mulj a50_3 v4_14 v14_12;
split v25_16 tmp_to_use_108 a50_3 64;
mov value_lo_123 18446744073709551615@uint64;
mov value_hi_123 0@uint64;
join value_123 value_hi_123 value_lo_123;
and v64_7@uint128 a50_3 value_123;
assume v64_7 = tmp_to_use_108 && true;
add v26_16 v21_12 v64_7;
mov value_lo_124 2@uint64;
mov value_hi_124 0@uint64;
join value_124 value_hi_124 value_lo_124;
mul v27_12 v26_16 value_124;
mulj a51_3 v9_12 v14_12;
split v28_7 tmp_to_use_109 a51_3 64;
mov value_lo_125 18446744073709551615@uint64;
mov value_hi_125 0@uint64;
join value_125 value_hi_125 value_lo_125;
and v65_7@uint128 a51_3 value_125;
assume v65_7 = tmp_to_use_109 && true;
add v29_9 v25_16 v65_7;
mov value_lo_126 2@uint64;
mov value_hi_126 0@uint64;
join value_126 value_hi_126 value_lo_126;
mul v30_9 v29_9 value_126;
mov value_lo_127 2@uint64;
mov value_hi_127 0@uint64;
join value_127 value_hi_127 value_lo_127;
mul v31_12 v28_7 value_127;
mulj a52_10 v9_12 v9_12;
split v32_16 tmp_to_use_110 a52_10 64;
mov value_lo_128 18446744073709551615@uint64;
mov value_hi_128 0@uint64;
join value_128 value_hi_128 value_lo_128;
and v66_7@uint128 a52_10 value_128;
assume v66_7 = tmp_to_use_110 && true;
add v33_16 v27_12 v66_7;
mov out40_64_3 v33_16;
add v34_16 v30_9 v32_16;
mov out40_80_3 v34_16;
mulj a55_3 v14_12 v14_12;
split v35_16 tmp_to_use_111 a55_3 64;
mov value_lo_129 18446744073709551615@uint64;
mov value_hi_129 0@uint64;
join value_129 value_hi_129 value_lo_129;
and v67_3@uint128 a55_3 value_129;
assume v67_3 = tmp_to_use_111 && true;
add v36_16 v31_12 v67_3;
mov out40_96_3 v36_16;
mov out40_112_3 v35_16;
mov tmp_0_5 out40_0_3;
mov tmp_16_5 out40_16_3;
mov tmp_32_5 out40_32_3;
mov tmp_48_5 out40_48_3;
mov tmp_64_5 out40_64_3;
mov tmp_80_5 out40_80_3;
mov tmp_96_5 out40_96_3;
mov tmp_112_5 out40_112_3;
mov in10_0_5 tmp_0_5;
mov in10_16_5 tmp_16_5;
mov in10_32_5 tmp_32_5;
mov in10_48_5 tmp_48_5;
mov in10_64_5 tmp_64_5;
mov in10_80_5 tmp_80_5;
mov in10_96_5 tmp_96_5;
mov in10_112_5 tmp_112_5;
mov v1_17 in10_0_5;
add v2_12 v1_17 1267650600228229401427983728624@uint128;
mov out11_0_25 v2_12;
mov v3_17 in10_16_5;
add v4_15 v3_17 1267650600228229401496703205376@uint128;
mov out11_16_17 v4_15;
mov v5_14 in10_32_5;
add v6_17 v5_14 1267650600228229401427983728656@uint128;
mov out11_32_21 v6_17;
mov v7_12 in10_48_5;
add v8_17 v7_12 1267650600228229401427983728656@uint128;
mov out11_48_21 v8_17;
mov v17_17 in10_64_5;
mov v18_17 in10_80_5;
split tmp1_58 tmp2_58 v18_17 96;
shl v19_10 tmp2_58 32;
assume tmp1_58 = 0 && true;
add v20_17 v17_17 v19_10;
add v22_17 v2_12 v20_17;
mov out11_0_26 v22_17;
sub v24_17 v8_17 v20_17;
mov out11_48_22 v24_17;
mov v25_17 in10_80_5;
mov v26_17 in10_112_5;
sub v30_10 v4_15 v26_17;
add v29_10 v25_17 v30_10;
mov out11_16_18 v29_10;
sub v28_8 v6_17 v25_17;
add v32_17 v26_17 v28_8;
mov out11_32_22 v32_17;
mov v33_17 in10_64_5;
split tmp1_59 tmp2_59 v33_17 96;
shl v34_17 tmp2_59 32;
assume tmp1_59 = 0 && true;
sub v35_17 v29_10 v34_17;
mov out11_16_19 v35_17;
mov v36_17 in10_64_5;
split tmp1_60 tmp2_60 v36_17 96;
shl v37_14 tmp2_60 32;
assume tmp1_60 = 0 && true;
add v38_12 v24_17 v37_14;
mov out11_48_23 v38_12;
mov v39_14 in10_80_5;
split tmp1_61 tmp2_61 v39_14 96;
shl v40_14 tmp2_61 32;
assume tmp1_61 = 0 && true;
sub v41_14 v32_17 v40_14;
mov out11_32_23 v41_14;
mov v42_14 in10_96_5;
sub v43_14 v22_17 v42_14;
mov out11_0_27 v43_14;
mov v44_14 in10_96_5;
split tmp1_62 tmp2_62 v44_14 96;
shl v45_14 tmp2_62 32;
assume tmp1_62 = 0 && true;
sub v46_14 v43_14 v45_14;
mov out11_0_28 v46_14;
mov v47_14 in10_96_5;
split tmp1_63 tmp2_63 v47_14 95;
shl v48_14 tmp2_63 33;
assume tmp1_63 = 0 && true;
add v49_14 v35_17 v48_14;
mov out11_16_20 v49_14;
mov v50_7 in10_96_5;
mul v51_7 v50_7 2@uint128;
add v52_7 v41_14 v51_7;
mov out11_32_24 v52_7;
mov v53_7 in10_96_5;
split tmp1_64 tmp2_64 v53_7 96;
shl v54_7 tmp2_64 32;
assume tmp1_64 = 0 && true;
sub v55_7 v38_12 v54_7;
mov out11_48_24 v55_7;
mov v56_7 in10_112_5;
sub v57_5 v46_14 v56_7;
mov out11_0_29 v57_5;
mov v58_8 in10_112_5;
split tmp1_65 tmp2_65 v58_8 96;
shl v59_8 tmp2_65 32;
assume tmp1_65 = 0 && true;
sub v60_8 v57_5 v59_8;
mov out11_0_30 v60_8;
mov v61_8 in10_112_5;
split tmp1_66 tmp2_66 v61_8 95;
shl v62_8 tmp2_66 33;
assume tmp1_66 = 0 && true;
add v63_8 v52_7 v62_8;
mov out11_32_25 v63_8;
mov v64_8 in10_112_5;
mul v65_8 v64_8 3@uint128;
add v66_8 v55_7 v65_8;
mov out11_48_25 v66_8;
mov x_out13_0_1 out11_0_30;
mov x_out13_16_1 out11_16_20;
mov x_out13_32_1 out11_32_25;
mov x_out13_48_1 out11_48_25;
mov v123_1 beta_0_1;
mov v124_1 beta_16_1;
mov v125_1 beta_32_1;
mov v126_1 beta_48_1;
mul v119_1 v123_1 8@uint128;
mul v120_1 v124_1 8@uint128;
mul v121_1 v125_1 8@uint128;
mul v122_1 v126_1 8@uint128;
mov v107_1 x_out13_0_1;
mov v109_1 x_out13_16_1;
mov v111_1 x_out13_32_1;
mov v113_1 x_out13_48_1;
sub v292_1 40564819207303340845695479315968@uint128 v119_1;
add v115_1 v107_1 v292_1;
mov x_out13_0_2 v115_1;
sub v291_1 40564819207303340847894502572032@uint128 v120_1;
add v116_1 v109_1 v291_1;
mov x_out13_16_2 v116_1;
sub v290_1 40564819207303340845695479316992@uint128 v121_1;
add v117_1 v111_1 v290_1;
mov x_out13_32_2 v117_1;
sub v289_1 40564819207303340845695479316992@uint128 v122_1;
add v118_1 v113_1 v289_1;
mov x_out13_48_2 v118_1;
mov v95_3 delta_0_1;
mov v96_3 gamma_0_1;
add v97_3 v95_3 v96_3;
mov delta_0_2 v97_3;
mov v98_3 delta_16_1;
mov v99_3 gamma_16_1;
add v100_3 v98_3 v99_3;
mov delta_16_2 v100_3;
mov v101_1 delta_32_1;
mov v102_1 gamma_32_1;
add v103_1 v101_1 v102_1;
mov delta_32_2 v103_1;
mov v104_1 delta_48_1;
mov v105_1 gamma_48_1;
add v106_1 v104_1 v105_1;
mov delta_48_2 v106_1;
mov v91_3 y_in5_0_1;
mov v92_3 y_in5_16_1;
mov v93_3 y_in5_32_1;
mov v94_3 y_in5_48_1;
mov v83_1 z_in3_0_1;
add v84_1 v83_1 v91_3;
mov ftmp_0_3 v84_1;
mov v85_3 z_in3_16_1;
add v86_3 v85_3 v92_3;
mov ftmp_16_3 v86_3;
mov v87_3 z_in3_32_1;
add v88_3 v87_3 v93_3;
mov ftmp_32_3 v88_3;
mov v89_3 z_in3_48_1;
add v90_3 v89_3 v94_3;
mov ftmp_48_3 v90_3;
mov in50_0_8 ftmp_0_3;
mov in50_16_8 ftmp_16_3;
mov in50_32_8 ftmp_32_3;
mov in50_48_8 ftmp_48_3;
mov v2_13 in50_48_8;
mov value_lo_130 18446744069414584320@uint64;
mov value_hi_130 0@uint64;
join value_130 value_hi_130 value_lo_130;
add v3_18 v2_13 value_130;
mov v4_16 in50_32_8;
split v5_15 tmp_to_use_112 v4_16 64;
add v6_18 v3_18 v5_15;
mov value_lo_131 18446744073709551615@uint64;
mov value_hi_131 0@uint64;
join value_131 value_hi_131 value_lo_131;
and v1_18@uint128 v4_16 value_131;
assume v1_18 = tmp_to_use_112 && true;
mov value_lo_132 18446673704965373952@uint64;
mov value_hi_132 0@uint64;
join value_132 value_hi_132 value_lo_132;
add v8_18 v1_18 value_132;
mov v10_10 in50_0_8;
mov value_lo_133 18446744073709551615@uint64;
mov value_hi_133 0@uint64;
join value_133 value_hi_133 value_lo_133;
add v11_11 v10_10 value_133;
mov v12_13 in50_16_8;
mov value_lo_134 4294967295@uint64;
mov value_hi_134 70368744177664@uint64;
join value_134 value_hi_134 value_lo_134;
add v13_13 v12_13 value_134;
split v14_13 tmp_to_use_113 v6_18 64;
vpc a52_11@uint64 v14_13;
mov value_lo_135 18446744073709551615@uint64;
mov value_hi_135 0@uint64;
join value_135 value_hi_135 value_lo_135;
and v7_13@uint128 v6_18 value_135;
assume v7_13 = tmp_to_use_113 && true;
split tmp1_67 tmp2_67 v14_13 96;
shl v16_11 tmp2_67 32;
assume tmp1_67 = 0 && true;
sub v76_8 v16_11 v14_13;
add v17_18 v7_13 v76_8;
split v18_18 tmp_to_use_114 v17_18 64;
vpc a53_8@uint64 v18_18;
add b54_8 a52_11 a53_8;
mov value_lo_136 18446744073709551615@uint64;
mov value_hi_136 0@uint64;
join value_136 value_hi_136 value_lo_136;
and v9_13@uint128 v17_18 value_136;
assume v9_13 = tmp_to_use_114 && true;
split tmp1_68 tmp2_68 v18_18 96;
shl v20_18 tmp2_68 32;
assume tmp1_68 = 0 && true;
sub v75_8 v20_18 v18_18;
add v21_13 v9_13 v75_8;
vpc v22_18@uint128 b54_8;
add v23_11 v11_11 v22_18;
split tmp1_69 tmp2_69 v22_18 96;
shl v24_18 tmp2_69 32;
assume tmp1_69 = 0 && true;
sub v25_18 v13_13 v24_18;
split v26_18 tmp_to_use_115 v21_13 64;
vpc high55_8@uint64 v26_18;
subb high_8 high56_8 0@uint64 high55_8;
cast low57_8@uint64 v21_13;
vpc tmp_to_use_p_29@uint64 tmp_to_use_115;
assume low57_8 = tmp_to_use_115 && true;
cast v27_13@int64 v21_13;
assume v27_13 = low57_8 && true;
split low_h1bit_8 low_l63bit_8 low57_8 63;
vpc mask_8@uint1 low_h1bit_8;
and low59_8@uint64 low57_8 9223372036854775807@uint64;
adds discarded_15 low60_8 low59_8 9223372041149743103@uint64;
not low61_8@uint64 low60_8;
split low_15 discarded_16 low61_8 63;
vpc low_16@uint1 low_15;
cmov v31_13 mask_8 low_16 0@uint1;
cmov mask63_8 v31_13 1@uint1 high_8;
cmov v32_18 mask63_8 18446744073709551615@uint128 0@uint128;
sub v33_18 v23_11 v32_18;
cmov v34_18 mask63_8 4294967295@uint64 0@uint64;
vpc v35_18@uint128 v34_18;
sub v36_18 v25_18 v35_18;
cmov v37_15 mask63_8 18446744069414584321@uint64 0@uint64;
vpc v38_13@uint128 v37_15;
sub v39_15 v21_13 v38_13;
split v40_15 tmp_to_use_116 v33_18 64;
add v41_15 v36_18 v40_15;
cast v42_15@uint64 v33_18;
vpc tmp_to_use_p_30@uint64 tmp_to_use_116;
assume v42_15 = tmp_to_use_p_30 && true;
split v43_15 tmp_to_use_117 v41_15 64;
add v44_15 v8_18 v43_15;
cast v45_15@uint64 v41_15;
vpc tmp_to_use_p_31@uint64 tmp_to_use_117;
assume v45_15 = tmp_to_use_117 && true;
split v46_15 tmp_to_use_118 v44_15 64;
add v47_15 v39_15 v46_15;
cast v48_15@uint64 v44_15;
vpc tmp_to_use_p_32@uint64 tmp_to_use_118;
assume v48_15 = tmp_to_use_118 && true;
mov out64_0_8 v42_15;
mov out64_8_8 v45_15;
mov out64_16_8 v48_15;
vpc v49_15@uint64 v47_15;
mov out64_24_8 v49_15;
mov small_0_3 out64_0_8;
mov small_8_3 out64_8_8;
mov small_16_3 out64_16_8;
mov small_24_3 out64_24_8;
mov small38_0_4 small_0_3;
mov small38_8_4 small_8_3;
mov small38_16_4 small_16_3;
mov small38_24_4 small_24_3;
mov v1_19 small38_0_4;
mulj a39_4 v1_19 v1_19;
split v3_19 tmp_to_use_119 a39_4 64;
mov value_lo_137 18446744073709551615@uint64;
mov value_hi_137 0@uint64;
join value_137 value_hi_137 value_lo_137;
and v58_9@uint128 a39_4 value_137;
assume v58_9 = tmp_to_use_119 && true;
mov out40_0_4 v58_9;
mov v4_17 small38_8_4;
mulj a42_4 v1_19 v4_17;
split v6_19 tmp_to_use_120 a42_4 64;
mov value_lo_138 18446744073709551615@uint64;
mov value_hi_138 0@uint64;
join value_138 value_hi_138 value_lo_138;
and v59_9@uint128 a42_4 value_138;
assume v59_9 = tmp_to_use_120 && true;
mov value_lo_139 2@uint64;
mov value_hi_139 0@uint64;
join value_139 value_hi_139 value_lo_139;
mul v69_4 v59_9 value_139;
add v8_19 v3_19 v69_4;
mov out40_16_4 v8_19;
mov v9_14 small38_16_4;
mulj a44_4 v1_19 v9_14;
split v11_12 tmp_to_use_121 a44_4 64;
mov value_lo_140 18446744073709551615@uint64;
mov value_hi_140 0@uint64;
join value_140 value_hi_140 value_lo_140;
and v60_9@uint128 a44_4 value_140;
assume v60_9 = tmp_to_use_121 && true;
add v12_14 v6_19 v60_9;
mov value_lo_141 2@uint64;
mov value_hi_141 0@uint64;
join value_141 value_hi_141 value_lo_141;
mul v13_14 v12_14 value_141;
mov v14_14 small38_24_4;
mulj a45_4 v1_19 v14_14;
split v16_12 tmp_to_use_122 a45_4 64;
mov value_lo_142 18446744073709551615@uint64;
mov value_hi_142 0@uint64;
join value_142 value_hi_142 value_lo_142;
and v61_9@uint128 a45_4 value_142;
assume v61_9 = tmp_to_use_122 && true;
add v17_19 v11_12 v61_9;
mulj a46_4 v4_17 v9_14;
split v18_19 tmp_to_use_123 a46_4 64;
mov value_lo_143 18446744073709551615@uint64;
mov value_hi_143 0@uint64;
join value_143 value_hi_143 value_lo_143;
and v62_9@uint128 a46_4 value_143;
assume v62_9 = tmp_to_use_123 && true;
add v19_11 v17_19 v62_9;
mov value_lo_144 2@uint64;
mov value_hi_144 0@uint64;
join value_144 value_hi_144 value_lo_144;
mul v20_19 v19_11 value_144;
add v21_14 v16_12 v18_19;
mulj a47_4 v4_17 v4_17;
split v22_19 tmp_to_use_124 a47_4 64;
mov value_lo_145 18446744073709551615@uint64;
mov value_hi_145 0@uint64;
join value_145 value_hi_145 value_lo_145;
and v63_9@uint128 a47_4 value_145;
assume v63_9 = tmp_to_use_124 && true;
add v23_12 v13_14 v63_9;
mov out40_32_4 v23_12;
add v24_19 v20_19 v22_19;
mov out40_48_4 v24_19;
mulj a50_4 v4_17 v14_14;
split v25_19 tmp_to_use_125 a50_4 64;
mov value_lo_146 18446744073709551615@uint64;
mov value_hi_146 0@uint64;
join value_146 value_hi_146 value_lo_146;
and v64_9@uint128 a50_4 value_146;
assume v64_9 = tmp_to_use_125 && true;
add v26_19 v21_14 v64_9;
mov value_lo_147 2@uint64;
mov value_hi_147 0@uint64;
join value_147 value_hi_147 value_lo_147;
mul v27_14 v26_19 value_147;
mulj a51_4 v9_14 v14_14;
split v28_9 tmp_to_use_126 a51_4 64;
mov value_lo_148 18446744073709551615@uint64;
mov value_hi_148 0@uint64;
join value_148 value_hi_148 value_lo_148;
and v65_9@uint128 a51_4 value_148;
assume v65_9 = tmp_to_use_126 && true;
add v29_11 v25_19 v65_9;
mov value_lo_149 2@uint64;
mov value_hi_149 0@uint64;
join value_149 value_hi_149 value_lo_149;
mul v30_11 v29_11 value_149;
mov value_lo_150 2@uint64;
mov value_hi_150 0@uint64;
join value_150 value_hi_150 value_lo_150;
mul v31_14 v28_9 value_150;
mulj a52_12 v9_14 v9_14;
split v32_19 tmp_to_use_127 a52_12 64;
mov value_lo_151 18446744073709551615@uint64;
mov value_hi_151 0@uint64;
join value_151 value_hi_151 value_lo_151;
and v66_9@uint128 a52_12 value_151;
assume v66_9 = tmp_to_use_127 && true;
add v33_19 v27_14 v66_9;
mov out40_64_4 v33_19;
add v34_19 v30_11 v32_19;
mov out40_80_4 v34_19;
mulj a55_4 v14_14 v14_14;
split v35_19 tmp_to_use_128 a55_4 64;
mov value_lo_152 18446744073709551615@uint64;
mov value_hi_152 0@uint64;
join value_152 value_hi_152 value_lo_152;
and v67_4@uint128 a55_4 value_152;
assume v67_4 = tmp_to_use_128 && true;
add v36_19 v31_14 v67_4;
mov out40_96_4 v36_19;
mov out40_112_4 v35_19;
mov tmp_0_6 out40_0_4;
mov tmp_16_6 out40_16_4;
mov tmp_32_6 out40_32_4;
mov tmp_48_6 out40_48_4;
mov tmp_64_6 out40_64_4;
mov tmp_80_6 out40_80_4;
mov tmp_96_6 out40_96_4;
mov tmp_112_6 out40_112_4;
mov in10_0_6 tmp_0_6;
mov in10_16_6 tmp_16_6;
mov in10_32_6 tmp_32_6;
mov in10_48_6 tmp_48_6;
mov in10_64_6 tmp_64_6;
mov in10_80_6 tmp_80_6;
mov in10_96_6 tmp_96_6;
mov in10_112_6 tmp_112_6;
mov v1_20 in10_0_6;
add v2_14 v1_20 1267650600228229401427983728624@uint128;
mov out11_0_31 v2_14;
mov v3_20 in10_16_6;
add v4_18 v3_20 1267650600228229401496703205376@uint128;
mov out11_16_21 v4_18;
mov v5_16 in10_32_6;
add v6_20 v5_16 1267650600228229401427983728656@uint128;
mov out11_32_26 v6_20;
mov v7_14 in10_48_6;
add v8_20 v7_14 1267650600228229401427983728656@uint128;
mov out11_48_26 v8_20;
mov v17_20 in10_64_6;
mov v18_20 in10_80_6;
split tmp1_70 tmp2_70 v18_20 96;
shl v19_12 tmp2_70 32;
assume tmp1_70 = 0 && true;
add v20_20 v17_20 v19_12;
add v22_20 v2_14 v20_20;
mov out11_0_32 v22_20;
sub v24_20 v8_20 v20_20;
mov out11_48_27 v24_20;
mov v25_20 in10_80_6;
mov v26_20 in10_112_6;
sub v30_12 v4_18 v26_20;
add v29_12 v25_20 v30_12;
mov out11_16_22 v29_12;
sub v28_10 v6_20 v25_20;
add v32_20 v26_20 v28_10;
mov out11_32_27 v32_20;
mov v33_20 in10_64_6;
split tmp1_71 tmp2_71 v33_20 96;
shl v34_20 tmp2_71 32;
assume tmp1_71 = 0 && true;
sub v35_20 v29_12 v34_20;
mov out11_16_23 v35_20;
mov v36_20 in10_64_6;
split tmp1_72 tmp2_72 v36_20 96;
shl v37_16 tmp2_72 32;
assume tmp1_72 = 0 && true;
add v38_14 v24_20 v37_16;
mov out11_48_28 v38_14;
mov v39_16 in10_80_6;
split tmp1_73 tmp2_73 v39_16 96;
shl v40_16 tmp2_73 32;
assume tmp1_73 = 0 && true;
sub v41_16 v32_20 v40_16;
mov out11_32_28 v41_16;
mov v42_16 in10_96_6;
sub v43_16 v22_20 v42_16;
mov out11_0_33 v43_16;
mov v44_16 in10_96_6;
split tmp1_74 tmp2_74 v44_16 96;
shl v45_16 tmp2_74 32;
assume tmp1_74 = 0 && true;
sub v46_16 v43_16 v45_16;
mov out11_0_34 v46_16;
mov v47_16 in10_96_6;
split tmp1_75 tmp2_75 v47_16 95;
shl v48_16 tmp2_75 33;
assume tmp1_75 = 0 && true;
add v49_16 v35_20 v48_16;
mov out11_16_24 v49_16;
mov v50_8 in10_96_6;
mul v51_8 v50_8 2@uint128;
add v52_8 v41_16 v51_8;
mov out11_32_29 v52_8;
mov v53_8 in10_96_6;
split tmp1_76 tmp2_76 v53_8 96;
shl v54_8 tmp2_76 32;
assume tmp1_76 = 0 && true;
sub v55_8 v38_14 v54_8;
mov out11_48_29 v55_8;
mov v56_8 in10_112_6;
sub v57_6 v46_16 v56_8;
mov out11_0_35 v57_6;
mov v58_10 in10_112_6;
split tmp1_77 tmp2_77 v58_10 96;
shl v59_10 tmp2_77 32;
assume tmp1_77 = 0 && true;
sub v60_10 v57_6 v59_10;
mov out11_0_36 v60_10;
mov v61_10 in10_112_6;
split tmp1_78 tmp2_78 v61_10 95;
shl v62_10 tmp2_78 33;
assume tmp1_78 = 0 && true;
add v63_10 v52_8 v62_10;
mov out11_32_30 v63_10;
mov v64_10 in10_112_6;
mul v65_10 v64_10 3@uint128;
add v66_10 v55_8 v65_10;
mov out11_48_30 v66_10;
mov z_out15_0_1 out11_0_36;
mov z_out15_16_1 out11_16_24;
mov z_out15_32_1 out11_32_30;
mov z_out15_48_1 out11_48_30;
mov v67_5 z_out15_0_1;
mov v69_5 z_out15_16_1;
mov v71_1 z_out15_32_1;
mov v73_1 z_out15_48_1;
mov v75_9 delta_0_2;
sub v288_1 40564819207303340845695479315968@uint128 v75_9;
add v76_9 v67_5 v288_1;
mov z_out15_0_2 v76_9;
mov v77_1 delta_16_2;
sub v287_1 40564819207303340847894502572032@uint128 v77_1;
add v78_1 v69_5 v287_1;
mov z_out15_16_2 v78_1;
mov v79_1 delta_32_2;
sub v286_1 40564819207303340845695479316992@uint128 v79_1;
add v80_1 v71_1 v286_1;
mov z_out15_32_2 v80_1;
mov v81_1 delta_48_2;
sub v285_1 40564819207303340845695479316992@uint128 v81_1;
add v82_1 v73_1 v285_1;
mov z_out15_48_2 v82_1;
mov v59_11 beta_0_1;
mul v60_11 v59_11 4@uint128;
mov v61_11 beta_16_1;
mul v62_11 v61_11 4@uint128;
mov v63_11 beta_32_1;
mul v64_11 v63_11 4@uint128;
mov v65_11 beta_48_1;
mul v66_11 v65_11 4@uint128;
add v47_17 v60_11 162259276829213363382781917263872@uint128;
add v48_17 v62_11 162259276829213363391578010288128@uint128;
add v49_17 v64_11 162259276829213363382781917267968@uint128;
add v50_9 v66_11 162259276829213363382781917267968@uint128;
mov v51_9 x_out13_0_2;
sub v52_9 v47_17 v51_9;
mov beta_0_2 v52_9;
mov v53_9 x_out13_16_2;
sub v54_9 v48_17 v53_9;
mov beta_16_2 v54_9;
mov v55_9 x_out13_32_2;
sub v56_9 v49_17 v55_9;
mov beta_32_2 v56_9;
mov v57_7 x_out13_48_2;
sub v58_11 v50_9 v57_7;
mov beta_48_2 v58_11;
mov in50_0_9 beta_0_2;
mov in50_16_9 beta_16_2;
mov in50_32_9 beta_32_2;
mov in50_48_9 beta_48_2;
mov v2_15 in50_48_9;
mov value_lo_153 18446744069414584320@uint64;
mov value_hi_153 0@uint64;
join value_153 value_hi_153 value_lo_153;
add v3_21 v2_15 value_153;
mov v4_19 in50_32_9;
split v5_17 tmp_to_use_129 v4_19 64;
add v6_21 v3_21 v5_17;
mov value_lo_154 18446744073709551615@uint64;
mov value_hi_154 0@uint64;
join value_154 value_hi_154 value_lo_154;
and v1_21@uint128 v4_19 value_154;
assume v1_21 = tmp_to_use_129 && true;
mov value_lo_155 18446673704965373952@uint64;
mov value_hi_155 0@uint64;
join value_155 value_hi_155 value_lo_155;
add v8_21 v1_21 value_155;
mov v10_11 in50_0_9;
mov value_lo_156 18446744073709551615@uint64;
mov value_hi_156 0@uint64;
join value_156 value_hi_156 value_lo_156;
add v11_13 v10_11 value_156;
mov v12_15 in50_16_9;
mov value_lo_157 4294967295@uint64;
mov value_hi_157 70368744177664@uint64;
join value_157 value_hi_157 value_lo_157;
add v13_15 v12_15 value_157;
split v14_15 tmp_to_use_130 v6_21 64;
vpc a52_13@uint64 v14_15;
mov value_lo_158 18446744073709551615@uint64;
mov value_hi_158 0@uint64;
join value_158 value_hi_158 value_lo_158;
and v7_15@uint128 v6_21 value_158;
assume v7_15 = tmp_to_use_130 && true;
split tmp1_79 tmp2_79 v14_15 96;
shl v16_13 tmp2_79 32;
assume tmp1_79 = 0 && true;
sub v76_10 v16_13 v14_15;
add v17_21 v7_15 v76_10;
split v18_21 tmp_to_use_131 v17_21 64;
vpc a53_9@uint64 v18_21;
add b54_9 a52_13 a53_9;
mov value_lo_159 18446744073709551615@uint64;
mov value_hi_159 0@uint64;
join value_159 value_hi_159 value_lo_159;
and v9_15@uint128 v17_21 value_159;
assume v9_15 = tmp_to_use_131 && true;
split tmp1_80 tmp2_80 v18_21 96;
shl v20_21 tmp2_80 32;
assume tmp1_80 = 0 && true;
sub v75_10 v20_21 v18_21;
add v21_15 v9_15 v75_10;
vpc v22_21@uint128 b54_9;
add v23_13 v11_13 v22_21;
split tmp1_81 tmp2_81 v22_21 96;
shl v24_21 tmp2_81 32;
assume tmp1_81 = 0 && true;
sub v25_21 v13_15 v24_21;
split v26_21 tmp_to_use_132 v21_15 64;
vpc high55_9@uint64 v26_21;
subb high_9 high56_9 0@uint64 high55_9;
cast low57_9@uint64 v21_15;
vpc tmp_to_use_p_33@uint64 tmp_to_use_132;
assume low57_9 = tmp_to_use_132 && true;
cast v27_15@int64 v21_15;
assume v27_15 = low57_9 && true;
split low_h1bit_9 low_l63bit_9 low57_9 63;
vpc mask_9@uint1 low_h1bit_9;
and low59_9@uint64 low57_9 9223372036854775807@uint64;
adds discarded_17 low60_9 low59_9 9223372041149743103@uint64;
not low61_9@uint64 low60_9;
split low_17 discarded_18 low61_9 63;
vpc low_18@uint1 low_17;
cmov v31_15 mask_9 low_18 0@uint1;
cmov mask63_9 v31_15 1@uint1 high_9;
cmov v32_21 mask63_9 18446744073709551615@uint128 0@uint128;
sub v33_21 v23_13 v32_21;
cmov v34_21 mask63_9 4294967295@uint64 0@uint64;
vpc v35_21@uint128 v34_21;
sub v36_21 v25_21 v35_21;
cmov v37_17 mask63_9 18446744069414584321@uint64 0@uint64;
vpc v38_15@uint128 v37_17;
sub v39_17 v21_15 v38_15;
split v40_17 tmp_to_use_133 v33_21 64;
add v41_17 v36_21 v40_17;
cast v42_17@uint64 v33_21;
vpc tmp_to_use_p_34@uint64 tmp_to_use_133;
assume v42_17 = tmp_to_use_p_34 && true;
split v43_17 tmp_to_use_134 v41_17 64;
add v44_17 v8_21 v43_17;
cast v45_17@uint64 v41_17;
vpc tmp_to_use_p_35@uint64 tmp_to_use_134;
assume v45_17 = tmp_to_use_134 && true;
split v46_17 tmp_to_use_135 v44_17 64;
add v47_18 v39_17 v46_17;
cast v48_18@uint64 v44_17;
vpc tmp_to_use_p_36@uint64 tmp_to_use_135;
assume v48_18 = tmp_to_use_135 && true;
mov out64_0_9 v42_17;
mov out64_8_9 v45_17;
mov out64_16_9 v48_18;
vpc v49_18@uint64 v47_18;
mov out64_24_9 v49_18;
mov small2_0_4 out64_0_9;
mov small2_8_4 out64_8_9;
mov small2_16_4 out64_16_9;
mov small2_24_4 out64_24_9;
mov small158_0_3 small2_0_4;
mov small158_8_3 small2_8_4;
mov small158_16_3 small2_16_4;
mov small158_24_3 small2_24_4;
mov small259_0_3 small2_0_4;
mov small259_8_3 small2_8_4;
mov small259_16_3 small2_16_4;
mov small259_24_3 small2_24_4;
mov v1_22 small158_0_3;
mov v3_22 small259_0_3;
mulj a60_3 v1_22 v3_22;
split v5_18 tmp_to_use_136 a60_3 64;
mov value_lo_160 18446744073709551615@uint64;
mov value_hi_160 0@uint64;
join value_160 value_hi_160 value_lo_160;
and v85_4@uint128 a60_3 value_160;
assume v85_4 = tmp_to_use_136 && true;
mov out61_0_3 v85_4;
mov v6_22 small259_8_3;
mulj a63_3 v1_22 v6_22;
split v8_22 tmp_to_use_137 a63_3 64;
mov value_lo_161 18446744073709551615@uint64;
mov value_hi_161 0@uint64;
join value_161 value_hi_161 value_lo_161;
and v86_4@uint128 a63_3 value_161;
assume v86_4 = tmp_to_use_137 && true;
add v9_16 v5_18 v86_4;
mov v10_12 small158_8_3;
mulj a64_3 v3_22 v10_12;
split v12_16 tmp_to_use_138 a64_3 64;
mov value_lo_162 18446744073709551615@uint64;
mov value_hi_162 0@uint64;
join value_162 value_hi_162 value_lo_162;
and v87_4@uint128 a64_3 value_162;
assume v87_4 = tmp_to_use_138 && true;
add v13_16 v9_16 v87_4;
mov out61_16_3 v13_16;
add v14_16 v8_22 v12_16;
mov v15_3 small259_16_3;
mulj a66_3 v1_22 v15_3;
split v17_22 tmp_to_use_139 a66_3 64;
mov value_lo_163 18446744073709551615@uint64;
mov value_hi_163 0@uint64;
join value_163 value_hi_163 value_lo_163;
and v88_4@uint128 a66_3 value_163;
assume v88_4 = tmp_to_use_139 && true;
add v18_22 v14_16 v88_4;
mulj a67_3 v6_22 v10_12;
split v19_13 tmp_to_use_140 a67_3 64;
mov value_lo_164 18446744073709551615@uint64;
mov value_hi_164 0@uint64;
join value_164 value_hi_164 value_lo_164;
and v89_4@uint128 a67_3 value_164;
assume v89_4 = tmp_to_use_140 && true;
add v20_22 v18_22 v89_4;
add v21_16 v17_22 v19_13;
mov v22_22 small158_16_3;
mulj a68_3 v3_22 v22_22;
split v24_22 tmp_to_use_141 a68_3 64;
mov value_lo_165 18446744073709551615@uint64;
mov value_hi_165 0@uint64;
join value_165 value_hi_165 value_lo_165;
and v90_4@uint128 a68_3 value_165;
assume v90_4 = tmp_to_use_141 && true;
add v25_22 v20_22 v90_4;
mov out61_32_3 v25_22;
add v26_22 v21_16 v24_22;
mov v27_16 small259_24_3;
mulj a70_3 v1_22 v27_16;
split v29_13 tmp_to_use_142 a70_3 64;
mov value_lo_166 18446744073709551615@uint64;
mov value_hi_166 0@uint64;
join value_166 value_hi_166 value_lo_166;
and v91_4@uint128 a70_3 value_166;
assume v91_4 = tmp_to_use_142 && true;
add v30_13 v26_22 v91_4;
mulj a71_3 v10_12 v15_3;
split v31_16 tmp_to_use_143 a71_3 64;
mov value_lo_167 18446744073709551615@uint64;
mov value_hi_167 0@uint64;
join value_167 value_hi_167 value_lo_167;
and v92_4@uint128 a71_3 value_167;
assume v92_4 = tmp_to_use_143 && true;
add v32_22 v30_13 v92_4;
add v33_22 v29_13 v31_16;
mulj a72_3 v6_22 v22_22;
split v34_22 tmp_to_use_144 a72_3 64;
mov value_lo_168 18446744073709551615@uint64;
mov value_hi_168 0@uint64;
join value_168 value_hi_168 value_lo_168;
and v93_4@uint128 a72_3 value_168;
assume v93_4 = tmp_to_use_144 && true;
add v35_22 v32_22 v93_4;
add v36_22 v33_22 v34_22;
mov v37_18 small158_24_3;
mulj a73_3 v3_22 v37_18;
split v39_18 tmp_to_use_145 a73_3 64;
mov value_lo_169 18446744073709551615@uint64;
mov value_hi_169 0@uint64;
join value_169 value_hi_169 value_lo_169;
and v94_4@uint128 a73_3 value_169;
assume v94_4 = tmp_to_use_145 && true;
add v40_18 v35_22 v94_4;
mov out61_48_3 v40_18;
add v41_18 v36_22 v39_18;
mulj a75_3 v10_12 v27_16;
split v42_18 tmp_to_use_146 a75_3 64;
mov value_lo_170 18446744073709551615@uint64;
mov value_hi_170 0@uint64;
join value_170 value_hi_170 value_lo_170;
and v95_4@uint128 a75_3 value_170;
assume v95_4 = tmp_to_use_146 && true;
add v43_18 v41_18 v95_4;
mulj a76_3 v15_3 v22_22;
split v44_18 tmp_to_use_147 a76_3 64;
mov value_lo_171 18446744073709551615@uint64;
mov value_hi_171 0@uint64;
join value_171 value_hi_171 value_lo_171;
and v96_4@uint128 a76_3 value_171;
assume v96_4 = tmp_to_use_147 && true;
add v45_18 v43_18 v96_4;
add v46_18 v42_18 v44_18;
mulj a77_3 v6_22 v37_18;
split v47_19 tmp_to_use_148 a77_3 64;
mov value_lo_172 18446744073709551615@uint64;
mov value_hi_172 0@uint64;
join value_172 value_hi_172 value_lo_172;
and v97_4@uint128 a77_3 value_172;
assume v97_4 = tmp_to_use_148 && true;
add v48_19 v45_18 v97_4;
mov out61_64_3 v48_19;
add v49_19 v46_18 v47_19;
mulj a79_3 v22_22 v27_16;
split v50_10 tmp_to_use_149 a79_3 64;
mov value_lo_173 18446744073709551615@uint64;
mov value_hi_173 0@uint64;
join value_173 value_hi_173 value_lo_173;
and v98_4@uint128 a79_3 value_173;
assume v98_4 = tmp_to_use_149 && true;
add v51_10 v49_19 v98_4;
mulj a80_3 v15_3 v37_18;
split v52_10 tmp_to_use_150 a80_3 64;
mov value_lo_174 18446744073709551615@uint64;
mov value_hi_174 0@uint64;
join value_174 value_hi_174 value_lo_174;
and v99_4@uint128 a80_3 value_174;
assume v99_4 = tmp_to_use_150 && true;
add v53_10 v51_10 v99_4;
mov out61_80_3 v53_10;
add v54_10 v50_10 v52_10;
mulj a82_3 v27_16 v37_18;
split v55_10 tmp_to_use_151 a82_3 64;
mov value_lo_175 18446744073709551615@uint64;
mov value_hi_175 0@uint64;
join value_175 value_hi_175 value_lo_175;
and v100_4@uint128 a82_3 value_175;
assume v100_4 = tmp_to_use_151 && true;
add v56_10 v54_10 v100_4;
mov out61_96_3 v56_10;
mov out61_112_3 v55_10;
mov tmp_0_7 out61_0_3;
mov tmp_16_7 out61_16_3;
mov tmp_32_7 out61_32_3;
mov tmp_48_7 out61_48_3;
mov tmp_64_7 out61_64_3;
mov tmp_80_7 out61_80_3;
mov tmp_96_7 out61_96_3;
mov tmp_112_7 out61_112_3;
mov small38_0_5 small1_0_2;
mov small38_8_5 small1_8_2;
mov small38_16_5 small1_16_2;
mov small38_24_5 small1_24_2;
mov v1_23 small38_0_5;
mulj a39_5 v1_23 v1_23;
split v3_23 tmp_to_use_152 a39_5 64;
mov value_lo_176 18446744073709551615@uint64;
mov value_hi_176 0@uint64;
join value_176 value_hi_176 value_lo_176;
and v58_12@uint128 a39_5 value_176;
assume v58_12 = tmp_to_use_152 && true;
mov out40_0_5 v58_12;
mov v4_20 small38_8_5;
mulj a42_5 v1_23 v4_20;
split v6_23 tmp_to_use_153 a42_5 64;
mov value_lo_177 18446744073709551615@uint64;
mov value_hi_177 0@uint64;
join value_177 value_hi_177 value_lo_177;
and v59_12@uint128 a42_5 value_177;
assume v59_12 = tmp_to_use_153 && true;
mov value_lo_178 2@uint64;
mov value_hi_178 0@uint64;
join value_178 value_hi_178 value_lo_178;
mul v69_6 v59_12 value_178;
add v8_23 v3_23 v69_6;
mov out40_16_5 v8_23;
mov v9_17 small38_16_5;
mulj a44_5 v1_23 v9_17;
split v11_14 tmp_to_use_154 a44_5 64;
mov value_lo_179 18446744073709551615@uint64;
mov value_hi_179 0@uint64;
join value_179 value_hi_179 value_lo_179;
and v60_12@uint128 a44_5 value_179;
assume v60_12 = tmp_to_use_154 && true;
add v12_17 v6_23 v60_12;
mov value_lo_180 2@uint64;
mov value_hi_180 0@uint64;
join value_180 value_hi_180 value_lo_180;
mul v13_17 v12_17 value_180;
mov v14_17 small38_24_5;
mulj a45_5 v1_23 v14_17;
split v16_14 tmp_to_use_155 a45_5 64;
mov value_lo_181 18446744073709551615@uint64;
mov value_hi_181 0@uint64;
join value_181 value_hi_181 value_lo_181;
and v61_12@uint128 a45_5 value_181;
assume v61_12 = tmp_to_use_155 && true;
add v17_23 v11_14 v61_12;
mulj a46_5 v4_20 v9_17;
split v18_23 tmp_to_use_156 a46_5 64;
mov value_lo_182 18446744073709551615@uint64;
mov value_hi_182 0@uint64;
join value_182 value_hi_182 value_lo_182;
and v62_12@uint128 a46_5 value_182;
assume v62_12 = tmp_to_use_156 && true;
add v19_14 v17_23 v62_12;
mov value_lo_183 2@uint64;
mov value_hi_183 0@uint64;
join value_183 value_hi_183 value_lo_183;
mul v20_23 v19_14 value_183;
add v21_17 v16_14 v18_23;
mulj a47_5 v4_20 v4_20;
split v22_23 tmp_to_use_157 a47_5 64;
mov value_lo_184 18446744073709551615@uint64;
mov value_hi_184 0@uint64;
join value_184 value_hi_184 value_lo_184;
and v63_12@uint128 a47_5 value_184;
assume v63_12 = tmp_to_use_157 && true;
add v23_14 v13_17 v63_12;
mov out40_32_5 v23_14;
add v24_23 v20_23 v22_23;
mov out40_48_5 v24_23;
mulj a50_5 v4_20 v14_17;
split v25_23 tmp_to_use_158 a50_5 64;
mov value_lo_185 18446744073709551615@uint64;
mov value_hi_185 0@uint64;
join value_185 value_hi_185 value_lo_185;
and v64_12@uint128 a50_5 value_185;
assume v64_12 = tmp_to_use_158 && true;
add v26_23 v21_17 v64_12;
mov value_lo_186 2@uint64;
mov value_hi_186 0@uint64;
join value_186 value_hi_186 value_lo_186;
mul v27_17 v26_23 value_186;
mulj a51_5 v9_17 v14_17;
split v28_11 tmp_to_use_159 a51_5 64;
mov value_lo_187 18446744073709551615@uint64;
mov value_hi_187 0@uint64;
join value_187 value_hi_187 value_lo_187;
and v65_12@uint128 a51_5 value_187;
assume v65_12 = tmp_to_use_159 && true;
add v29_14 v25_23 v65_12;
mov value_lo_188 2@uint64;
mov value_hi_188 0@uint64;
join value_188 value_hi_188 value_lo_188;
mul v30_14 v29_14 value_188;
mov value_lo_189 2@uint64;
mov value_hi_189 0@uint64;
join value_189 value_hi_189 value_lo_189;
mul v31_17 v28_11 value_189;
mulj a52_14 v9_17 v9_17;
split v32_23 tmp_to_use_160 a52_14 64;
mov value_lo_190 18446744073709551615@uint64;
mov value_hi_190 0@uint64;
join value_190 value_hi_190 value_lo_190;
and v66_12@uint128 a52_14 value_190;
assume v66_12 = tmp_to_use_160 && true;
add v33_23 v27_17 v66_12;
mov out40_64_5 v33_23;
add v34_23 v30_14 v32_23;
mov out40_80_5 v34_23;
mulj a55_5 v14_17 v14_17;
split v35_23 tmp_to_use_161 a55_5 64;
mov value_lo_191 18446744073709551615@uint64;
mov value_hi_191 0@uint64;
join value_191 value_hi_191 value_lo_191;
and v67_6@uint128 a55_5 value_191;
assume v67_6 = tmp_to_use_161 && true;
add v36_23 v31_17 v67_6;
mov out40_96_5 v36_23;
mov out40_112_5 v35_23;
mov tmp2_0_1 out40_0_5;
mov tmp2_16_1 out40_16_5;
mov tmp2_32_1 out40_32_5;
mov tmp2_48_1 out40_48_5;
mov tmp2_64_1 out40_64_5;
mov tmp2_80_1 out40_80_5;
mov tmp2_96_1 out40_96_5;
mov tmp2_112_1 out40_112_5;
mov v31_18 tmp2_0_1;
mul v32_24 v31_18 8@uint128;
mov tmp2_0_2 v32_24;
mov v33_24 tmp2_16_1;
mul v34_24 v33_24 8@uint128;
mov tmp2_16_2 v34_24;
mov v35_24 tmp2_32_1;
mul v36_24 v35_24 8@uint128;
mov tmp2_32_2 v36_24;
mov v37_19 tmp2_48_1;
mul v38_16 v37_19 8@uint128;
mov tmp2_48_2 v38_16;
mov v39_19 tmp2_64_1;
mul v40_19 v39_19 8@uint128;
mov tmp2_64_2 v40_19;
mov v41_19 tmp2_80_1;
mul v42_19 v41_19 8@uint128;
mov tmp2_80_2 v42_19;
mov v43_19 tmp2_96_1;
mul v44_19 v43_19 8@uint128;
mov tmp2_96_2 v44_19;
mov v45_19 tmp2_112_1;
mul v46_19 v45_19 8@uint128;
mov tmp2_112_2 v46_19;
mov v226_1 tmp_0_7;
add v227_1 v226_1 1180591620717411303232@uint128;
mov v228_1 tmp_16_7;
add v229_1 v228_1 1180591621816922931200@uint128;
mov v230_1 tmp_32_7;
add v231_1 v230_1 1180591620717411303424@uint128;
mov v232_1 tmp_48_7;
add v233_1 v232_1 1180591619343021768768@uint128;
mov v234_1 tmp_64_7;
add v235_1 v234_1 1180591620717411303360@uint128;
mov v236_1 tmp_80_7;
add v237_1 v236_1 1180591620717411303360@uint128;
mov v238_1 tmp_96_7;
add v239_1 v238_1 1180591620717411303360@uint128;
mov v240_1 tmp_112_7;
add v241_1 v240_1 1180591620717411303360@uint128;
sub v243_1 v227_1 v32_24;
mov tmp_0_8 v243_1;
sub v245_1 v229_1 v34_24;
mov tmp_16_8 v245_1;
sub v247_1 v231_1 v36_24;
mov tmp_32_8 v247_1;
sub v249_1 v233_1 v38_16;
mov tmp_48_8 v249_1;
sub v251_1 v235_1 v40_19;
mov tmp_64_8 v251_1;
sub v253_1 v237_1 v42_19;
mov tmp_80_8 v253_1;
sub v255_1 v239_1 v44_19;
mov tmp_96_8 v255_1;
sub v257_1 v241_1 v46_19;
mov tmp_112_8 v257_1;
add v219_1 v243_1 40564819207303340845695479315968@uint128;
mov y_out19_0_1 v219_1;
add v221_1 v245_1 40564819207303340847894502572032@uint128;
mov y_out19_16_1 v221_1;
add v223_1 v247_1 40564819207303340845695479316992@uint128;
mov y_out19_32_1 v223_1;
add v225_1 v249_1 40564819207303340845695479316992@uint128;
mov y_out19_48_1 v225_1;
mov in51_64_1 tmp_64_8;
mov in51_80_1 tmp_80_8;
mov in51_96_1 tmp_96_8;
mov in51_112_1 tmp_112_8;
mov out53_0_1 y_out19_0_1;
mov out53_16_1 y_out19_16_1;
mov out53_32_1 y_out19_32_1;
mov out53_48_1 y_out19_48_1;
mov v1_24 in51_64_1;
mov v2_16 in51_80_1;
split tmp1_82 tmp2_82 v2_16 96;
shl v3_24 tmp2_82 32;
assume tmp1_82 = 0 && true;
add v4_21 v1_24 v3_24;
mov v5_19 out53_0_1;
add v7_16 v4_21 v5_19;
mov out53_0_2 v7_16;
mov v8_24 out53_48_1;
sub v9_18 v8_24 v4_21;
mov out53_48_2 v9_18;
mov v10_13 in51_80_1;
mov v11_15 in51_112_1;
mov v13_18 out53_16_1;
add v73_2 v10_13 v13_18;
sub v14_18 v73_2 v11_15;
mov out53_16_2 v14_18;
mov v15_4 out53_32_1;
add v72_1 v11_15 v15_4;
sub v16_15 v72_1 v10_13;
mov out53_32_2 v16_15;
mov v17_24 in51_64_1;
split tmp1_83 tmp2_83 v17_24 96;
shl v18_24 tmp2_83 32;
assume tmp1_83 = 0 && true;
sub v19_15 v14_18 v18_24;
mov out53_16_3 v19_15;
mov v20_24 in51_64_1;
split tmp1_84 tmp2_84 v20_24 96;
shl v21_18 tmp2_84 32;
assume tmp1_84 = 0 && true;
add v22_24 v9_18 v21_18;
mov out53_48_3 v22_24;
mov v23_15 in51_80_1;
split tmp1_85 tmp2_85 v23_15 96;
shl v24_24 tmp2_85 32;
assume tmp1_85 = 0 && true;
sub v25_24 v16_15 v24_24;
mov out53_32_3 v25_24;
mov v26_24 in51_96_1;
sub v27_18 v7_16 v26_24;
mov out53_0_3 v27_18;
mov v28_12 in51_96_1;
split tmp1_86 tmp2_86 v28_12 96;
shl v29_15 tmp2_86 32;
assume tmp1_86 = 0 && true;
subb borrow_v30_1 v30_15 v27_18 v29_15;
mov out53_0_4 v30_15;
mov v31_19 in51_96_1;
split tmp1_87 tmp2_87 v31_19 95;
shl v32_25 tmp2_87 33;
assume tmp1_87 = 0 && true;
add v33_25 v19_15 v32_25;
mov out53_16_4 v33_25;
mov v34_25 in51_96_1;
mul v35_25 v34_25 2@uint128;
add v36_25 v25_24 v35_25;
mov out53_32_4 v36_25;
mov v37_20 in51_96_1;
split tmp1_88 tmp2_88 v37_20 96;
shl v38_17 tmp2_88 32;
assume tmp1_88 = 0 && true;
sub v39_20 v22_24 v38_17;
mov out53_48_4 v39_20;
mov v40_20 in51_112_1;
sub v41_20 v30_15 v40_20;
mov out53_0_5 v41_20;
mov v42_20 in51_112_1;
split tmp1_89 tmp2_89 v42_20 96;
shl v43_20 tmp2_89 32;
assume tmp1_89 = 0 && true;
sub v44_20 v41_20 v43_20;
mov out53_0_6 v44_20;
mov v45_20 in51_112_1;
split tmp1_90 tmp2_90 v45_20 95;
shl v46_20 tmp2_90 33;
assume tmp1_90 = 0 && true;
add v47_20 v36_25 v46_20;
mov out53_32_5 v47_20;
mov v48_20 in51_112_1;
mul v49_20 v48_20 3@uint128;
add v50_11 v39_20 v49_20;
mov out53_48_5 v50_11;
mov y_out19_0_2 out53_0_6;
mov y_out19_16_2 out53_16_4;
mov y_out19_32_2 out53_32_5;
mov y_out19_48_2 out53_48_5;
mov xp0_1 x_out13_0_2;
mov xp1_1 x_out13_16_2;
mov xp2_1 x_out13_32_2;
mov xp3_1 x_out13_48_2;
mov yp0_1 y_out19_0_2;
mov yp1_1 y_out19_16_2;
mov yp2_1 y_out19_32_2;
mov yp3_1 y_out19_48_2;
mov zp0_1 z_out15_0_2;
mov zp1_1 z_out15_16_2;
mov zp2_1 z_out15_32_2;
mov zp3_1 z_out15_48_2;
{ and [xp0_1 + (xp1_1 * 18446744073709551616) + (xp2_1 * 340282366920938463463374607431768211456) + (xp3_1 * 6277101735386680763835789423207666416102355444464034512896) = (3 * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896) - ((z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)))) * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896) + ((z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)))) * 3 * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896) - ((z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)))) * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896) + ((z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896))))) - (8 * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896))) (mod 18446744073709551615 + (4294967295 * 18446744073709551616) + (0 * 340282366920938463463374607431768211456) + (18446744069414584321 * 6277101735386680763835789423207666416102355444464034512896)), yp0_1 + (yp1_1 * 72057594037927936) + (yp2_1 * 5192296858534827628530496329220096) + (yp3_1 * 374144419156711147060143317175368453031918731001856) = (3 * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896) - ((z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)))) * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896) + ((z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)))) * ((4 * (x0_0 + (x1_0 * 18446744073709551616) + (x2_0 * 340282366920938463463374607431768211456) + (x3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896))) - (xp0_1 + (xp1_1 * 18446744073709551616) + (xp2_1 * 340282366920938463463374607431768211456) + (xp3_1 * 6277101735386680763835789423207666416102355444464034512896)))) - (8 * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896))) (mod 18446744073709551615 + (4294967295 * 18446744073709551616) + (0 * 340282366920938463463374607431768211456) + (18446744069414584321 * 6277101735386680763835789423207666416102355444464034512896)), zp0_1 + (zp1_1 * 18446744073709551616) + (zp2_1 * 340282366920938463463374607431768211456) + (zp3_1 * 6277101735386680763835789423207666416102355444464034512896) = 2 * (y0_0 + (y1_0 * 18446744073709551616) + (y2_0 * 340282366920938463463374607431768211456) + (y3_0 * 6277101735386680763835789423207666416102355444464034512896)) * (z0_0 + (z1_0 * 18446744073709551616) + (z2_0 * 340282366920938463463374607431768211456) + (z3_0 * 6277101735386680763835789423207666416102355444464034512896)) (mod 18446744073709551615 + (4294967295 * 18446744073709551616) + (0 * 340282366920938463463374607431768211456) + (18446744069414584321 * 6277101735386680763835789423207666416102355444464034512896))] && and [v1_1 = tmp_to_use_1, v7_1 = tmp_to_use_2, tmp1_1 = 0@128, v9_1 = tmp_to_use_3, tmp1_2 = 0@128, tmp1_3 = 0@128, low57_1 = tmp_to_use_p_1, v27_1 = low57_1, v42_1 = tmp_to_use_p_2, v45_1 = tmp_to_use_p_3, v48_1 = tmp_to_use_p_4, v58_1 = tmp_to_use_8, v59_1 = tmp_to_use_9, v60_1 = tmp_to_use_10, v61_1 = tmp_to_use_11, v62_1 = tmp_to_use_12, v63_1 = tmp_to_use_13, v64_1 = tmp_to_use_14, v65_1 = tmp_to_use_15, v66_1 = tmp_to_use_16, v67_1 = tmp_to_use_17, tmp1_4 = 0@128, tmp1_5 = 0@128, tmp1_6 = 0@128, tmp1_7 = 0@128, tmp1_8 = 0@128, tmp1_9 = 0@128, tmp1_10 = 0@128, tmp1_11 = 0@128, tmp1_12 = 0@128, v1_4 = tmp_to_use_18, v7_3 = tmp_to_use_19, tmp1_13 = 0@128, v9_3 = tmp_to_use_20, tmp1_14 = 0@128, tmp1_15 = 0@128, low57_2 = tmp_to_use_p_5, v27_3 = low57_2, v42_3 = tmp_to_use_p_6, v45_3 = tmp_to_use_p_7, v48_3 = tmp_to_use_p_8, v58_3 = tmp_to_use_25, v59_3 = tmp_to_use_26, v60_3 = tmp_to_use_27, v61_3 = tmp_to_use_28, v62_3 = tmp_to_use_29, v63_3 = tmp_to_use_30, v64_3 = tmp_to_use_31, v65_3 = tmp_to_use_32, v66_3 = tmp_to_use_33, v67_2 = tmp_to_use_34, tmp1_16 = 0@128, tmp1_17 = 0@128, tmp1_18 = 0@128, tmp1_19 = 0@128, tmp1_20 = 0@128, tmp1_21 = 0@128, tmp1_22 = 0@128, tmp1_23 = 0@128, tmp1_24 = 0@128, v1_7 = tmp_to_use_35, v7_5 = tmp_to_use_36, tmp1_25 = 0@128, v9_5 = tmp_to_use_37, tmp1_26 = 0@128, tmp1_27 = 0@128, low57_3 = tmp_to_use_p_9, v27_5 = low57_3, v42_5 = tmp_to_use_p_10, v45_5 = tmp_to_use_p_11, v48_5 = tmp_to_use_p_12, v1_8 = tmp_to_use_42, v7_6 = tmp_to_use_43, tmp1_28 = 0@128, v9_6 = tmp_to_use_44, tmp1_29 = 0@128, tmp1_30 = 0@128, low57_4 = tmp_to_use_p_13, v27_6 = low57_4, v42_6 = tmp_to_use_p_14, v45_6 = tmp_to_use_p_15, v48_6 = tmp_to_use_p_16, v85_1 = tmp_to_use_49, v86_1 = tmp_to_use_50, v87_1 = tmp_to_use_51, v88_1 = tmp_to_use_52, v89_1 = tmp_to_use_53, v90_1 = tmp_to_use_54, v91_1 = tmp_to_use_55, v92_1 = tmp_to_use_56, v93_1 = tmp_to_use_57, v94_1 = tmp_to_use_58, v95_1 = tmp_to_use_59, v96_1 = tmp_to_use_60, v97_1 = tmp_to_use_61, v98_1 = tmp_to_use_62, v99_1 = tmp_to_use_63, v100_1 = tmp_to_use_64, tmp1_31 = 0@128, tmp1_32 = 0@128, tmp1_33 = 0@128, tmp1_34 = 0@128, tmp1_35 = 0@128, tmp1_36 = 0@128, tmp1_37 = 0@128, tmp1_38 = 0@128, tmp1_39 = 0@128, v1_11 = tmp_to_use_65, v7_8 = tmp_to_use_66, tmp1_40 = 0@128, v9_8 = tmp_to_use_67, tmp1_41 = 0@128, tmp1_42 = 0@128, low57_5 = tmp_to_use_p_17, v27_8 = low57_5, v42_9 = tmp_to_use_p_18, v45_9 = tmp_to_use_p_19, v48_9 = tmp_to_use_p_20, v1_12 = tmp_to_use_72, v7_9 = tmp_to_use_73, tmp1_43 = 0@128, v9_9 = tmp_to_use_74, tmp1_44 = 0@128, tmp1_45 = 0@128, low57_6 = tmp_to_use_p_21, v27_9 = low57_6, v42_10 = tmp_to_use_p_22, v45_10 = tmp_to_use_p_23, v48_10 = tmp_to_use_p_24, v85_2 = tmp_to_use_79, v86_2 = tmp_to_use_80, v87_2 = tmp_to_use_81, v88_2 = tmp_to_use_82, v89_2 = tmp_to_use_83, v90_2 = tmp_to_use_84, v91_2 = tmp_to_use_85, v92_2 = tmp_to_use_86, v93_2 = tmp_to_use_87, v94_2 = tmp_to_use_88, v95_2 = tmp_to_use_89, v96_2 = tmp_to_use_90, v97_2 = tmp_to_use_91, v98_2 = tmp_to_use_92, v99_2 = tmp_to_use_93, v100_2 = tmp_to_use_94, tmp1_46 = 0@128, tmp1_47 = 0@128, tmp1_48 = 0@128, tmp1_49 = 0@128, tmp1_50 = 0@128, tmp1_51 = 0@128, tmp1_52 = 0@128, tmp1_53 = 0@128, tmp1_54 = 0@128, v1_15 = tmp_to_use_95, v7_11 = tmp_to_use_96, tmp1_55 = 0@128, v9_11 = tmp_to_use_97, tmp1_56 = 0@128, tmp1_57 = 0@128, low57_7 = tmp_to_use_p_25, v27_11 = low57_7, v42_13 = tmp_to_use_p_26, v45_13 = tmp_to_use_p_27, v48_13 = tmp_to_use_p_28, v58_7 = tmp_to_use_102, v59_7 = tmp_to_use_103, v60_7 = tmp_to_use_104, v61_7 = tmp_to_use_105, v62_7 = tmp_to_use_106, v63_7 = tmp_to_use_107, v64_7 = tmp_to_use_108, v65_7 = tmp_to_use_109, v66_7 = tmp_to_use_110, v67_3 = tmp_to_use_111, tmp1_58 = 0@128, tmp1_59 = 0@128, tmp1_60 = 0@128, tmp1_61 = 0@128, tmp1_62 = 0@128, tmp1_63 = 0@128, tmp1_64 = 0@128, tmp1_65 = 0@128, tmp1_66 = 0@128, v1_18 = tmp_to_use_112, v7_13 = tmp_to_use_113, tmp1_67 = 0@128, v9_13 = tmp_to_use_114, tmp1_68 = 0@128, tmp1_69 = 0@128, low57_8 = tmp_to_use_p_29, v27_13 = low57_8, v42_15 = tmp_to_use_p_30, v45_15 = tmp_to_use_p_31, v48_15 = tmp_to_use_p_32, v58_9 = tmp_to_use_119, v59_9 = tmp_to_use_120, v60_9 = tmp_to_use_121, v61_9 = tmp_to_use_122, v62_9 = tmp_to_use_123, v63_9 = tmp_to_use_124, v64_9 = tmp_to_use_125, v65_9 = tmp_to_use_126, v66_9 = tmp_to_use_127, v67_4 = tmp_to_use_128, tmp1_70 = 0@128, tmp1_71 = 0@128, tmp1_72 = 0@128, tmp1_73 = 0@128, tmp1_74 = 0@128, tmp1_75 = 0@128, tmp1_76 = 0@128, tmp1_77 = 0@128, tmp1_78 = 0@128, v1_21 = tmp_to_use_129, v7_15 = tmp_to_use_130, tmp1_79 = 0@128, v9_15 = tmp_to_use_131, tmp1_80 = 0@128, tmp1_81 = 0@128, low57_9 = tmp_to_use_p_33, v27_15 = low57_9, v42_17 = tmp_to_use_p_34, v45_17 = tmp_to_use_p_35, v48_18 = tmp_to_use_p_36, v85_4 = tmp_to_use_136, v86_4 = tmp_to_use_137, v87_4 = tmp_to_use_138, v88_4 = tmp_to_use_139, v89_4 = tmp_to_use_140, v90_4 = tmp_to_use_141, v91_4 = tmp_to_use_142, v92_4 = tmp_to_use_143, v93_4 = tmp_to_use_144, v94_4 = tmp_to_use_145, v95_4 = tmp_to_use_146, v96_4 = tmp_to_use_147, v97_4 = tmp_to_use_148, v98_4 = tmp_to_use_149, v99_4 = tmp_to_use_150, v100_4 = tmp_to_use_151, v58_12 = tmp_to_use_152, v59_12 = tmp_to_use_153, v60_12 = tmp_to_use_154, v61_12 = tmp_to_use_155, v62_12 = tmp_to_use_156, v63_12 = tmp_to_use_157, v64_12 = tmp_to_use_158, v65_12 = tmp_to_use_159, v66_12 = tmp_to_use_160, v67_6 = tmp_to_use_161, tmp1_82 = 0@128, tmp1_83 = 0@128, tmp1_84 = 0@128, tmp1_85 = 0@128, tmp1_86 = 0@128, tmp1_87 = 0@128, tmp1_88 = 0@128, tmp1_89 = 0@128, tmp1_90 = 0@128] }
