proc main(uint128 a0_0, uint128 a1_0, uint128 a2_0, uint128 a3_0, uint128 a4_0, uint128 a5_0, uint128 a6_0, uint128 a7_0, uint128 a8_0) =
{ true && true }
cast v2_1@uint64 a0_0;
split tmpv3_1 v3_1 v2_1 58;
cast v5_1@uint64 a1_0;
split tmpv6_1 v6_1 v5_1 58;
cast v8_1@uint64 a2_0;
split tmpv9_1 v9_1 v8_1 58;
cast v11_1@uint64 a3_0;
split tmpv12_1 v12_1 v11_1 58;
cast v14_1@uint64 a4_0;
split tmpv15_1 v15_1 v14_1 58;
cast v17_1@uint64 a5_0;
split tmpv18_1 v18_1 v17_1 58;
cast v20_1@uint64 a6_0;
split tmpv21_1 v21_1 v20_1 58;
cast v23_1@uint64 a7_0;
split tmpv24_1 v24_1 v23_1 58;
cast v26_1@uint64 a8_0;
split tmpv27_1 v27_1 v26_1 58;
split v28_1 tmp_to_use_1 v2_1 58;
assume v28_1 = tmpv3_1 && true;
assume v3_1 = tmp_to_use_1 && true;
add v29_1 v6_1 v28_1;
split v30_1 tmp_to_use_2 a0_0 64;
vpc tmp_to_use_p_1@uint64 tmp_to_use_2;
assume tmp_to_use_2 = v2_1 && true;
vpc v31_1@uint64 v30_1;
split tmp1_1 tmp2_1 v31_1 58;
shl v32_1 tmp2_1 6;
split tmp_1 v33_1 v32_1 58;
add v34_1 v29_1 v33_1;
split v35_1 tmp_to_use_3 v31_1 52;
assume tmp_to_use_3 * 64 = v33_1 && true;
split v37_1 tmp_to_use_4 v5_1 58;
assume v37_1 = tmpv6_1 && true;
assume v6_1 = tmp_to_use_4 && true;
add v132_1 v9_1 v37_1;
add v38_1 v35_1 v132_1;
split v39_1 tmp_to_use_5 a1_0 64;
vpc tmp_to_use_p_2@uint64 tmp_to_use_5;
assume tmp_to_use_5 = v5_1 && true;
vpc v40_1@uint64 v39_1;
split tmp1_2 tmp2_2 v40_1 58;
shl v41_1 tmp2_2 6;
split tmp_2 v42_1 v41_1 58;
add v43_1 v38_1 v42_1;
split v44_1 tmp_to_use_6 v40_1 52;
assume tmp_to_use_6 * 64 = v42_1 && true;
split v46_1 tmp_to_use_7 v8_1 58;
assume v46_1 = tmpv9_1 && true;
assume v9_1 = tmp_to_use_7 && true;
add v131_1 v12_1 v46_1;
add v47_1 v44_1 v131_1;
split v48_1 tmp_to_use_8 a2_0 64;
vpc tmp_to_use_p_3@uint64 tmp_to_use_8;
assume tmp_to_use_8 = v8_1 && true;
vpc v49_1@uint64 v48_1;
split tmp1_3 tmp2_3 v49_1 58;
shl v50_1 tmp2_3 6;
split tmp_3 v51_1 v50_1 58;
add v52_1 v47_1 v51_1;
split v53_1 tmp_to_use_9 v49_1 52;
assume tmp_to_use_9 * 64 = v51_1 && true;
split v55_1 tmp_to_use_10 v11_1 58;
assume v55_1 = tmpv12_1 && true;
assume v12_1 = tmp_to_use_10 && true;
add v130_1 v15_1 v55_1;
add v56_1 v53_1 v130_1;
split v57_1 tmp_to_use_11 a3_0 64;
vpc tmp_to_use_p_4@uint64 tmp_to_use_11;
assume tmp_to_use_11 = v11_1 && true;
vpc v58_1@uint64 v57_1;
split tmp1_4 tmp2_4 v58_1 58;
shl v59_1 tmp2_4 6;
split tmp_4 v60_1 v59_1 58;
add v61_1 v56_1 v60_1;
split v62_1 tmp_to_use_12 v58_1 52;
assume tmp_to_use_12 * 64 = v60_1 && true;
split v64_1 tmp_to_use_13 v14_1 58;
assume v64_1 = tmpv15_1 && true;
assume v15_1 = tmp_to_use_13 && true;
add v129_1 v18_1 v64_1;
add v65_1 v62_1 v129_1;
split v66_1 tmp_to_use_14 a4_0 64;
vpc tmp_to_use_p_5@uint64 tmp_to_use_14;
assume tmp_to_use_14 = v14_1 && true;
vpc v67_1@uint64 v66_1;
split tmp1_5 tmp2_5 v67_1 58;
shl v68_1 tmp2_5 6;
split tmp_5 v69_1 v68_1 58;
add v70_1 v65_1 v69_1;
split v71_1 tmp_to_use_15 v67_1 52;
assume tmp_to_use_15 * 64 = v69_1 && true;
split v73_1 tmp_to_use_16 v17_1 58;
assume v73_1 = tmpv18_1 && true;
assume v18_1 = tmp_to_use_16 && true;
add v128_1 v21_1 v73_1;
add v74_1 v71_1 v128_1;
split v75_1 tmp_to_use_17 a5_0 64;
vpc tmp_to_use_p_6@uint64 tmp_to_use_17;
assume tmp_to_use_17 = v17_1 && true;
vpc v76_1@uint64 v75_1;
split tmp1_6 tmp2_6 v76_1 58;
shl v77_1 tmp2_6 6;
split tmp_6 v78_1 v77_1 58;
add v79_1 v74_1 v78_1;
split v80_1 tmp_to_use_18 v76_1 52;
assume tmp_to_use_18 * 64 = v78_1 && true;
split v82_1 tmp_to_use_19 v20_1 58;
assume v82_1 = tmpv21_1 && true;
assume v21_1 = tmp_to_use_19 && true;
add v126_1 v24_1 v82_1;
add v83_1 v80_1 v126_1;
split v84_1 tmp_to_use_20 a6_0 64;
vpc tmp_to_use_p_7@uint64 tmp_to_use_20;
assume tmp_to_use_20 = v20_1 && true;
vpc v85_1@uint64 v84_1;
split tmp1_7 tmp2_7 v85_1 58;
shl v86_1 tmp2_7 6;
split tmp_7 v87_1 v86_1 58;
add v88_1 v83_1 v87_1;
split v89_1 tmp_to_use_21 v85_1 52;
assume tmp_to_use_21 * 64 = v87_1 && true;
split v91_1 tmp_to_use_22 v23_1 58;
assume v91_1 = tmpv24_1 && true;
assume v24_1 = tmp_to_use_22 && true;
add v127_1 v27_1 v91_1;
add v92_1 v89_1 v127_1;
split v93_1 tmp_to_use_23 a7_0 64;
vpc tmp_to_use_p_8@uint64 tmp_to_use_23;
assume tmp_to_use_23 = v23_1 && true;
vpc v94_1@uint64 v93_1;
split tmp1_8 tmp2_8 v94_1 58;
shl v95_1 tmp2_8 6;
split tmp_8 v96_1 v95_1 58;
add v97_1 v92_1 v96_1;
split overflow1118_1 tmp_to_use_24 v94_1 52;
assume tmp_to_use_24 * 64 = v96_1 && true;
split v98_1 tmp_to_use_25 v26_1 58;
assume v98_1 = tmpv27_1 && true;
assume v27_1 = tmp_to_use_25 && true;
add overflow1119_1 v98_1 overflow1118_1;
split v99_1 tmp_to_use_26 a8_0 64;
vpc tmp_to_use_p_9@uint64 tmp_to_use_26;
assume tmp_to_use_26 = v26_1 && true;
vpc v100_1@uint64 v99_1;
split tmp1_9 tmp2_9 v100_1 58;
shl v101_1 tmp2_9 6;
split tmp_9 v102_1 v101_1 58;
add overflow1120_1 v102_1 overflow1119_1;
split overflow2121_1 tmp_to_use_27 v100_1 52;
assume tmp_to_use_27 * 64 = v102_1 && true;
split tmp1_10 tmp2_10 overflow1120_1 63;
shl overflow1122_1 tmp2_10 1;
assume tmp1_10 = 0 && true;
split tmp1_11 tmp2_11 overflow2121_1 63;
shl overflow2123_1 tmp2_11 1;
assume tmp1_11 = 0 && true;
add v103_1 v3_1 overflow1122_1;
add v104_1 v34_1 overflow2123_1;
split v105_1 tmp_to_use_28 v103_1 58;
add v106_1 v104_1 v105_1;
and v107_1@uint64 v103_1 288230376151711743@uint64;
assume tmp_to_use_28 = v107_1 && true;
{ v107_1 + (v106_1 * 288230376151711744) + (v43_1 * 83076749736557242056487941267521536) + (v52_1 * 23945242826029513411849172299223580994042798784118784) + (v61_1 * 6901746346790563787434755862277025452451108972170386555162524223799296) + (v70_1 * 1989292945639146568621528992587283360401824603189390869761855907572637988050133502132224) + (v79_1 * 573374653997517877902705223825521735199141247292070280934397209846730719022121202017504638277531421638656) + (v88_1 * 165263992197562149737978827008192759957101170741070304821162198818601447809077836456297302609928821211897803006255839576064) + (v97_1 * 47634102635436893179040485073748265163400240214004076398607741693502376385799646303105256699577209032590132615988260237052123652332890095616) = a0_0 + (a1_0 * 288230376151711744) + (a2_0 * 83076749736557242056487941267521536) + (a3_0 * 23945242826029513411849172299223580994042798784118784) + (a4_0 * 6901746346790563787434755862277025452451108972170386555162524223799296) + (a5_0 * 1989292945639146568621528992587283360401824603189390869761855907572637988050133502132224) + (a6_0 * 573374653997517877902705223825521735199141247292070280934397209846730719022121202017504638277531421638656) + (a7_0 * 165263992197562149737978827008192759957101170741070304821162198818601447809077836456297302609928821211897803006255839576064) + (a8_0 * 47634102635436893179040485073748265163400240214004076398607741693502376385799646303105256699577209032590132615988260237052123652332890095616) (mod 6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057152 - 1) && and [v28_1 = tmpv3_1, v3_1 = tmp_to_use_1, tmp_to_use_p_1 = v2_1, mul (tmp_to_use_3) (64@64) = v33_1, v37_1 = tmpv6_1, v6_1 = tmp_to_use_4, tmp_to_use_p_2 = v5_1, mul (tmp_to_use_6) (64@64) = v42_1, v46_1 = tmpv9_1, v9_1 = tmp_to_use_7, tmp_to_use_p_3 = v8_1, mul (tmp_to_use_9) (64@64) = v51_1, v55_1 = tmpv12_1, v12_1 = tmp_to_use_10, tmp_to_use_p_4 = v11_1, mul (tmp_to_use_12) (64@64) = v60_1, v64_1 = tmpv15_1, v15_1 = tmp_to_use_13, tmp_to_use_p_5 = v14_1, mul (tmp_to_use_15) (64@64) = v69_1, v73_1 = tmpv18_1, v18_1 = tmp_to_use_16, tmp_to_use_p_6 = v17_1, mul (tmp_to_use_18) (64@64) = v78_1, v82_1 = tmpv21_1, v21_1 = tmp_to_use_19, tmp_to_use_p_7 = v20_1, mul (tmp_to_use_21) (64@64) = v87_1, v91_1 = tmpv24_1, v24_1 = tmp_to_use_22, tmp_to_use_p_8 = v23_1, mul (tmp_to_use_24) (64@64) = v96_1, v98_1 = tmpv27_1, v27_1 = tmp_to_use_25, tmp_to_use_p_9 = v26_1, mul (tmp_to_use_27) (64@64) = v102_1, tmp1_10 = 0@64, tmp1_11 = 0@64, tmp_to_use_28 = v107_1, v107_1 <u 288230376151711744@64, v106_1 <u 576460752303439872@64, v43_1 <u 576460752303439872@64, v52_1 <u 576460752303439872@64, v61_1 <u 576460752303439872@64, v70_1 <u 576460752303439872@64, v79_1 <u 576460752303439872@64, v88_1 <u 576460752303439872@64, v97_1 <u 576460752303439872@64] }