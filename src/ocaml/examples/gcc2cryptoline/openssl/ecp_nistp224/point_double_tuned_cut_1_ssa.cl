(*
Verified the first cut on frege.
Parsing Cryptoline file:                [OK]            0.002249 seconds
Finding polynomial coefficients         [OK]            0.051014 seconds
Finding polynomial coefficients         [OK]            0.045286 seconds
Finding polynomial coefficients         [OK]            0.049262 seconds
Finding polynomial coefficients         [OK]            0.056107 seconds
Verification result:                    [OK]            0.454262 seconds
*)
proc main(uint64 x0_0, uint64 x1_0, uint64 x2_0, uint64 x3_0, uint64 y0_0, uint64 y1_0, uint64 y2_0, uint64 y3_0, uint64 z0_0, uint64 z1_0, uint64 z2_0, uint64 z3_0) =
{ true && and [x0_0 <u 288230376151711744@64, x1_0 <u 288230376151711744@64, x2_0 <u 288230376151711744@64, x3_0 <u 288230376151711744@64, y0_0 <u 288230376151711744@64, y1_0 <u 288230376151711744@64, y2_0 <u 288230376151711744@64, y3_0 <u 288230376151711744@64, z0_0 <u 288230376151711744@64, z1_0 <u 288230376151711744@64, z2_0 <u 288230376151711744@64, z3_0 <u 288230376151711744@64] }
mov x_in2_0_1 x0_0;
mov x_in2_8_1 x1_0;
mov x_in2_16_1 x2_0;
mov x_in2_24_1 x3_0;
mov y_in6_0_1 y0_0;
mov y_in6_8_1 y1_0;
mov y_in6_16_1 y2_0;
mov y_in6_24_1 y3_0;
mov z_in3_0_1 z0_0;
mov z_in3_8_1 z1_0;
mov z_in3_16_1 z2_0;
mov z_in3_24_1 z3_0;
mov v162_1 x_in2_0_1;
mov v163_1 x_in2_8_1;
mov v164_1 x_in2_16_1;
mov v165_1 x_in2_24_1;
mov v472_1 z_in3_0_1;
mul tmp0473_1 v472_1 2@uint64;
mov v474_1 z_in3_8_1;
mul tmp1475_1 v474_1 2@uint64;
mov v476_1 z_in3_16_1;
mul tmp2477_1 v476_1 2@uint64;
mulj v479_1 v472_1 v472_1;
mov tmp_0_1 v479_1;
mulj v481_1 v472_1 tmp1475_1;
mov tmp_16_1 v481_1;
mulj v483_1 v472_1 tmp2477_1;
mulj v485_1 v474_1 v474_1;
add v486_1 v483_1 v485_1;
mov tmp_32_1 v486_1;
mov v487_1 z_in3_24_1;
mulj v490_1 v487_1 tmp0473_1;
mulj v491_1 tmp2477_1 v474_1;
add v492_1 v490_1 v491_1;
mov tmp_48_1 v492_1;
mulj v493_1 tmp1475_1 v487_1;
mulj v495_1 v476_1 v476_1;
add v496_1 v493_1 v495_1;
mov tmp_64_1 v496_1;
mulj v497_1 tmp2477_1 v487_1;
mov tmp_80_1 v497_1;
mulj v498_1 v487_1 v487_1;
mov tmp_96_1 v498_1;
mov in54_0_1 tmp_0_1;
mov in54_16_1 tmp_16_1;
mov in54_32_1 tmp_32_1;
mov in54_48_1 tmp_48_1;
mov in54_64_1 tmp_64_1;
mov in54_80_1 tmp_80_1;
mov in54_96_1 tmp_96_1;
mov v1_1 in54_0_1;
mov value_lo_1 32768@uint64;
mov value_hi_1 9223372036854775808@uint64;
join value_1 value_hi_1 value_lo_1;
add v2_1 v1_1 value_1;
mov v3_1 in54_16_1;
mov value_lo_2 18410715276690587648@uint64;
mov value_hi_2 9223372036854775679@uint64;
join value_2 value_hi_2 value_lo_2;
add v4_1 v3_1 value_2;
mov v5_1 in54_32_1;
mov value_lo_3 0@uint64;
mov value_hi_3 9223372036854775680@uint64;
join value_3 value_hi_3 value_lo_3;
add v6_1 v5_1 value_3;
mov v7_1 in54_48_1;
mov v8_1 in54_64_1;
mov v9_1 in54_96_1;
split v10_1 tmp_to_use_1 v9_1 16;
add v11_1 v8_1 v10_1;
split tmp1_1 tmp2_1 v9_1 88;
shl v12_1 tmp2_1 40;
mov value_lo_4 72056494526300160@uint64;
mov value_hi_4 0@uint64;
join value_4 value_hi_4 value_lo_4;
and v13_1@uint128 v12_1 value_4;
assume v13_1 = tmp_to_use_1 * 1099511627776 && true;
sub v15_1 v6_1 v9_1;
mov v16_1 in54_80_1;
split v17_1 tmp_to_use_2 v16_1 16;
add v64_1 v7_1 v17_1;
add v18_1 v13_1 v64_1;
split tmp1_2 tmp2_2 v16_1 88;
shl v19_1 tmp2_2 40;
mov value_lo_5 72056494526300160@uint64;
mov value_hi_5 0@uint64;
join value_5 value_hi_5 value_lo_5;
and v20_1@uint128 v19_1 value_5;
assume v20_1 = tmp_to_use_2 * 1099511627776 && true;
add v21_1 v15_1 v20_1;
sub v22_1 v4_1 v16_1;
split v23_1 tmp_to_use_3 v11_1 16;
add v24_1 v21_1 v23_1;
split tmp1_3 tmp2_3 v11_1 88;
shl v25_1 tmp2_3 40;
mov value_lo_6 72056494526300160@uint64;
mov value_hi_6 0@uint64;
join value_6 value_hi_6 value_lo_6;
and v26_1@uint128 v25_1 value_6;
assume v26_1 = tmp_to_use_3 * 1099511627776 && true;
add v27_1 v22_1 v26_1;
sub v28_1 v2_1 v11_1;
split v29_1 tmp_to_use_4 v24_1 56;
add v30_1 v18_1 v29_1;
mov value_lo_7 72057594037927935@uint64;
mov value_hi_7 0@uint64;
join value_7 value_hi_7 value_lo_7;
and v31_1@uint128 v24_1 value_7;
assume v31_1 = tmp_to_use_4 && true;
split v32_1 tmp_to_use_5 v30_1 56;
mov value_lo_8 72057594037927935@uint64;
mov value_hi_8 0@uint64;
join value_8 value_hi_8 value_lo_8;
and v33_1@uint128 v30_1 value_8;
assume v33_1 = tmp_to_use_5 && true;
split v34_1 tmp_to_use_6 v30_1 72;
add v35_1 v31_1 v34_1;
split tmp1_4 tmp2_4 v32_1 88;
shl v36_1 tmp2_4 40;
mov value_lo_9 72056494526300160@uint64;
mov value_hi_9 0@uint64;
join value_9 value_hi_9 value_lo_9;
and v37_1@uint128 v36_1 value_9;
assume v37_1 + (v34_1 * 1099511627776 * 65536) = v32_1 * 1099511627776 && true;
add v38_1 v27_1 v37_1;
sub v39_1 v28_1 v32_1;
split v40_1 tmp_to_use_7 v39_1 56;
add v41_1 v38_1 v40_1;
cast v42_1@uint64 v39_1;
and v43_1@uint64 v42_1 72057594037927935@uint64;
vpc tmp_to_use_p_1@uint64 tmp_to_use_7;
assume v43_1 = tmp_to_use_7 && true;
mov out55_0_1 v43_1;
split v44_1 tmp_to_use_8 v41_1 56;
add v45_1 v35_1 v44_1;
cast v46_1@uint64 v41_1;
and v47_1@uint64 v46_1 72057594037927935@uint64;
vpc tmp_to_use_p_2@uint64 tmp_to_use_8;
assume v47_1 = tmp_to_use_8 && true;
mov out55_8_1 v47_1;
split v48_1 tmp_to_use_9 v45_1 56;
add v49_1 v33_1 v48_1;
cast v50_1@uint64 v45_1;
and v51_1@uint64 v50_1 72057594037927935@uint64;
vpc tmp_to_use_p_3@uint64 tmp_to_use_9;
assume v51_1 = tmp_to_use_9 && true;
mov out55_16_1 v51_1;
vpc v52_1@uint64 v49_1;
mov out55_24_1 v52_1;
mov delta_0_1 out55_0_1;
mov delta_8_1 out55_8_1;
mov delta_16_1 out55_16_1;
mov delta_24_1 out55_24_1;
mov delta0_0_1 delta_0_1;
mov delta0_1_1 delta_8_1;
mov delta0_2_1 delta_16_1;
mov delta0_3_1 delta_24_1;
mov v445_1 y_in6_0_1;
mul tmp0446_1 v445_1 2@uint64;
mov v447_1 y_in6_8_1;
mul tmp1448_1 v447_1 2@uint64;
mov v449_1 y_in6_16_1;
mul tmp2450_1 v449_1 2@uint64;
mulj v452_1 v445_1 v445_1;
mov tmp_0_2 v452_1;
mulj v454_1 v445_1 tmp1448_1;
mov tmp_16_2 v454_1;
mulj v456_1 v445_1 tmp2450_1;
mulj v458_1 v447_1 v447_1;
add v459_1 v456_1 v458_1;
mov tmp_32_2 v459_1;
mov v460_1 y_in6_24_1;
mulj v463_1 v460_1 tmp0446_1;
mulj v464_1 tmp2450_1 v447_1;
add v465_1 v463_1 v464_1;
mov tmp_48_2 v465_1;
mulj v466_1 tmp1448_1 v460_1;
mulj v468_1 v449_1 v449_1;
add v469_1 v466_1 v468_1;
mov tmp_64_2 v469_1;
mulj v470_1 tmp2450_1 v460_1;
mov tmp_80_2 v470_1;
mulj v471_1 v460_1 v460_1;
mov tmp_96_2 v471_1;
mov in54_0_2 tmp_0_2;
mov in54_16_2 tmp_16_2;
mov in54_32_2 tmp_32_2;
mov in54_48_2 tmp_48_2;
mov in54_64_2 tmp_64_2;
mov in54_80_2 tmp_80_2;
mov in54_96_2 tmp_96_2;
mov v1_2 in54_0_2;
mov value_lo_10 32768@uint64;
mov value_hi_10 9223372036854775808@uint64;
join value_10 value_hi_10 value_lo_10;
add v2_2 v1_2 value_10;
mov v3_2 in54_16_2;
mov value_lo_11 18410715276690587648@uint64;
mov value_hi_11 9223372036854775679@uint64;
join value_11 value_hi_11 value_lo_11;
add v4_2 v3_2 value_11;
mov v5_2 in54_32_2;
mov value_lo_12 0@uint64;
mov value_hi_12 9223372036854775680@uint64;
join value_12 value_hi_12 value_lo_12;
add v6_2 v5_2 value_12;
mov v7_2 in54_48_2;
mov v8_2 in54_64_2;
mov v9_2 in54_96_2;
split v10_2 tmp_to_use_10 v9_2 16;
add v11_2 v8_2 v10_2;
split tmp1_5 tmp2_5 v9_2 88;
shl v12_2 tmp2_5 40;
mov value_lo_13 72056494526300160@uint64;
mov value_hi_13 0@uint64;
join value_13 value_hi_13 value_lo_13;
and v13_2@uint128 v12_2 value_13;
assume v13_2 = tmp_to_use_10 * 1099511627776 && true;
sub v15_2 v6_2 v9_2;
mov v16_2 in54_80_2;
split v17_2 tmp_to_use_11 v16_2 16;
add v64_2 v7_2 v17_2;
add v18_2 v13_2 v64_2;
split tmp1_6 tmp2_6 v16_2 88;
shl v19_2 tmp2_6 40;
mov value_lo_14 72056494526300160@uint64;
mov value_hi_14 0@uint64;
join value_14 value_hi_14 value_lo_14;
and v20_2@uint128 v19_2 value_14;
assume v20_2 = tmp_to_use_11 * 1099511627776 && true;
add v21_2 v15_2 v20_2;
sub v22_2 v4_2 v16_2;
split v23_2 tmp_to_use_12 v11_2 16;
add v24_2 v21_2 v23_2;
split tmp1_7 tmp2_7 v11_2 88;
shl v25_2 tmp2_7 40;
mov value_lo_15 72056494526300160@uint64;
mov value_hi_15 0@uint64;
join value_15 value_hi_15 value_lo_15;
and v26_2@uint128 v25_2 value_15;
assume v26_2 = tmp_to_use_12 * 1099511627776 && true;
add v27_2 v22_2 v26_2;
sub v28_2 v2_2 v11_2;
split v29_2 tmp_to_use_13 v24_2 56;
add v30_2 v18_2 v29_2;
mov value_lo_16 72057594037927935@uint64;
mov value_hi_16 0@uint64;
join value_16 value_hi_16 value_lo_16;
and v31_2@uint128 v24_2 value_16;
assume v31_2 = tmp_to_use_13 && true;
split v32_2 tmp_to_use_14 v30_2 56;
mov value_lo_17 72057594037927935@uint64;
mov value_hi_17 0@uint64;
join value_17 value_hi_17 value_lo_17;
and v33_2@uint128 v30_2 value_17;
assume v33_2 = tmp_to_use_14 && true;
split v34_2 tmp_to_use_15 v30_2 72;
add v35_2 v31_2 v34_2;
split tmp1_8 tmp2_8 v32_2 88;
shl v36_2 tmp2_8 40;
mov value_lo_18 72056494526300160@uint64;
mov value_hi_18 0@uint64;
join value_18 value_hi_18 value_lo_18;
and v37_2@uint128 v36_2 value_18;
assume v37_2 + (v34_2 * 1099511627776 * 65536) = v32_2 * 1099511627776 && true;
add v38_2 v27_2 v37_2;
sub v39_2 v28_2 v32_2;
split v40_2 tmp_to_use_16 v39_2 56;
add v41_2 v38_2 v40_2;
cast v42_2@uint64 v39_2;
and v43_2@uint64 v42_2 72057594037927935@uint64;
vpc tmp_to_use_p_4@uint64 tmp_to_use_16;
assume v43_2 = tmp_to_use_16 && true;
mov out55_0_2 v43_2;
split v44_2 tmp_to_use_17 v41_2 56;
add v45_2 v35_2 v44_2;
cast v46_2@uint64 v41_2;
and v47_2@uint64 v46_2 72057594037927935@uint64;
vpc tmp_to_use_p_5@uint64 tmp_to_use_17;
assume v47_2 = tmp_to_use_17 && true;
mov out55_8_2 v47_2;
split v48_2 tmp_to_use_18 v45_2 56;
add v49_2 v33_2 v48_2;
cast v50_2@uint64 v45_2;
and v51_2@uint64 v50_2 72057594037927935@uint64;
vpc tmp_to_use_p_6@uint64 tmp_to_use_18;
assume v51_2 = tmp_to_use_18 && true;
mov out55_16_2 v51_2;
vpc v52_2@uint64 v49_2;
mov out55_24_2 v52_2;
mov gamma_0_1 out55_0_2;
mov gamma_8_1 out55_8_2;
mov gamma_16_1 out55_16_2;
mov gamma_24_1 out55_24_2;
mov gamma0_0_1 gamma_0_1;
mov gamma0_1_1 gamma_8_1;
mov gamma0_2_1 gamma_16_1;
mov gamma0_3_1 gamma_24_1;
mov v404_1 x_in2_0_1;
mov v406_1 gamma_0_1;
mulj v408_1 v404_1 v406_1;
mov tmp_0_3 v408_1;
mov v409_1 gamma_8_1;
mulj v411_1 v404_1 v409_1;
mov v412_1 x_in2_8_1;
mulj v414_1 v406_1 v412_1;
add v415_1 v411_1 v414_1;
mov tmp_16_3 v415_1;
mov v416_1 gamma_16_1;
mulj v418_1 v404_1 v416_1;
mulj v419_1 v409_1 v412_1;
add v420_1 v418_1 v419_1;
mov v421_1 x_in2_16_1;
mulj v423_1 v406_1 v421_1;
add v424_1 v420_1 v423_1;
mov tmp_32_3 v424_1;
mov v425_1 gamma_24_1;
mulj v427_1 v404_1 v425_1;
mulj v428_1 v412_1 v416_1;
add v211_1 v427_1 v428_1;
mov v430_1 x_in2_24_1;
mulj v432_1 v406_1 v430_1;
mulj v433_1 v409_1 v421_1;
add v212_1 v211_1 v432_1;
add v435_1 v212_1 v433_1;
mov tmp_48_3 v435_1;
mulj v436_1 v412_1 v425_1;
mulj v437_1 v416_1 v421_1;
add v438_1 v436_1 v437_1;
mulj v439_1 v409_1 v430_1;
add v440_1 v438_1 v439_1;
mov tmp_64_3 v440_1;
mulj v441_1 v421_1 v425_1;
mulj v442_1 v416_1 v430_1;
add v443_1 v441_1 v442_1;
mov tmp_80_3 v443_1;
mulj v444_1 v425_1 v430_1;
mov tmp_96_3 v444_1;
mov in54_0_3 tmp_0_3;
mov in54_16_3 tmp_16_3;
mov in54_32_3 tmp_32_3;
mov in54_48_3 tmp_48_3;
mov in54_64_3 tmp_64_3;
mov in54_80_3 tmp_80_3;
mov in54_96_3 tmp_96_3;
mov v1_3 in54_0_3;
mov value_lo_19 32768@uint64;
mov value_hi_19 9223372036854775808@uint64;
join value_19 value_hi_19 value_lo_19;
add v2_3 v1_3 value_19;
mov v3_3 in54_16_3;
mov value_lo_20 18410715276690587648@uint64;
mov value_hi_20 9223372036854775679@uint64;
join value_20 value_hi_20 value_lo_20;
add v4_3 v3_3 value_20;
mov v5_3 in54_32_3;
mov value_lo_21 0@uint64;
mov value_hi_21 9223372036854775680@uint64;
join value_21 value_hi_21 value_lo_21;
add v6_3 v5_3 value_21;
mov v7_3 in54_48_3;
mov v8_3 in54_64_3;
mov v9_3 in54_96_3;
split v10_3 tmp_to_use_19 v9_3 16;
add v11_3 v8_3 v10_3;
split tmp1_9 tmp2_9 v9_3 88;
shl v12_3 tmp2_9 40;
mov value_lo_22 72056494526300160@uint64;
mov value_hi_22 0@uint64;
join value_22 value_hi_22 value_lo_22;
and v13_3@uint128 v12_3 value_22;
assume v13_3 = tmp_to_use_19 * 1099511627776 && true;
sub v15_3 v6_3 v9_3;
mov v16_3 in54_80_3;
split v17_3 tmp_to_use_20 v16_3 16;
add v64_3 v7_3 v17_3;
add v18_3 v13_3 v64_3;
split tmp1_10 tmp2_10 v16_3 88;
shl v19_3 tmp2_10 40;
mov value_lo_23 72056494526300160@uint64;
mov value_hi_23 0@uint64;
join value_23 value_hi_23 value_lo_23;
and v20_3@uint128 v19_3 value_23;
assume v20_3 = tmp_to_use_20 * 1099511627776 && true;
add v21_3 v15_3 v20_3;
sub v22_3 v4_3 v16_3;
split v23_3 tmp_to_use_21 v11_3 16;
add v24_3 v21_3 v23_3;
split tmp1_11 tmp2_11 v11_3 88;
shl v25_3 tmp2_11 40;
mov value_lo_24 72056494526300160@uint64;
mov value_hi_24 0@uint64;
join value_24 value_hi_24 value_lo_24;
and v26_3@uint128 v25_3 value_24;
assume v26_3 = tmp_to_use_21 * 1099511627776 && true;
add v27_3 v22_3 v26_3;
sub v28_3 v2_3 v11_3;
split v29_3 tmp_to_use_22 v24_3 56;
add v30_3 v18_3 v29_3;
mov value_lo_25 72057594037927935@uint64;
mov value_hi_25 0@uint64;
join value_25 value_hi_25 value_lo_25;
and v31_3@uint128 v24_3 value_25;
assume v31_3 = tmp_to_use_22 && true;
split v32_3 tmp_to_use_23 v30_3 56;
mov value_lo_26 72057594037927935@uint64;
mov value_hi_26 0@uint64;
join value_26 value_hi_26 value_lo_26;
and v33_3@uint128 v30_3 value_26;
assume v33_3 = tmp_to_use_23 && true;
split v34_3 tmp_to_use_24 v30_3 72;
add v35_3 v31_3 v34_3;
split tmp1_12 tmp2_12 v32_3 88;
shl v36_3 tmp2_12 40;
mov value_lo_27 72056494526300160@uint64;
mov value_hi_27 0@uint64;
join value_27 value_hi_27 value_lo_27;
and v37_3@uint128 v36_3 value_27;
assume v37_3 + (v34_3 * 1099511627776 * 65536) = v32_3 * 1099511627776 && true;
add v38_3 v27_3 v37_3;
sub v39_3 v28_3 v32_3;
split v40_3 tmp_to_use_25 v39_3 56;
add v41_3 v38_3 v40_3;
cast v42_3@uint64 v39_3;
and v43_3@uint64 v42_3 72057594037927935@uint64;
vpc tmp_to_use_p_7@uint64 tmp_to_use_25;
assume v43_3 = tmp_to_use_25 && true;
mov out55_0_3 v43_3;
split v44_3 tmp_to_use_26 v41_3 56;
add v45_3 v35_3 v44_3;
cast v46_3@uint64 v41_3;
and v47_3@uint64 v46_3 72057594037927935@uint64;
vpc tmp_to_use_p_8@uint64 tmp_to_use_26;
assume v47_3 = tmp_to_use_26 && true;
mov out55_8_3 v47_3;
split v48_3 tmp_to_use_27 v45_3 56;
add v49_3 v33_3 v48_3;
cast v50_3@uint64 v45_3;
and v51_3@uint64 v50_3 72057594037927935@uint64;
vpc tmp_to_use_p_9@uint64 tmp_to_use_27;
assume v51_3 = tmp_to_use_27 && true;
mov out55_16_3 v51_3;
vpc v52_3@uint64 v49_3;
mov out55_24_3 v52_3;
mov beta_0_1 out55_0_3;
mov beta_8_1 out55_8_3;
mov beta_16_1 out55_16_3;
mov beta_24_1 out55_24_3;
mov beta0_0_1 beta_0_1;
mov beta0_1_1 beta_8_1;
mov beta0_2_1 beta_16_1;
mov beta0_3_1 beta_24_1;
mov v154_1 delta_0_1;
sub v209_1 288230376151711748@uint64 v154_1;
add v155_1 v162_1 v209_1;
mov v156_1 delta_8_1;
sub v208_1 288225978105200636@uint64 v156_1;
add v157_1 v163_1 v208_1;
mov v158_1 delta_16_1;
sub v207_1 288230376151711740@uint64 v158_1;
add v159_1 v164_1 v207_1;
mov v160_1 delta_24_1;
sub v206_1 288230376151711740@uint64 v160_1;
add v161_1 v165_1 v206_1;
add v139_1 v154_1 v162_1;
add v141_1 v156_1 v163_1;
add v143_1 v158_1 v164_1;
add v145_1 v160_1 v165_1;
mul v134_1 v139_1 3@uint64;
mul v135_1 v141_1 3@uint64;
mul v136_1 v143_1 3@uint64;
mul v137_1 v145_1 3@uint64;
mulj v367_1 v155_1 v134_1;
mov tmp_0_4 v367_1;
mulj v370_1 v155_1 v135_1;
mulj v373_1 v134_1 v157_1;
add v374_1 v370_1 v373_1;
mov tmp_16_4 v374_1;
mulj v377_1 v155_1 v136_1;
mulj v378_1 v135_1 v157_1;
add v379_1 v377_1 v378_1;
mulj v382_1 v134_1 v159_1;
add v383_1 v379_1 v382_1;
mov tmp_32_4 v383_1;
mulj v386_1 v155_1 v137_1;
mulj v387_1 v157_1 v136_1;
add v553_1 v386_1 v387_1;
mulj v391_1 v134_1 v161_1;
mulj v392_1 v135_1 v159_1;
add v554_1 v391_1 v553_1;
add v394_1 v392_1 v554_1;
mov tmp_48_4 v394_1;
mulj v395_1 v157_1 v137_1;
mulj v396_1 v136_1 v159_1;
add v397_1 v395_1 v396_1;
mulj v398_1 v135_1 v161_1;
add v399_1 v397_1 v398_1;
mov tmp_64_4 v399_1;
mulj v400_1 v159_1 v137_1;
mulj v401_1 v136_1 v161_1;
add v402_1 v400_1 v401_1;
mov tmp_80_4 v402_1;
mulj v403_1 v137_1 v161_1;
mov tmp_96_4 v403_1;
mov in54_0_4 tmp_0_4;
mov in54_16_4 tmp_16_4;
mov in54_32_4 tmp_32_4;
mov in54_48_4 tmp_48_4;
mov in54_64_4 tmp_64_4;
mov in54_80_4 tmp_80_4;
mov in54_96_4 tmp_96_4;
mov v1_4 in54_0_4;
mov value_lo_28 32768@uint64;
mov value_hi_28 9223372036854775808@uint64;
join value_28 value_hi_28 value_lo_28;
add v2_4 v1_4 value_28;
mov v3_4 in54_16_4;
mov value_lo_29 18410715276690587648@uint64;
mov value_hi_29 9223372036854775679@uint64;
join value_29 value_hi_29 value_lo_29;
add v4_4 v3_4 value_29;
mov v5_4 in54_32_4;
mov value_lo_30 0@uint64;
mov value_hi_30 9223372036854775680@uint64;
join value_30 value_hi_30 value_lo_30;
add v6_4 v5_4 value_30;
mov v7_4 in54_48_4;
mov v8_4 in54_64_4;
mov v9_4 in54_96_4;
split v10_4 tmp_to_use_28 v9_4 16;
add v11_4 v8_4 v10_4;
split tmp1_13 tmp2_13 v9_4 88;
shl v12_4 tmp2_13 40;
mov value_lo_31 72056494526300160@uint64;
mov value_hi_31 0@uint64;
join value_31 value_hi_31 value_lo_31;
and v13_4@uint128 v12_4 value_31;
assume v13_4 = tmp_to_use_28 * 1099511627776 && true;
sub v15_4 v6_4 v9_4;
mov v16_4 in54_80_4;
split v17_4 tmp_to_use_29 v16_4 16;
add v64_4 v7_4 v17_4;
add v18_4 v13_4 v64_4;
split tmp1_14 tmp2_14 v16_4 88;
shl v19_4 tmp2_14 40;
mov value_lo_32 72056494526300160@uint64;
mov value_hi_32 0@uint64;
join value_32 value_hi_32 value_lo_32;
and v20_4@uint128 v19_4 value_32;
assume v20_4 = tmp_to_use_29 * 1099511627776 && true;
add v21_4 v15_4 v20_4;
sub v22_4 v4_4 v16_4;
split v23_4 tmp_to_use_30 v11_4 16;
add v24_4 v21_4 v23_4;
split tmp1_15 tmp2_15 v11_4 88;
shl v25_4 tmp2_15 40;
mov value_lo_33 72056494526300160@uint64;
mov value_hi_33 0@uint64;
join value_33 value_hi_33 value_lo_33;
and v26_4@uint128 v25_4 value_33;
assume v26_4 = tmp_to_use_30 * 1099511627776 && true;
add v27_4 v22_4 v26_4;
sub v28_4 v2_4 v11_4;
split v29_4 tmp_to_use_31 v24_4 56;
add v30_4 v18_4 v29_4;
mov value_lo_34 72057594037927935@uint64;
mov value_hi_34 0@uint64;
join value_34 value_hi_34 value_lo_34;
and v31_4@uint128 v24_4 value_34;
assume v31_4 = tmp_to_use_31 && true;
split v32_4 tmp_to_use_32 v30_4 56;
mov value_lo_35 72057594037927935@uint64;
mov value_hi_35 0@uint64;
join value_35 value_hi_35 value_lo_35;
and v33_4@uint128 v30_4 value_35;
assume v33_4 = tmp_to_use_32 && true;
split v34_4 tmp_to_use_33 v30_4 72;
add v35_4 v31_4 v34_4;
split tmp1_16 tmp2_16 v32_4 88;
shl v36_4 tmp2_16 40;
mov value_lo_36 72056494526300160@uint64;
mov value_hi_36 0@uint64;
join value_36 value_hi_36 value_lo_36;
and v37_4@uint128 v36_4 value_36;
assume v37_4 + (v34_4 * 1099511627776 * 65536) = v32_4 * 1099511627776 && true;
add v38_4 v27_4 v37_4;
sub v39_4 v28_4 v32_4;
split v40_4 tmp_to_use_34 v39_4 56;
add v41_4 v38_4 v40_4;
cast v42_4@uint64 v39_4;
and v43_4@uint64 v42_4 72057594037927935@uint64;
vpc tmp_to_use_p_10@uint64 tmp_to_use_34;
assume v43_4 = tmp_to_use_34 && true;
mov out55_0_4 v43_4;
split v44_4 tmp_to_use_35 v41_4 56;
add v45_4 v35_4 v44_4;
cast v46_4@uint64 v41_4;
and v47_4@uint64 v46_4 72057594037927935@uint64;
vpc tmp_to_use_p_11@uint64 tmp_to_use_35;
assume v47_4 = tmp_to_use_35 && true;
mov out55_8_4 v47_4;
split v48_4 tmp_to_use_36 v45_4 56;
add v49_4 v33_4 v48_4;
cast v50_4@uint64 v45_4;
and v51_4@uint64 v50_4 72057594037927935@uint64;
vpc tmp_to_use_p_12@uint64 tmp_to_use_36;
assume v51_4 = tmp_to_use_36 && true;
mov out55_16_4 v51_4;
vpc v52_4@uint64 v49_4;
mov out55_24_4 v52_4;
mov alpha_0_1 out55_0_4;
mov alpha_8_1 out55_8_4;
mov alpha_16_1 out55_16_4;
mov alpha_24_1 out55_24_4;
mov alpha0_0_1 alpha_0_1;
mov alpha0_1_1 alpha_8_1;
mov alpha0_2_1 alpha_16_1;
mov alpha0_3_1 alpha_24_1;
{ and [delta0_0_1 + (delta0_1_1 * 72057594037927936) + (delta0_2_1 * 5192296858534827628530496329220096) + (delta0_3_1 * 374144419156711147060143317175368453031918731001856) = (z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)) * (z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)) (mod 26959946667150639794667015087019630673637144422540572481103610249216 - 79228162514264337593543950336 + 1), gamma0_0_1 + (gamma0_1_1 * 72057594037927936) + (gamma0_2_1 * 5192296858534827628530496329220096) + (gamma0_3_1 * 374144419156711147060143317175368453031918731001856) = (y0_0 + (y1_0 * 72057594037927936) + (y2_0 * 5192296858534827628530496329220096) + (y3_0 * 374144419156711147060143317175368453031918731001856)) * (y0_0 + (y1_0 * 72057594037927936) + (y2_0 * 5192296858534827628530496329220096) + (y3_0 * 374144419156711147060143317175368453031918731001856)) (mod 26959946667150639794667015087019630673637144422540572481103610249216 - 79228162514264337593543950336 + 1), beta0_0_1 + (beta0_1_1 * 72057594037927936) + (beta0_2_1 * 5192296858534827628530496329220096) + (beta0_3_1 * 374144419156711147060143317175368453031918731001856) = (x0_0 + (x1_0 * 72057594037927936) + (x2_0 * 5192296858534827628530496329220096) + (x3_0 * 374144419156711147060143317175368453031918731001856)) * (gamma0_0_1 + (gamma0_1_1 * 72057594037927936) + (gamma0_2_1 * 5192296858534827628530496329220096) + (gamma0_3_1 * 374144419156711147060143317175368453031918731001856)) (mod 26959946667150639794667015087019630673637144422540572481103610249216 - 79228162514264337593543950336 + 1), alpha0_0_1 + (alpha0_1_1 * 72057594037927936) + (alpha0_2_1 * 5192296858534827628530496329220096) + (alpha0_3_1 * 374144419156711147060143317175368453031918731001856) = 3 * (x0_0 + (x1_0 * 72057594037927936) + (x2_0 * 5192296858534827628530496329220096) + (x3_0 * 374144419156711147060143317175368453031918731001856) - (delta0_0_1 + (delta0_1_1 * 72057594037927936) + (delta0_2_1 * 5192296858534827628530496329220096) + (delta0_3_1 * 374144419156711147060143317175368453031918731001856))) * (x0_0 + (x1_0 * 72057594037927936) + (x2_0 * 5192296858534827628530496329220096) + (x3_0 * 374144419156711147060143317175368453031918731001856) + delta0_0_1 + (delta0_1_1 * 72057594037927936) + (delta0_2_1 * 5192296858534827628530496329220096) + (delta0_3_1 * 374144419156711147060143317175368453031918731001856)) (mod 26959946667150639794667015087019630673637144422540572481103610249216 - 79228162514264337593543950336 + 1)] && and [v13_1 = mul (tmp_to_use_1) (1099511627776@128), v20_1 = mul (tmp_to_use_2) (1099511627776@128), v26_1 = mul (tmp_to_use_3) (1099511627776@128), v31_1 = tmp_to_use_4, v33_1 = tmp_to_use_5, add (v37_1) (mul (mul (v34_1) (1099511627776@128)) (65536@128)) = mul (v32_1) (1099511627776@128), v43_1 = tmp_to_use_p_1, v47_1 = tmp_to_use_p_2, v51_1 = tmp_to_use_p_3, v13_2 = mul (tmp_to_use_10) (1099511627776@128), v20_2 = mul (tmp_to_use_11) (1099511627776@128), v26_2 = mul (tmp_to_use_12) (1099511627776@128), v31_2 = tmp_to_use_13, v33_2 = tmp_to_use_14, add (v37_2) (mul (mul (v34_2) (1099511627776@128)) (65536@128)) = mul (v32_2) (1099511627776@128), v43_2 = tmp_to_use_p_4, v47_2 = tmp_to_use_p_5, v51_2 = tmp_to_use_p_6, v13_3 = mul (tmp_to_use_19) (1099511627776@128), v20_3 = mul (tmp_to_use_20) (1099511627776@128), v26_3 = mul (tmp_to_use_21) (1099511627776@128), v31_3 = tmp_to_use_22, v33_3 = tmp_to_use_23, add (v37_3) (mul (mul (v34_3) (1099511627776@128)) (65536@128)) = mul (v32_3) (1099511627776@128), v43_3 = tmp_to_use_p_7, v47_3 = tmp_to_use_p_8, v51_3 = tmp_to_use_p_9, v13_4 = mul (tmp_to_use_28) (1099511627776@128), v20_4 = mul (tmp_to_use_29) (1099511627776@128), v26_4 = mul (tmp_to_use_30) (1099511627776@128), v31_4 = tmp_to_use_31, v33_4 = tmp_to_use_32, add (v37_4) (mul (mul (v34_4) (1099511627776@128)) (65536@128)) = mul (v32_4) (1099511627776@128), v43_4 = tmp_to_use_p_10, v47_4 = tmp_to_use_p_11, v51_4 = tmp_to_use_p_12] }
