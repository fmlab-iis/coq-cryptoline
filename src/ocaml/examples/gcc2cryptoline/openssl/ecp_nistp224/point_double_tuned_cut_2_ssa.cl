(*
Verified algebraic postcondition on frege.
Parsing Cryptoline file:                [OK]            0.002323 seconds
Finding polynomial coefficients         [OK]            0.363712 seconds
Finding polynomial coefficients         [OK]            0.681744 seconds
Finding polynomial coefficients         [OK]            0.115885 seconds
Verification result:                    [OK]            11.475604 seconds
*)
proc main(uint64 alpha_0_0, uint64 alpha_16_0, uint64 alpha_24_0, uint64 alpha_8_0, uint64 beta_0_0, uint64 beta_16_0, uint64 beta_24_0, uint64 beta_8_0, uint64 delta_0_0, uint64 delta_16_0, uint64 delta_24_0, uint64 delta_8_0, uint64 gamma_0_0, uint64 gamma_16_0, uint64 gamma_24_0, uint64 gamma_8_0, uint64 x0_0, uint64 x1_0, uint64 x2_0, uint64 x3_0, uint64 x_in2_0_0, uint64 x_in2_16_0, uint64 x_in2_24_0, uint64 x_in2_8_0, uint64 y0_0, uint64 y1_0, uint64 y2_0, uint64 y3_0, uint64 y_in6_0_0, uint64 y_in6_16_0, uint64 y_in6_24_0, uint64 y_in6_8_0, uint64 z0_0, uint64 z1_0, uint64 z2_0, uint64 z3_0, uint64 z_in3_0_0, uint64 z_in3_16_0, uint64 z_in3_24_0, uint64 z_in3_8_0) =
{ and [x_in2_0_0 = x0_0, x_in2_8_0 = x1_0, x_in2_16_0 = x2_0, x_in2_24_0 = x3_0, y_in6_0_0 = y0_0, y_in6_8_0 = y1_0, y_in6_16_0 = y2_0, y_in6_24_0 = y3_0, z_in3_0_0 = z0_0, z_in3_8_0 = z1_0, z_in3_16_0 = z2_0, z_in3_24_0 = z3_0, delta_0_0 + (delta_8_0 * 72057594037927936) + (delta_16_0 * 5192296858534827628530496329220096) + (delta_24_0 * 374144419156711147060143317175368453031918731001856) = (z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)) * (z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)) (mod 26959946667150639794667015087019630673637144422540572481103610249216 - 79228162514264337593543950336 + 1), gamma_0_0 + (gamma_8_0 * 72057594037927936) + (gamma_16_0 * 5192296858534827628530496329220096) + (gamma_24_0 * 374144419156711147060143317175368453031918731001856) = (y0_0 + (y1_0 * 72057594037927936) + (y2_0 * 5192296858534827628530496329220096) + (y3_0 * 374144419156711147060143317175368453031918731001856)) * (y0_0 + (y1_0 * 72057594037927936) + (y2_0 * 5192296858534827628530496329220096) + (y3_0 * 374144419156711147060143317175368453031918731001856)) (mod 26959946667150639794667015087019630673637144422540572481103610249216 - 79228162514264337593543950336 + 1), beta_0_0 + (beta_8_0 * 72057594037927936) + (beta_16_0 * 5192296858534827628530496329220096) + (beta_24_0 * 374144419156711147060143317175368453031918731001856) = (x0_0 + (x1_0 * 72057594037927936) + (x2_0 * 5192296858534827628530496329220096) + (x3_0 * 374144419156711147060143317175368453031918731001856)) * (gamma_0_0 + (gamma_8_0 * 72057594037927936) + (gamma_16_0 * 5192296858534827628530496329220096) + (gamma_24_0 * 374144419156711147060143317175368453031918731001856)) (mod 26959946667150639794667015087019630673637144422540572481103610249216 - 79228162514264337593543950336 + 1), alpha_0_0 + (alpha_8_0 * 72057594037927936) + (alpha_16_0 * 5192296858534827628530496329220096) + (alpha_24_0 * 374144419156711147060143317175368453031918731001856) = 3 * (x0_0 + (x1_0 * 72057594037927936) + (x2_0 * 5192296858534827628530496329220096) + (x3_0 * 374144419156711147060143317175368453031918731001856) - (delta_0_0 + (delta_8_0 * 72057594037927936) + (delta_16_0 * 5192296858534827628530496329220096) + (delta_24_0 * 374144419156711147060143317175368453031918731001856))) * (x0_0 + (x1_0 * 72057594037927936) + (x2_0 * 5192296858534827628530496329220096) + (x3_0 * 374144419156711147060143317175368453031918731001856) + delta_0_0 + (delta_8_0 * 72057594037927936) + (delta_16_0 * 5192296858534827628530496329220096) + (delta_24_0 * 374144419156711147060143317175368453031918731001856)) (mod 26959946667150639794667015087019630673637144422540572481103610249216 - 79228162514264337593543950336 + 1)] && true }
mov v336_1 alpha_0_0;
mul tmp0337_1 v336_1 2@uint64;
mov v338_1 alpha_8_0;
mul tmp1339_1 v338_1 2@uint64;
mov v340_1 alpha_16_0;
mul tmp2341_1 v340_1 2@uint64;
mulj v343_1 v336_1 v336_1;
mulj v345_1 v336_1 tmp1339_1;
mulj v347_1 v336_1 tmp2341_1;
mulj v349_1 v338_1 v338_1;
add v550_1 v349_1 18446744073709551360@uint128;
mov v351_1 alpha_24_0;
mulj v354_1 v351_1 tmp0337_1;
mulj v355_1 tmp2341_1 v338_1;
add v356_1 v354_1 v355_1;
mulj v357_1 tmp1339_1 v351_1;
mulj v359_1 v340_1 v340_1;
add v360_1 v357_1 v359_1;
mov tmp_64_1 v360_1;
mulj v361_1 tmp2341_1 v351_1;
mov tmp_80_1 v361_1;
mulj v362_1 v351_1 v351_1;
mov tmp_96_1 v362_1;
mov v130_1 beta_0_0;
mov v131_1 beta_8_0;
mov v132_1 beta_16_0;
mov v133_1 beta_24_0;
mul v126_1 v130_1 8@uint64;
mul v127_1 v131_1 8@uint64;
mul v128_1 v132_1 8@uint64;
mul v129_1 v133_1 8@uint64;
add v111_1 v343_1 18446744073709551872@uint128;
add v115_1 v347_1 v550_1;
add v117_1 v356_1 18446744073709551360@uint128;
vpc v118_1@uint128 v126_1;
sub v119_1 v111_1 v118_1;
mov tmp_0_1 v119_1;
vpc v120_1@uint128 v127_1;
subb carry_1_1 v551_1 v345_1 v120_1;
adds carry_2_1 v121_1 v551_1 18446462598732840704@uint128;
assume carry_1_1 = carry_2_1 && true;
mov tmp_16_1 v121_1;
vpc v122_1@uint128 v128_1;
sub v123_1 v115_1 v122_1;
mov tmp_32_1 v123_1;
vpc v124_1@uint128 v129_1;
sub v125_1 v117_1 v124_1;
mov tmp_48_1 v125_1;
mov in54_0_1 tmp_0_1;
mov in54_16_1 tmp_16_1;
mov in54_32_1 tmp_32_1;
mov in54_48_1 tmp_48_1;
mov in54_64_1 tmp_64_1;
mov in54_80_1 tmp_80_1;
mov in54_96_1 tmp_96_1;
mov v1_1 in54_0_1;
mov value_lo_1 32768@uint64;
mov value_hi_1 9223372036854775808@uint64;
join value_1 value_hi_1 value_lo_1;
add v2_1 v1_1 value_1;
mov v3_1 in54_16_1;
mov value_lo_2 18410715276690587648@uint64;
mov value_hi_2 9223372036854775679@uint64;
join value_2 value_hi_2 value_lo_2;
add v4_1 v3_1 value_2;
mov v5_1 in54_32_1;
mov value_lo_3 0@uint64;
mov value_hi_3 9223372036854775680@uint64;
join value_3 value_hi_3 value_lo_3;
add v6_1 v5_1 value_3;
mov v7_1 in54_48_1;
mov v8_1 in54_64_1;
mov v9_1 in54_96_1;
split v10_1 tmp_to_use_1 v9_1 16;
add v11_1 v8_1 v10_1;
split tmp1_1 tmp2_1 v9_1 88;
shl v12_1 tmp2_1 40;
mov value_lo_4 72056494526300160@uint64;
mov value_hi_4 0@uint64;
join value_4 value_hi_4 value_lo_4;
and v13_1@uint128 v12_1 value_4;
assume v13_1 = tmp_to_use_1 * 1099511627776 && true;
sub v15_1 v6_1 v9_1;
mov v16_1 in54_80_1;
split v17_1 tmp_to_use_2 v16_1 16;
add v64_1 v7_1 v17_1;
add v18_1 v13_1 v64_1;
split tmp1_2 tmp2_2 v16_1 88;
shl v19_1 tmp2_2 40;
mov value_lo_5 72056494526300160@uint64;
mov value_hi_5 0@uint64;
join value_5 value_hi_5 value_lo_5;
and v20_1@uint128 v19_1 value_5;
assume v20_1 = tmp_to_use_2 * 1099511627776 && true;
add v21_1 v15_1 v20_1;
sub v22_1 v4_1 v16_1;
split v23_1 tmp_to_use_3 v11_1 16;
add v24_1 v21_1 v23_1;
split tmp1_3 tmp2_3 v11_1 88;
shl v25_1 tmp2_3 40;
mov value_lo_6 72056494526300160@uint64;
mov value_hi_6 0@uint64;
join value_6 value_hi_6 value_lo_6;
and v26_1@uint128 v25_1 value_6;
assume v26_1 = tmp_to_use_3 * 1099511627776 && true;
add v27_1 v22_1 v26_1;
sub v28_1 v2_1 v11_1;
split v29_1 tmp_to_use_4 v24_1 56;
add v30_1 v18_1 v29_1;
mov value_lo_7 72057594037927935@uint64;
mov value_hi_7 0@uint64;
join value_7 value_hi_7 value_lo_7;
and v31_1@uint128 v24_1 value_7;
assume v31_1 = tmp_to_use_4 && true;
split v32_1 tmp_to_use_5 v30_1 56;
mov value_lo_8 72057594037927935@uint64;
mov value_hi_8 0@uint64;
join value_8 value_hi_8 value_lo_8;
and v33_1@uint128 v30_1 value_8;
assume v33_1 = tmp_to_use_5 && true;
split v34_1 tmp_to_use_6 v30_1 72;
add v35_1 v31_1 v34_1;
split tmp1_4 tmp2_4 v32_1 88;
shl v36_1 tmp2_4 40;
mov value_lo_9 72056494526300160@uint64;
mov value_hi_9 0@uint64;
join value_9 value_hi_9 value_lo_9;
and v37_1@uint128 v36_1 value_9;
assume v37_1 + (v34_1 * 1099511627776 * 65536) = v32_1 * 1099511627776 && true;
add v38_1 v27_1 v37_1;
sub v39_1 v28_1 v32_1;
split v40_1 tmp_to_use_7 v39_1 56;
add v41_1 v38_1 v40_1;
cast v42_1@uint64 v39_1;
and v43_1@uint64 v42_1 72057594037927935@uint64;
vpc tmp_to_use_p_1@uint64 tmp_to_use_7;
assume v43_1 = tmp_to_use_7 && true;
mov out55_0_1 v43_1;
split v44_1 tmp_to_use_8 v41_1 56;
add v45_1 v35_1 v44_1;
cast v46_1@uint64 v41_1;
and v47_1@uint64 v46_1 72057594037927935@uint64;
vpc tmp_to_use_p_2@uint64 tmp_to_use_8;
assume v47_1 = tmp_to_use_8 && true;
mov out55_8_1 v47_1;
split v48_1 tmp_to_use_9 v45_1 56;
add v49_1 v33_1 v48_1;
cast v50_1@uint64 v45_1;
and v51_1@uint64 v50_1 72057594037927935@uint64;
vpc tmp_to_use_p_3@uint64 tmp_to_use_9;
assume v51_1 = tmp_to_use_9 && true;
mov out55_16_1 v51_1;
vpc v52_1@uint64 v49_1;
mov out55_24_1 v52_1;
mov x_out14_0_1 out55_0_1;
mov x_out14_8_1 out55_8_1;
mov x_out14_16_1 out55_16_1;
mov x_out14_24_1 out55_24_1;
mov v98_1 delta_0_0;
mov v99_1 gamma_0_0;
add v100_1 v98_1 v99_1;
mov delta_0_1 v100_1;
mov v101_1 delta_8_0;
mov v102_1 gamma_8_0;
add v103_1 v101_1 v102_1;
mov delta_8_1 v103_1;
mov v104_1 delta_16_0;
mov v105_1 gamma_16_0;
add v106_1 v104_1 v105_1;
mov delta_16_1 v106_1;
mov v107_1 delta_24_0;
mov v108_1 gamma_24_0;
add v109_1 v107_1 v108_1;
mov delta_24_1 v109_1;
mov v94_1 y_in6_0_0;
mov v95_1 y_in6_8_0;
mov v96_1 y_in6_16_0;
mov v97_1 y_in6_24_0;
mov v86_1 z_in3_0_0;
add v87_1 v86_1 v94_1;
mov v88_1 z_in3_8_0;
add v89_1 v88_1 v95_1;
mov v90_1 z_in3_16_0;
add v91_1 v90_1 v96_1;
mov v92_1 z_in3_24_0;
add v93_1 v92_1 v97_1;
mul tmp0310_1 v87_1 2@uint64;
mul tmp1312_1 v89_1 2@uint64;
mul tmp2314_1 v91_1 2@uint64;
mulj v316_1 v87_1 v87_1;
mulj v318_1 v87_1 tmp1312_1;
mulj v320_1 v87_1 tmp2314_1;
mulj v322_1 v89_1 v89_1;
mulj v327_1 v93_1 tmp0310_1;
mulj v328_1 tmp2314_1 v89_1;
mulj v330_1 tmp1312_1 v93_1;
mulj v332_1 v91_1 v91_1;
add v333_1 v330_1 v332_1;
mov tmp_64_2 v333_1;
mulj v334_1 tmp2314_1 v93_1;
mov tmp_80_2 v334_1;
mulj v335_1 v93_1 v93_1;
mov tmp_96_2 v335_1;
vpc v75_1@uint128 v100_1;
sub v549_1 18446744073709551872@uint128 v75_1;
add v76_1 v316_1 v549_1;
mov tmp_0_2 v76_1;
vpc v78_1@uint128 v103_1;
sub v548_1 18446462598732840704@uint128 v78_1;
add v79_1 v318_1 v548_1;
mov tmp_16_2 v79_1;
vpc v81_1@uint128 v106_1;
sub v196_1 18446744073709551360@uint128 v81_1;
add v197_1 v196_1 v322_1;
add v82_1 v197_1 v320_1;
mov tmp_32_2 v82_1;
vpc v84_1@uint128 v109_1;
sub v194_1 18446744073709551360@uint128 v84_1;
add v195_1 v194_1 v327_1;
add v85_1 v195_1 v328_1;
mov tmp_48_2 v85_1;
mov in54_0_2 tmp_0_2;
mov in54_16_2 tmp_16_2;
mov in54_32_2 tmp_32_2;
mov in54_48_2 tmp_48_2;
mov in54_64_2 tmp_64_2;
mov in54_80_2 tmp_80_2;
mov in54_96_2 tmp_96_2;
mov v1_2 in54_0_2;
mov value_lo_10 32768@uint64;
mov value_hi_10 9223372036854775808@uint64;
join value_10 value_hi_10 value_lo_10;
add v2_2 v1_2 value_10;
mov v3_2 in54_16_2;
mov value_lo_11 18410715276690587648@uint64;
mov value_hi_11 9223372036854775679@uint64;
join value_11 value_hi_11 value_lo_11;
add v4_2 v3_2 value_11;
mov v5_2 in54_32_2;
mov value_lo_12 0@uint64;
mov value_hi_12 9223372036854775680@uint64;
join value_12 value_hi_12 value_lo_12;
add v6_2 v5_2 value_12;
mov v7_2 in54_48_2;
mov v8_2 in54_64_2;
mov v9_2 in54_96_2;
split v10_2 tmp_to_use_10 v9_2 16;
add v11_2 v8_2 v10_2;
split tmp1_5 tmp2_5 v9_2 88;
shl v12_2 tmp2_5 40;
mov value_lo_13 72056494526300160@uint64;
mov value_hi_13 0@uint64;
join value_13 value_hi_13 value_lo_13;
and v13_2@uint128 v12_2 value_13;
assume v13_2 = tmp_to_use_10 * 1099511627776 && true;
sub v15_2 v6_2 v9_2;
mov v16_2 in54_80_2;
split v17_2 tmp_to_use_11 v16_2 16;
add v64_2 v7_2 v17_2;
add v18_2 v13_2 v64_2;
split tmp1_6 tmp2_6 v16_2 88;
shl v19_2 tmp2_6 40;
mov value_lo_14 72056494526300160@uint64;
mov value_hi_14 0@uint64;
join value_14 value_hi_14 value_lo_14;
and v20_2@uint128 v19_2 value_14;
assume v20_2 = tmp_to_use_11 * 1099511627776 && true;
add v21_2 v15_2 v20_2;
sub v22_2 v4_2 v16_2;
split v23_2 tmp_to_use_12 v11_2 16;
add v24_2 v21_2 v23_2;
split tmp1_7 tmp2_7 v11_2 88;
shl v25_2 tmp2_7 40;
mov value_lo_15 72056494526300160@uint64;
mov value_hi_15 0@uint64;
join value_15 value_hi_15 value_lo_15;
and v26_2@uint128 v25_2 value_15;
assume v26_2 = tmp_to_use_12 * 1099511627776 && true;
add v27_2 v22_2 v26_2;
sub v28_2 v2_2 v11_2;
split v29_2 tmp_to_use_13 v24_2 56;
add v30_2 v18_2 v29_2;
mov value_lo_16 72057594037927935@uint64;
mov value_hi_16 0@uint64;
join value_16 value_hi_16 value_lo_16;
and v31_2@uint128 v24_2 value_16;
assume v31_2 = tmp_to_use_13 && true;
split v32_2 tmp_to_use_14 v30_2 56;
mov value_lo_17 72057594037927935@uint64;
mov value_hi_17 0@uint64;
join value_17 value_hi_17 value_lo_17;
and v33_2@uint128 v30_2 value_17;
assume v33_2 = tmp_to_use_14 && true;
split v34_2 tmp_to_use_15 v30_2 72;
add v35_2 v31_2 v34_2;
split tmp1_8 tmp2_8 v32_2 88;
shl v36_2 tmp2_8 40;
mov value_lo_18 72056494526300160@uint64;
mov value_hi_18 0@uint64;
join value_18 value_hi_18 value_lo_18;
and v37_2@uint128 v36_2 value_18;
assume v37_2 + (v34_2 * 1099511627776 * 65536) = v32_2 * 1099511627776 && true;
add v38_2 v27_2 v37_2;
sub v39_2 v28_2 v32_2;
split v40_2 tmp_to_use_16 v39_2 56;
add v41_2 v38_2 v40_2;
cast v42_2@uint64 v39_2;
and v43_2@uint64 v42_2 72057594037927935@uint64;
vpc tmp_to_use_p_4@uint64 tmp_to_use_16;
assume v43_2 = tmp_to_use_16 && true;
mov out55_0_2 v43_2;
split v44_2 tmp_to_use_17 v41_2 56;
add v45_2 v35_2 v44_2;
cast v46_2@uint64 v41_2;
and v47_2@uint64 v46_2 72057594037927935@uint64;
vpc tmp_to_use_p_5@uint64 tmp_to_use_17;
assume v47_2 = tmp_to_use_17 && true;
mov out55_8_2 v47_2;
split v48_2 tmp_to_use_18 v45_2 56;
add v49_2 v33_2 v48_2;
cast v50_2@uint64 v45_2;
and v51_2@uint64 v50_2 72057594037927935@uint64;
vpc tmp_to_use_p_6@uint64 tmp_to_use_18;
assume v51_2 = tmp_to_use_18 && true;
mov out55_16_2 v51_2;
vpc v52_2@uint64 v49_2;
mov out55_24_2 v52_2;
mov z_out17_0_1 out55_0_2;
mov z_out17_8_1 out55_8_2;
mov z_out17_16_1 out55_16_2;
mov z_out17_24_1 out55_24_2;
mov v58_1 beta_0_0;
mul v59_1 v58_1 4@uint64;
mov v60_1 beta_8_0;
mul v61_1 v60_1 4@uint64;
mov v62_1 beta_16_0;
mul v63_1 v62_1 4@uint64;
mov v64_3 beta_24_0;
mul v65_1 v64_3 4@uint64;
add v46_3 v59_1 288230376151711748@uint64;
add v47_3 v61_1 288225978105200636@uint64;
add v48_3 v63_1 288230376151711740@uint64;
add v49_3 v65_1 288230376151711740@uint64;
mov v50_3 x_out14_0_1;
sub v51_3 v46_3 v50_3;
mov beta_0_1 v51_3;
mov v52_3 x_out14_8_1;
sub v53_1 v47_3 v52_3;
mov beta_8_1 v53_1;
mov v54_1 x_out14_16_1;
sub v55_1 v48_3 v54_1;
mov beta_16_1 v55_1;
mov v56_1 x_out14_24_1;
sub v57_1 v49_3 v56_1;
mov beta_24_1 v57_1;
mov v268_1 alpha_0_0;
mulj v272_1 v268_1 v51_3;
mulj v275_1 v268_1 v53_1;
mov v276_1 alpha_8_0;
mulj v278_1 v51_3 v276_1;
mulj v282_1 v268_1 v55_1;
mulj v283_1 v53_1 v276_1;
mov v285_1 alpha_16_0;
mulj v287_1 v51_3 v285_1;
mulj v291_1 v268_1 v57_1;
mulj v292_1 v276_1 v55_1;
mov v294_1 alpha_24_0;
mulj v296_1 v51_3 v294_1;
mulj v297_1 v53_1 v285_1;
mulj v300_1 v276_1 v57_1;
mulj v301_1 v55_1 v285_1;
mulj v303_1 v53_1 v294_1;
mulj v305_1 v285_1 v57_1;
mulj v306_1 v55_1 v294_1;
mulj v308_1 v57_1 v294_1;
mov v241_1 gamma_0_0;
mul tmp0242_1 v241_1 2@uint64;
mov v243_1 gamma_8_0;
mul tmp1244_1 v243_1 2@uint64;
mov v245_1 gamma_16_0;
mul tmp2246_1 v245_1 2@uint64;
mulj v248_1 v241_1 v241_1;
mulj v252_1 v241_1 tmp2246_1;
mulj v254_1 v243_1 v243_1;
add v255_1 v252_1 v254_1;
mov v256_1 gamma_24_0;
mulj v259_1 v256_1 tmp0242_1;
mulj v260_1 tmp2246_1 v243_1;
add v261_1 v259_1 v260_1;
mulj v262_1 tmp1244_1 v256_1;
mulj v264_1 v245_1 v245_1;
add v265_1 v262_1 v264_1;
mulj v267_1 v256_1 v256_1;
mul v33_3 v248_1 8@uint128;
mulj v185_1 v241_1 tmp1244_1;
mul v35_3 v185_1 8@uint128;
mul v37_3 v255_1 8@uint128;
mul v39_3 v261_1 8@uint128;
mul v41_3 v265_1 8@uint128;
mulj v184_1 tmp2246_1 v256_1;
mul v43_3 v184_1 8@uint128;
mul v45_3 v267_1 8@uint128;
sub v183_1 1329227995784915872903807060280344576@uint128 v33_3;
add v228_1 v183_1 v272_1;
mov tmp_0_3 v228_1;
sub v181_1 1329227995784915854457062986570792960@uint128 v35_3;
add v182_1 v181_1 v275_1;
add v230_1 v182_1 v278_1;
mov tmp_16_3 v230_1;
sub v178_1 1329227995784915854457062986570792960@uint128 v37_3;
add v179_1 v178_1 v282_1;
add v180_1 v179_1 v283_1;
add v232_1 v180_1 v287_1;
mov tmp_32_3 v232_1;
sub v174_1 1329227995784915872903807060280344576@uint128 v39_3;
add v175_1 v174_1 v291_1;
add v176_1 v175_1 v292_1;
add v177_1 v176_1 v296_1;
add v234_1 v177_1 v297_1;
mov tmp_48_3 v234_1;
sub v170_1 1329207713375312202786639039319506944@uint128 v41_3;
add v171_1 v170_1 v300_1;
add v172_1 v171_1 v301_1;
add v236_1 v172_1 v303_1;
mov tmp_64_3 v236_1;
sub v168_1 1329227995784915854457062986570792960@uint128 v43_3;
add v169_1 v168_1 v305_1;
add v238_1 v169_1 v306_1;
mov tmp_80_3 v238_1;
sub v167_1 1329227995784915854457062986570792960@uint128 v45_3;
add v240_1 v167_1 v308_1;
mov tmp_96_3 v240_1;
mov in54_0_3 tmp_0_3;
mov in54_16_3 tmp_16_3;
mov in54_32_3 tmp_32_3;
mov in54_48_3 tmp_48_3;
mov in54_64_3 tmp_64_3;
mov in54_80_3 tmp_80_3;
mov in54_96_3 tmp_96_3;
mov v1_3 in54_0_3;
mov value_lo_19 32768@uint64;
mov value_hi_19 9223372036854775808@uint64;
join value_19 value_hi_19 value_lo_19;
add v2_3 v1_3 value_19;
mov v3_3 in54_16_3;
mov value_lo_20 18410715276690587648@uint64;
mov value_hi_20 9223372036854775679@uint64;
join value_20 value_hi_20 value_lo_20;
add v4_3 v3_3 value_20;
mov v5_3 in54_32_3;
mov value_lo_21 0@uint64;
mov value_hi_21 9223372036854775680@uint64;
join value_21 value_hi_21 value_lo_21;
add v6_3 v5_3 value_21;
mov v7_3 in54_48_3;
mov v8_3 in54_64_3;
mov v9_3 in54_96_3;
split v10_3 tmp_to_use_19 v9_3 16;
add v11_3 v8_3 v10_3;
split tmp1_9 tmp2_9 v9_3 88;
shl v12_3 tmp2_9 40;
mov value_lo_22 72056494526300160@uint64;
mov value_hi_22 0@uint64;
join value_22 value_hi_22 value_lo_22;
and v13_3@uint128 v12_3 value_22;
assume v13_3 = tmp_to_use_19 * 1099511627776 && true;
sub v15_3 v6_3 v9_3;
mov v16_3 in54_80_3;
split v17_3 tmp_to_use_20 v16_3 16;
add v64_4 v7_3 v17_3;
add v18_3 v13_3 v64_4;
split tmp1_10 tmp2_10 v16_3 88;
shl v19_3 tmp2_10 40;
mov value_lo_23 72056494526300160@uint64;
mov value_hi_23 0@uint64;
join value_23 value_hi_23 value_lo_23;
and v20_3@uint128 v19_3 value_23;
assume v20_3 = tmp_to_use_20 * 1099511627776 && true;
add v21_3 v15_3 v20_3;
sub v22_3 v4_3 v16_3;
split v23_3 tmp_to_use_21 v11_3 16;
add v24_3 v21_3 v23_3;
split tmp1_11 tmp2_11 v11_3 88;
shl v25_3 tmp2_11 40;
mov value_lo_24 72056494526300160@uint64;
mov value_hi_24 0@uint64;
join value_24 value_hi_24 value_lo_24;
and v26_3@uint128 v25_3 value_24;
assume v26_3 = tmp_to_use_21 * 1099511627776 && true;
add v27_3 v22_3 v26_3;
sub v28_3 v2_3 v11_3;
split v29_3 tmp_to_use_22 v24_3 56;
add v30_3 v18_3 v29_3;
mov value_lo_25 72057594037927935@uint64;
mov value_hi_25 0@uint64;
join value_25 value_hi_25 value_lo_25;
and v31_3@uint128 v24_3 value_25;
assume v31_3 = tmp_to_use_22 && true;
split v32_3 tmp_to_use_23 v30_3 56;
mov value_lo_26 72057594037927935@uint64;
mov value_hi_26 0@uint64;
join value_26 value_hi_26 value_lo_26;
and v33_4@uint128 v30_3 value_26;
assume v33_4 = tmp_to_use_23 && true;
split v34_3 tmp_to_use_24 v30_3 72;
add v35_4 v31_3 v34_3;
split tmp1_12 tmp2_12 v32_3 88;
shl v36_3 tmp2_12 40;
mov value_lo_27 72056494526300160@uint64;
mov value_hi_27 0@uint64;
join value_27 value_hi_27 value_lo_27;
and v37_4@uint128 v36_3 value_27;
assume v37_4 + (v34_3 * 1099511627776 * 65536) = v32_3 * 1099511627776 && true;
add v38_3 v27_3 v37_4;
sub v39_4 v28_3 v32_3;
split v40_3 tmp_to_use_25 v39_4 56;
add v41_4 v38_3 v40_3;
cast v42_3@uint64 v39_4;
and v43_4@uint64 v42_3 72057594037927935@uint64;
vpc tmp_to_use_p_7@uint64 tmp_to_use_25;
assume v43_4 = tmp_to_use_25 && true;
mov out55_0_3 v43_4;
split v44_3 tmp_to_use_26 v41_4 56;
add v45_4 v35_4 v44_3;
cast v46_4@uint64 v41_4;
and v47_4@uint64 v46_4 72057594037927935@uint64;
vpc tmp_to_use_p_8@uint64 tmp_to_use_26;
assume v47_4 = tmp_to_use_26 && true;
mov out55_8_3 v47_4;
split v48_4 tmp_to_use_27 v45_4 56;
add v49_4 v33_4 v48_4;
cast v50_4@uint64 v45_4;
and v51_4@uint64 v50_4 72057594037927935@uint64;
vpc tmp_to_use_p_9@uint64 tmp_to_use_27;
assume v51_4 = tmp_to_use_27 && true;
mov out55_16_3 v51_4;
vpc v52_4@uint64 v49_4;
mov out55_24_3 v52_4;
mov y_out22_0_1 out55_0_3;
mov y_out22_8_1 out55_8_3;
mov y_out22_16_1 out55_16_3;
mov y_out22_24_1 out55_24_3;
mov xp0_1 x_out14_0_1;
mov xp1_1 x_out14_8_1;
mov xp2_1 x_out14_16_1;
mov xp3_1 x_out14_24_1;
mov yp0_1 y_out22_0_1;
mov yp1_1 y_out22_8_1;
mov yp2_1 y_out22_16_1;
mov yp3_1 y_out22_24_1;
mov zp0_1 z_out17_0_1;
mov zp1_1 z_out17_8_1;
mov zp2_1 z_out17_16_1;
mov zp3_1 z_out17_24_1;
{ and [xp0_1 + (xp1_1 * 72057594037927936) + (xp2_1 * 5192296858534827628530496329220096) + (xp3_1 * 374144419156711147060143317175368453031918731001856) = (3 * (x0_0 + (x1_0 * 72057594037927936) + (x2_0 * 5192296858534827628530496329220096) + (x3_0 * 374144419156711147060143317175368453031918731001856) - ((z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)) * (z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)))) * (x0_0 + (x1_0 * 72057594037927936) + (x2_0 * 5192296858534827628530496329220096) + (x3_0 * 374144419156711147060143317175368453031918731001856) + ((z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)) * (z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)))) * 3 * (x0_0 + (x1_0 * 72057594037927936) + (x2_0 * 5192296858534827628530496329220096) + (x3_0 * 374144419156711147060143317175368453031918731001856) - ((z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)) * (z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)))) * (x0_0 + (x1_0 * 72057594037927936) + (x2_0 * 5192296858534827628530496329220096) + (x3_0 * 374144419156711147060143317175368453031918731001856) + ((z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)) * (z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856))))) - (8 * (x0_0 + (x1_0 * 72057594037927936) + (x2_0 * 5192296858534827628530496329220096) + (x3_0 * 374144419156711147060143317175368453031918731001856)) * (y0_0 + (y1_0 * 72057594037927936) + (y2_0 * 5192296858534827628530496329220096) + (y3_0 * 374144419156711147060143317175368453031918731001856)) * (y0_0 + (y1_0 * 72057594037927936) + (y2_0 * 5192296858534827628530496329220096) + (y3_0 * 374144419156711147060143317175368453031918731001856))) (mod 26959946667150639794667015087019630673637144422540572481103610249216 - 79228162514264337593543950336 + 1), yp0_1 + (yp1_1 * 72057594037927936) + (yp2_1 * 5192296858534827628530496329220096) + (yp3_1 * 374144419156711147060143317175368453031918731001856) = (3 * (x0_0 + (x1_0 * 72057594037927936) + (x2_0 * 5192296858534827628530496329220096) + (x3_0 * 374144419156711147060143317175368453031918731001856) - ((z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)) * (z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)))) * (x0_0 + (x1_0 * 72057594037927936) + (x2_0 * 5192296858534827628530496329220096) + (x3_0 * 374144419156711147060143317175368453031918731001856) + ((z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)) * (z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)))) * ((4 * (x0_0 + (x1_0 * 72057594037927936) + (x2_0 * 5192296858534827628530496329220096) + (x3_0 * 374144419156711147060143317175368453031918731001856)) * (y0_0 + (y1_0 * 72057594037927936) + (y2_0 * 5192296858534827628530496329220096) + (y3_0 * 374144419156711147060143317175368453031918731001856)) * (y0_0 + (y1_0 * 72057594037927936) + (y2_0 * 5192296858534827628530496329220096) + (y3_0 * 374144419156711147060143317175368453031918731001856))) - (xp0_1 + (xp1_1 * 72057594037927936) + (xp2_1 * 5192296858534827628530496329220096) + (xp3_1 * 374144419156711147060143317175368453031918731001856)))) - (8 * (y0_0 + (y1_0 * 72057594037927936) + (y2_0 * 5192296858534827628530496329220096) + (y3_0 * 374144419156711147060143317175368453031918731001856)) * (y0_0 + (y1_0 * 72057594037927936) + (y2_0 * 5192296858534827628530496329220096) + (y3_0 * 374144419156711147060143317175368453031918731001856)) * (y0_0 + (y1_0 * 72057594037927936) + (y2_0 * 5192296858534827628530496329220096) + (y3_0 * 374144419156711147060143317175368453031918731001856)) * (y0_0 + (y1_0 * 72057594037927936) + (y2_0 * 5192296858534827628530496329220096) + (y3_0 * 374144419156711147060143317175368453031918731001856))) (mod 26959946667150639794667015087019630673637144422540572481103610249216 - 79228162514264337593543950336 + 1), zp0_1 + (zp1_1 * 72057594037927936) + (zp2_1 * 5192296858534827628530496329220096) + (zp3_1 * 374144419156711147060143317175368453031918731001856) = 2 * (y0_0 + (y1_0 * 72057594037927936) + (y2_0 * 5192296858534827628530496329220096) + (y3_0 * 374144419156711147060143317175368453031918731001856)) * (z0_0 + (z1_0 * 72057594037927936) + (z2_0 * 5192296858534827628530496329220096) + (z3_0 * 374144419156711147060143317175368453031918731001856)) (mod 26959946667150639794667015087019630673637144422540572481103610249216 - 79228162514264337593543950336 + 1)] && and [carry_1_1 = carry_2_1, v13_1 = mul (tmp_to_use_1) (1099511627776@128), v20_1 = mul (tmp_to_use_2) (1099511627776@128), v26_1 = mul (tmp_to_use_3) (1099511627776@128), v31_1 = tmp_to_use_4, v33_1 = tmp_to_use_5, add (v37_1) (mul (mul (v34_1) (1099511627776@128)) (65536@128)) = mul (v32_1) (1099511627776@128), v43_1 = tmp_to_use_p_1, v47_1 = tmp_to_use_p_2, v51_1 = tmp_to_use_p_3, v13_2 = mul (tmp_to_use_10) (1099511627776@128), v20_2 = mul (tmp_to_use_11) (1099511627776@128), v26_2 = mul (tmp_to_use_12) (1099511627776@128), v31_2 = tmp_to_use_13, v33_2 = tmp_to_use_14, add (v37_2) (mul (mul (v34_2) (1099511627776@128)) (65536@128)) = mul (v32_2) (1099511627776@128), v43_2 = tmp_to_use_p_4, v47_2 = tmp_to_use_p_5, v51_2 = tmp_to_use_p_6, v13_3 = mul (tmp_to_use_19) (1099511627776@128), v20_3 = mul (tmp_to_use_20) (1099511627776@128), v26_3 = mul (tmp_to_use_21) (1099511627776@128), v31_3 = tmp_to_use_22, v33_4 = tmp_to_use_23, add (v37_4) (mul (mul (v34_3) (1099511627776@128)) (65536@128)) = mul (v32_3) (1099511627776@128), v43_4 = tmp_to_use_p_7, v47_4 = tmp_to_use_p_8, v51_4 = tmp_to_use_p_9] }
