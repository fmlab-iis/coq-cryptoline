proc main(uint64 a0_0, uint64 a1_0, uint64 a2_0, uint64 a3_0, uint64 a4_0) =
{ true && and [a0_0 <u 144115188075855872@64, a1_0 <u 144115188075855872@64, a2_0 <u 144115188075855872@64, a3_0 <u 144115188075855872@64] }
mov in3_0_1 a0_0;
mov in3_8_1 a1_0;
mov in3_16_1 a2_0;
mov in3_24_1 a3_0;
mov v7_1 in3_0_1;
vpc v8_1@uint128 v7_1;
mov v10_1 in3_8_1;
vpc v11_1@uint128 v10_1;
mov v13_1 in3_16_1;
vpc v14_1@uint128 v13_1;
mov v16_1 in3_24_1;
vpc v17_1@uint128 v16_1;
mov value_lo_1 18446744073709551360@uint64;
mov value_hi_1 0@uint64;
join value_1 value_hi_1 value_lo_1;
sub v18_1 value_1 v17_1;
mov value_lo_2 33024@uint64;
mov value_hi_2 9223372036854775809@uint64;
join value_2 value_hi_2 value_lo_2;
sub v23_1 value_2 v8_1;
mov value_lo_3 18410433801713876736@uint64;
mov value_hi_3 9223372036854775680@uint64;
join value_3 value_hi_3 value_lo_3;
sub v22_1 value_3 v11_1;
mov value_lo_4 18446744073709551360@uint64;
mov value_hi_4 9223372036854775680@uint64;
join value_4 value_hi_4 value_lo_4;
sub v28_1 value_4 v14_1;
split v51_1 tmp_to_use_1 v28_1 56;
add v52_1 v18_1 v51_1;
mov value_lo_5 72057594037927935@uint64;
mov value_hi_5 0@uint64;
join value_5 value_hi_5 value_lo_5;
and v53_1@uint128 v28_1 value_5;
assume v53_1 = tmp_to_use_1 && true;
split v54_1 tmp_to_use_2 v52_1 56;
mov value_lo_6 72057594037927935@uint64;
mov value_hi_6 0@uint64;
join value_6 value_hi_6 value_lo_6;
and v55_1@uint128 v52_1 value_6;
assume v55_1 = tmp_to_use_2 && true;
split tmp1_1 tmp2_1 v54_1 88;
shl v58_1 tmp2_1 40;
assume tmp1_1 = 0 && true;
add v25_1 v22_1 v58_1;
sub v61_1 v23_1 v54_1;
split v62_1 tmp_to_use_3 v61_1 56;
add v63_1 v25_1 v62_1;
cast v64_1@uint64 v61_1;
and v65_1@uint64 v64_1 72057594037927935@uint64;
vpc tmp_to_use_p_1@uint64 tmp_to_use_3;
assume v65_1 = tmp_to_use_3 && true;
mov out4_0_1 v65_1;
split v66_1 tmp_to_use_4 v63_1 56;
add v67_1 v53_1 v66_1;
cast v68_1@uint64 v63_1;
and v69_1@uint64 v68_1 72057594037927935@uint64;
vpc tmp_to_use_p_2@uint64 tmp_to_use_4;
assume v69_1 = tmp_to_use_4 && true;
mov out4_8_1 v69_1;
split v70_1 tmp_to_use_5 v67_1 56;
add v71_1 v55_1 v70_1;
cast v72_1@uint64 v67_1;
and v73_1@uint64 v72_1 72057594037927935@uint64;
vpc tmp_to_use_p_3@uint64 tmp_to_use_5;
assume v73_1 = tmp_to_use_5 && true;
mov out4_16_1 v73_1;
vpc v74_1@uint64 v71_1;
mov out4_24_1 v74_1;
mov c0_1 out4_0_1;
mov c1_1 out4_8_1;
mov c2_1 out4_16_1;
mov c3_1 out4_24_1;
{ a0_0 + (a1_0 * 72057594037927936) + (a2_0 * 5192296858534827628530496329220096) + (a3_0 * 374144419156711147060143317175368453031918731001856) = 0 - (c0_1 + (c1_1 * 72057594037927936) + (c2_1 * 5192296858534827628530496329220096) + (c3_1 * 374144419156711147060143317175368453031918731001856)) (mod 26959946667150639794667015087019630673637144422540572481103610249216 - 79228162514264337593543950336 + 1) && and [v53_1 = tmp_to_use_1, v55_1 = tmp_to_use_2, tmp1_1 = 0@128, v65_1 = tmp_to_use_p_1, v69_1 = tmp_to_use_p_2, v73_1 = tmp_to_use_p_3] }
