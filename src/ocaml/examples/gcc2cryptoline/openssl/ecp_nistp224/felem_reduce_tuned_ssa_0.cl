proc main(uint128 a0_0, uint128 a1_0, uint128 a2_0, uint128 a3_0, uint128 a4_0, uint128 a5_0, uint128 a6_0) =
{ true && and [a0_0 <u 85070591730234615865843651857942052864@128, a1_0 <u 85070591730234615865843651857942052864@128, a2_0 <u 85070591730234615865843651857942052864@128, a3_0 <u 85070591730234615865843651857942052864@128, a4_0 <u 85070591730234615865843651857942052864@128, a5_0 <u 85070591730234615865843651857942052864@128, a6_0 <u 85070591730234615865843651857942052864@128] }
join value_1 9223372036854775808@uint64 32768@uint64;
add v2_1 a0_0 value_1;
join value_2 9223372036854775679@uint64 18410715276690587648@uint64;
add v4_1 a1_0 value_2;
join value_3 9223372036854775680@uint64 0@uint64;
add v6_1 a2_0 value_3;
split v10_1 tmp_to_use_1 a6_0 16;
add v11_1 a4_0 v10_1;
split tmp1_1 tmp2_1 a6_0 88;
shl v12_1 tmp2_1 40;
join value_4 0@uint64 72056494526300160@uint64;
and v13_1@uint128 v12_1 value_4;
assume v13_1 = tmp_to_use_1 * 1099511627776 && true;
sub v15_1 v6_1 a6_0;
split v17_1 tmp_to_use_2 a5_0 16;
add v64_1 a3_0 v17_1;
add v18_1 v13_1 v64_1;
split tmp1_2 tmp2_2 a5_0 88;
shl v19_1 tmp2_2 40;
join value_5 0@uint64 72056494526300160@uint64;
and v20_1@uint128 v19_1 value_5;
assume v20_1 = tmp_to_use_2 * 1099511627776 && true;
add v21_1 v15_1 v20_1;
sub v22_1 v4_1 a5_0;
split v23_1 tmp_to_use_3 v11_1 16;
add v24_1 v21_1 v23_1;
split tmp1_3 tmp2_3 v11_1 88;
shl v25_1 tmp2_3 40;
join value_6 0@uint64 72056494526300160@uint64;
and v26_1@uint128 v25_1 value_6;
assume v26_1 = tmp_to_use_3 * 1099511627776 && true;
add v27_1 v22_1 v26_1;
sub v28_1 v2_1 v11_1;
split v29_1 tmp_to_use_4 v24_1 56;
add v30_1 v18_1 v29_1;
join value_7 0@uint64 72057594037927935@uint64;
and v31_1@uint128 v24_1 value_7;
assume v31_1 = tmp_to_use_4 && true;
split v32_1 tmp_to_use_5 v30_1 56;
join value_8 0@uint64 72057594037927935@uint64;
and v33_1@uint128 v30_1 value_8;
assume v33_1 = tmp_to_use_5 && true;
split v34_1 tmp_to_use_6 v30_1 72;
add v35_1 v31_1 v34_1;
split tmp1_4 tmp2_4 v32_1 88;
shl v36_1 tmp2_4 40;
join value_9 0@uint64 72056494526300160@uint64;
and v37_1@uint128 v36_1 value_9;
assume v37_1 + (v34_1 * 1099511627776 * 65536) = v32_1 * 1099511627776 && true;
add v38_1 v27_1 v37_1;
sub v39_1 v28_1 v32_1;
split v40_1 tmp_to_use_7 v39_1 56;
add v41_1 v38_1 v40_1;
cast v42_1@uint64 v39_1;
and v43_1@uint64 v42_1 72057594037927935@uint64;
vpc tmp_to_use_p_1@uint64 tmp_to_use_7;
assume v43_1 = tmp_to_use_7 && true;
split v44_1 tmp_to_use_8 v41_1 56;
add v45_1 v35_1 v44_1;
cast v46_1@uint64 v41_1;
and v47_1@uint64 v46_1 72057594037927935@uint64;
vpc tmp_to_use_p_2@uint64 tmp_to_use_8;
assume v47_1 = tmp_to_use_8 && true;
split v48_1 tmp_to_use_9 v45_1 56;
add v49_1 v33_1 v48_1;
cast v50_1@uint64 v45_1;
and v51_1@uint64 v50_1 72057594037927935@uint64;
vpc tmp_to_use_p_3@uint64 tmp_to_use_9;
assume v51_1 = tmp_to_use_9 && true;
vpc v52_1@uint64 v49_1;
{ v43_1 + (v47_1 * 72057594037927936) + (v51_1 * 5192296858534827628530496329220096) + (v52_1 * 374144419156711147060143317175368453031918731001856) = a0_0 + (a1_0 * 72057594037927936) + (a2_0 * 5192296858534827628530496329220096) + (a3_0 * 374144419156711147060143317175368453031918731001856) + (a4_0 * 26959946667150639794667015087019630673637144422540572481103610249216) + (a5_0 * 1942668892225729070919461906823518906642406839052139521251812409738904285205208498176) + (a6_0 * 139984046386112763159840142535527767382602843577165595931249318810236991948760059086304843329475444736) (mod 26959946667150639794667015087019630673637144422540572481103610249216 - 79228162514264337593543950336 + 1) && and [v13_1 = mul (tmp_to_use_1) (1099511627776@128), v20_1 = mul (tmp_to_use_2) (1099511627776@128), v26_1 = mul (tmp_to_use_3) (1099511627776@128), v31_1 = tmp_to_use_4, v33_1 = tmp_to_use_5, add (v37_1) (mul (mul (v34_1) (1099511627776@128)) (65536@128)) = mul (v32_1) (1099511627776@128), v43_1 = tmp_to_use_p_1, v47_1 = tmp_to_use_p_2, v51_1 = tmp_to_use_p_3, v43_1 <u 72057594037927936@64, v47_1 <u 72057594037927936@64, v51_1 <u 72057594037927936@64, v52_1 <u 72057594037993472@64] }