(* @frege
===== Verification =====
Prefix: OCAMLRUNPARAM=s=8G
Options: -v -jobs 16 -fork -cadical /home/mht208/Sources/cadical/cadical-rel-1.3.0/build/cadical  -sat_cert grat  -gratchk /home/mht208/Sources/grat/gratchk/code/gratchk  -gratgen /home/mht208/Sources/grat/gratgen/gratgen  -no_carry_constraint -tmpdir .
Command: OCAMLRUNPARAM=s=8G ./coqcryptoline.exe -v -jobs 16 -fork -cadical /home/mht208/Sources/cadical/cadical-rel-1.3.0/build/cadical  -sat_cert grat  -gratchk /home/mht208/Sources/grat/gratchk/code/gratchk  -gratgen /home/mht208/Sources/grat/gratgen/gratgen  -no_carry_constraint -tmpdir .  fe_mul_impl_tuned.cl

Results of checking CNF formulas:       [OK]            198.967236 seconds
Finding polynomial coefficients         [OK]            0.568875 seconds
Verification result:                    [OK]            245.005739 seconds
*)

proc main(uint32 a0_0, uint32 a1_0, uint32 a2_0, uint32 a3_0, uint32 a4_0, uint32 a5_0, uint32 a6_0, uint32 a7_0, uint32 a8_0, uint32 a9_0, uint32 b0_0, uint32 b1_0, uint32 b2_0, uint32 b3_0, uint32 b4_0, uint32 b5_0, uint32 b6_0, uint32 b7_0, uint32 b8_0, uint32 b9_0) =
{ true && and [a0_0 <=u 221459250@32, a1_0 <=u 110729625@32, a2_0 <=u 221459250@32, a3_0 <=u 110729625@32, a4_0 <=u 221459250@32, a5_0 <=u 110729625@32, a6_0 <=u 221459250@32, a7_0 <=u 110729625@32, a8_0 <=u 221459250@32, a9_0 <=u 110729625@32, b0_0 <=u 221459250@32, b1_0 <=u 110729625@32, b2_0 <=u 221459250@32, b3_0 <=u 110729625@32, b4_0 <=u 221459250@32, b5_0 <=u 110729625@32, b6_0 <=u 221459250@32, b7_0 <=u 110729625@32, b8_0 <=u 221459250@32, b9_0 <=u 110729625@32] }
mov in1228_0_1 a0_0;
mov in1228_4_1 a1_0;
mov in1228_8_1 a2_0;
mov in1228_12_1 a3_0;
mov in1228_16_1 a4_0;
mov in1228_20_1 a5_0;
mov in1228_24_1 a6_0;
mov in1228_28_1 a7_0;
mov in1228_32_1 a8_0;
mov in1228_36_1 a9_0;
mov in2239_0_1 b0_0;
mov in2239_4_1 b1_0;
mov in2239_8_1 b2_0;
mov in2239_12_1 b3_0;
mov in2239_16_1 b4_0;
mov in2239_20_1 b5_0;
mov in2239_24_1 b6_0;
mov in2239_28_1 b7_0;
mov in2239_32_1 b8_0;
mov in2239_36_1 b9_0;
mov x20229_1 in1228_36_1;
mov x21230_1 in1228_32_1;
mov x19231_1 in1228_28_1;
mov x17232_1 in1228_24_1;
mov x15233_1 in1228_20_1;
mov x13234_1 in1228_16_1;
mov x11235_1 in1228_12_1;
mov x9236_1 in1228_8_1;
mov x7237_1 in1228_4_1;
mov x5238_1 in1228_0_1;
mov x38240_1 in2239_36_1;
mov x39241_1 in2239_32_1;
mov x37242_1 in2239_28_1;
mov x35243_1 in2239_24_1;
mov x33244_1 in2239_20_1;
mov x31245_1 in2239_16_1;
mov x29246_1 in2239_12_1;
mov x27247_1 in2239_8_1;
mov x25248_1 in2239_4_1;
mov x23249_1 in2239_0_1;
mulj x40250_1 x23249_1 x5238_1;
mulj v4_1 x23249_1 x7237_1;
mulj v6_1 x5238_1 x25248_1;
add v407_1 v4_1 v6_1;
mul v7_1 x25248_1 2@uint32;
mulj v9_1 x7237_1 v7_1;
mulj v11_1 x23249_1 x9236_1;
add v403_1 v9_1 v11_1;
mulj v14_1 x5238_1 x27247_1;
add v404_1 v14_1 v403_1;
mulj v15_1 x25248_1 x9236_1;
mulj v16_1 x7237_1 x27247_1;
add v398_1 v15_1 v16_1;
mulj v19_1 x5238_1 x29246_1;
mulj v21_1 x23249_1 x11235_1;
add v399_1 v19_1 v398_1;
add v400_1 v21_1 v399_1;
mulj v23_1 x9236_1 x27247_1;
mulj v24_1 x25248_1 x11235_1;
mulj v25_1 x7237_1 x29246_1;
add v26_1 v24_1 v25_1;
mul v27_1 v26_1 2@uint64;
mulj v30_1 x5238_1 x31245_1;
add v392_1 v23_1 v30_1;
mulj v32_1 x23249_1 x13234_1;
add v393_1 v32_1 v392_1;
add v394_1 v27_1 v393_1;
mulj v34_1 x27247_1 x11235_1;
mulj v35_1 x9236_1 x29246_1;
add v384_1 v34_1 v35_1;
mulj v37_1 x7237_1 x31245_1;
mulj v38_1 x25248_1 x13234_1;
add v385_1 v37_1 v384_1;
add v386_1 v38_1 v385_1;
mulj v42_1 x5238_1 x33244_1;
mulj v44_1 x23249_1 x15233_1;
add v387_1 v42_1 v386_1;
add v388_1 v44_1 v387_1;
mulj v46_1 x29246_1 x11235_1;
mulj v47_1 x25248_1 x15233_1;
add v48_1 v46_1 v47_1;
mulj v49_1 x7237_1 x33244_1;
add v50_1 v48_1 v49_1;
mul v51_1 v50_1 2@uint64;
mulj v52_1 x27247_1 x13234_1;
mulj v55_1 x23249_1 x17232_1;
add v376_1 v52_1 v55_1;
mulj v56_1 x9236_1 x31245_1;
add v377_1 v56_1 v376_1;
mulj v60_1 x5238_1 x35243_1;
add v378_1 v60_1 v377_1;
add v379_1 v51_1 v378_1;
mulj v61_1 x29246_1 x13234_1;
mulj v62_1 x11235_1 x31245_1;
add v366_1 v61_1 v62_1;
mulj v64_1 x9236_1 x33244_1;
mulj v65_1 x27247_1 x15233_1;
add v367_1 v64_1 v366_1;
add v368_1 v65_1 v367_1;
mulj v68_1 x7237_1 x35243_1;
mulj v69_1 x25248_1 x17232_1;
add v369_1 v68_1 v368_1;
add v370_1 v69_1 v369_1;
mulj v73_1 x5238_1 x37242_1;
mulj v75_1 x23249_1 x19231_1;
add v371_1 v73_1 v370_1;
add v372_1 v75_1 v371_1;
mulj v77_1 x31245_1 x13234_1;
mulj v78_1 x29246_1 x15233_1;
mulj v79_1 x11235_1 x33244_1;
add v445_1 v78_1 v79_1;
mulj v81_1 x7237_1 x37242_1;
mulj v82_1 x25248_1 x19231_1;
add v446_1 v81_1 v445_1;
add v84_1 v82_1 v446_1;
mul v85_1 v84_1 2@uint64;
mulj v87_1 x9236_1 x35243_1;
add v356_1 v77_1 v87_1;
mulj v88_1 x27247_1 x17232_1;
add v357_1 v88_1 v356_1;
mulj v92_1 x5238_1 x39241_1;
add v358_1 v92_1 v357_1;
mulj v94_1 x23249_1 x21230_1;
add v359_1 v94_1 v358_1;
mulj v96_1 x31245_1 x15233_1;
mulj v97_1 x13234_1 x33244_1;
add v346_1 v96_1 v97_1;
mulj v99_1 x11235_1 x35243_1;
mulj v100_1 x29246_1 x17232_1;
add v347_1 v99_1 v346_1;
add v348_1 v100_1 v347_1;
mulj v103_1 x9236_1 x37242_1;
mulj v104_1 x27247_1 x19231_1;
add v349_1 v103_1 v348_1;
add v350_1 v104_1 v349_1;
mulj v107_1 x7237_1 x39241_1;
mulj v108_1 x25248_1 x21230_1;
add v351_1 v107_1 v350_1;
add v352_1 v108_1 v351_1;
mulj v112_1 x5238_1 x38240_1;
mulj v114_1 x23249_1 x20229_1;
add v353_1 v112_1 v352_1;
add x49259_1 v114_1 v353_1;
mulj v116_1 x33244_1 x15233_1;
mulj v117_1 x29246_1 x19231_1;
add v442_1 v116_1 v117_1;
mulj v119_1 x25248_1 x20229_1;
mulj v120_1 x11235_1 x37242_1;
add v443_1 v119_1 v442_1;
add v122_1 v120_1 v443_1;
mulj v123_1 x7237_1 x38240_1;
add v124_1 v122_1 v123_1;
mul v125_1 v124_1 2@uint64;
mulj v126_1 x31245_1 x17232_1;
mulj v128_1 x27247_1 x21230_1;
add v438_1 v126_1 v128_1;
mulj v129_1 x13234_1 x35243_1;
add v439_1 v129_1 v438_1;
mulj v132_1 x9236_1 x39241_1;
add v440_1 v132_1 v439_1;
add x50260_1 v125_1 v440_1;
mulj v133_1 x33244_1 x17232_1;
mulj v134_1 x15233_1 x35243_1;
add v431_1 v133_1 v134_1;
mulj v136_1 x13234_1 x37242_1;
mulj v137_1 x31245_1 x19231_1;
add v432_1 v136_1 v431_1;
add v433_1 v137_1 v432_1;
mulj v140_1 x11235_1 x39241_1;
mulj v141_1 x29246_1 x21230_1;
add v434_1 v140_1 v433_1;
add v435_1 v141_1 v434_1;
mulj v144_1 x9236_1 x38240_1;
mulj v145_1 x27247_1 x20229_1;
add v436_1 v144_1 v435_1;
add x51261_1 v145_1 v436_1;
mulj v147_1 x17232_1 x35243_1;
mulj v148_1 x33244_1 x19231_1;
mulj v149_1 x15233_1 x37242_1;
add v426_1 v148_1 v149_1;
mulj v151_1 x11235_1 x38240_1;
mulj v152_1 x29246_1 x20229_1;
add v427_1 v151_1 v426_1;
add v154_1 v152_1 v427_1;
mul v155_1 v154_1 2@uint64;
mulj v157_1 x13234_1 x39241_1;
add v423_1 v147_1 v157_1;
mulj v158_1 x31245_1 x21230_1;
add v424_1 v158_1 v423_1;
add x52262_1 v155_1 v424_1;
mulj v160_1 x35243_1 x19231_1;
mulj v161_1 x17232_1 x37242_1;
add v418_1 v160_1 v161_1;
mulj v163_1 x15233_1 x39241_1;
mulj v164_1 x33244_1 x21230_1;
add v419_1 v163_1 v418_1;
add v420_1 v164_1 v419_1;
mulj v167_1 x13234_1 x38240_1;
mulj v168_1 x31245_1 x20229_1;
add v421_1 v167_1 v420_1;
add x53263_1 v168_1 v421_1;
mulj v170_1 x37242_1 x19231_1;
mulj v171_1 x33244_1 x20229_1;
add v172_1 v170_1 v171_1;
mulj v173_1 x15233_1 x38240_1;
add v174_1 v172_1 v173_1;
mul v175_1 v174_1 2@uint64;
mulj v176_1 x35243_1 x21230_1;
mulj v178_1 x17232_1 x39241_1;
add v415_1 v176_1 v178_1;
add x54264_1 v175_1 v415_1;
mulj v179_1 x37242_1 x21230_1;
mulj v180_1 x19231_1 x39241_1;
add v413_1 v179_1 v180_1;
mulj v182_1 x17232_1 x38240_1;
mulj v183_1 x35243_1 x20229_1;
add v414_1 v182_1 v413_1;
add x55265_1 v183_1 v414_1;
mulj v185_1 x39241_1 x21230_1;
mulj v186_1 x37242_1 x20229_1;
mulj v187_1 x19231_1 x38240_1;
add v188_1 v186_1 v187_1;
mul v189_1 v188_1 2@uint64;
add x56266_1 v185_1 v189_1;
mulj v190_1 x39241_1 x20229_1;
mulj v191_1 x21230_1 x38240_1;
add x57267_1 v190_1 v191_1;
mul v192_1 x38240_1 2@uint32;
mulj x58268_1 x20229_1 v192_1;
add v360_1 x58268_1 v359_1;
split tmp1_1 tmp2_1 x58268_1 60;
shl v194_1 tmp2_1 4;
assume tmp1_1 = 0 && true;
add v361_1 v194_1 v360_1;
split tmp1_2 tmp2_2 x58268_1 63;
shl v195_1 tmp2_2 1;
assume tmp1_2 = 0 && true;
add v362_1 v195_1 v361_1;
add x61271_1 v85_1 v362_1;
split tmp1_3 tmp2_3 x57267_1 60;
shl v196_1 tmp2_3 4;
assume tmp1_3 = 0 && true;
add v373_1 x57267_1 v372_1;
split tmp1_4 tmp2_4 x57267_1 63;
shl v197_1 tmp2_4 1;
assume tmp1_4 = 0 && true;
add v374_1 v196_1 v373_1;
add x64274_1 v197_1 v374_1;
split tmp1_5 tmp2_5 x56266_1 60;
shl v198_1 tmp2_5 4;
assume tmp1_5 = 0 && true;
add v380_1 x56266_1 v379_1;
split tmp1_6 tmp2_6 x56266_1 63;
shl v199_1 tmp2_6 1;
assume tmp1_6 = 0 && true;
add v381_1 v198_1 v380_1;
add x67277_1 v199_1 v381_1;
split tmp1_7 tmp2_7 x55265_1 60;
shl v200_1 tmp2_7 4;
assume tmp1_7 = 0 && true;
add v389_1 x55265_1 v388_1;
split tmp1_8 tmp2_8 x55265_1 63;
shl v201_1 tmp2_8 1;
assume tmp1_8 = 0 && true;
add v390_1 v200_1 v389_1;
add x70280_1 v201_1 v390_1;
split tmp1_9 tmp2_9 x54264_1 60;
shl v202_1 tmp2_9 4;
assume tmp1_9 = 0 && true;
add v395_1 x54264_1 v394_1;
split tmp1_10 tmp2_10 x54264_1 63;
shl v203_1 tmp2_10 1;
assume tmp1_10 = 0 && true;
add v396_1 v202_1 v395_1;
add x73283_1 v203_1 v396_1;
split tmp1_11 tmp2_11 x53263_1 60;
shl v204_1 tmp2_11 4;
assume tmp1_11 = 0 && true;
add v401_1 x53263_1 v400_1;
split tmp1_12 tmp2_12 x53263_1 63;
shl v205_1 tmp2_12 1;
assume tmp1_12 = 0 && true;
add v402_1 v204_1 v401_1;
add x76286_1 v205_1 v402_1;
split tmp1_13 tmp2_13 x52262_1 60;
shl v206_1 tmp2_13 4;
assume tmp1_13 = 0 && true;
add v405_1 x52262_1 v404_1;
split tmp1_14 tmp2_14 x52262_1 63;
shl v207_1 tmp2_14 1;
assume tmp1_14 = 0 && true;
add v406_1 v206_1 v405_1;
add x79289_1 v207_1 v406_1;
split tmp1_15 tmp2_15 x51261_1 60;
shl v208_1 tmp2_15 4;
assume tmp1_15 = 0 && true;
add v408_1 x51261_1 v407_1;
split tmp1_16 tmp2_16 x51261_1 63;
shl v209_1 tmp2_16 1;
assume tmp1_16 = 0 && true;
add v409_1 v208_1 v408_1;
add x82292_1 v209_1 v409_1;
split tmp1_17 tmp2_17 x50260_1 60;
shl v210_1 tmp2_17 4;
assume tmp1_17 = 0 && true;
add v410_1 x40250_1 x50260_1;
split tmp1_18 tmp2_18 x50260_1 63;
shl v211_1 tmp2_18 1;
assume tmp1_18 = 0 && true;
add v411_1 v210_1 v410_1;
add x85295_1 v211_1 v411_1;
split x86296_1 tmp_to_use_1 x85295_1 26;
cast v212_1@uint32 x85295_1;
and x87297_1@uint32 v212_1 67108863@uint32;
vpc tmp_to_use_p_1@uint32 tmp_to_use_1;
assume x87297_1 = tmp_to_use_p_1 && true;
add x88298_1 x82292_1 x86296_1;
split x89299_1 tmp_to_use_2 x88298_1 25;
cast v213_1@uint32 x88298_1;
and x90300_1@uint32 v213_1 33554431@uint32;
vpc tmp_to_use_p_2@uint32 tmp_to_use_2;
assume x90300_1 = tmp_to_use_p_2 && true;
add x91301_1 x79289_1 x89299_1;
split x92302_1 tmp_to_use_3 x91301_1 26;
cast v214_1@uint32 x91301_1;
and x93303_1@uint32 v214_1 67108863@uint32;
vpc tmp_to_use_p_3@uint32 tmp_to_use_3;
assume x93303_1 = tmp_to_use_p_3 && true;
add x94304_1 x76286_1 x92302_1;
split x95305_1 tmp_to_use_4 x94304_1 25;
cast v215_1@uint32 x94304_1;
and x96306_1@uint32 v215_1 33554431@uint32;
vpc tmp_to_use_p_4@uint32 tmp_to_use_4;
assume x96306_1 = tmp_to_use_p_4 && true;
add x97307_1 x73283_1 x95305_1;
split x98308_1 tmp_to_use_5 x97307_1 26;
cast v216_1@uint32 x97307_1;
and x99309_1@uint32 v216_1 67108863@uint32;
vpc tmp_to_use_p_5@uint32 tmp_to_use_5;
assume x99309_1 = tmp_to_use_p_5 && true;
add x100310_1 x70280_1 x98308_1;
split x101311_1 tmp_to_use_6 x100310_1 25;
cast v217_1@uint32 x100310_1;
and x102312_1@uint32 v217_1 33554431@uint32;
vpc tmp_to_use_p_6@uint32 tmp_to_use_6;
assume x102312_1 = tmp_to_use_p_6 && true;
add x103313_1 x67277_1 x101311_1;
split x104314_1 tmp_to_use_7 x103313_1 26;
cast v218_1@uint32 x103313_1;
and x105315_1@uint32 v218_1 67108863@uint32;
vpc tmp_to_use_p_7@uint32 tmp_to_use_7;
assume x105315_1 = tmp_to_use_p_7 && true;
add x106316_1 x64274_1 x104314_1;
split x107317_1 tmp_to_use_8 x106316_1 25;
cast v219_1@uint32 x106316_1;
and x108318_1@uint32 v219_1 33554431@uint32;
vpc tmp_to_use_p_8@uint32 tmp_to_use_8;
assume x108318_1 = tmp_to_use_p_8 && true;
add x109319_1 x61271_1 x107317_1;
split x110320_1 tmp_to_use_9 x109319_1 26;
cast v220_1@uint32 x109319_1;
and x111321_1@uint32 v220_1 67108863@uint32;
vpc tmp_to_use_p_9@uint32 tmp_to_use_9;
assume x111321_1 = tmp_to_use_p_9 && true;
add x112322_1 x49259_1 x110320_1;
split x113323_1 tmp_to_use_10 x112322_1 25;
cast v221_1@uint32 x112322_1;
and x114324_1@uint32 v221_1 33554431@uint32;
vpc tmp_to_use_p_10@uint32 tmp_to_use_10;
assume x114324_1 = tmp_to_use_p_10 && true;
vpc v222_1@uint64 x87297_1;
mul v223_1 x113323_1 19@uint64;
add x115325_1 v222_1 v223_1;
split v224_1 tmp_to_use_11 x115325_1 26;
vpc x116326_1@uint32 v224_1;
cast v225_1@uint32 x115325_1;
and x117327_1@uint32 v225_1 67108863@uint32;
vpc tmp_to_use_p_11@uint32 tmp_to_use_11;
assume x117327_1 = tmp_to_use_p_11 && true;
add x118328_1 x90300_1 x116326_1;
split x119329_1 tmp_to_use_12 x118328_1 25;
and x120330_1@uint32 x118328_1 33554431@uint32;
vpc tmp_to_use_p_12@uint32 tmp_to_use_12;
assume x120330_1 = tmp_to_use_p_12 && true;
mov out331_0_1 x117327_1;
mov out331_4_1 x120330_1;
add v226_1 x93303_1 x119329_1;
mov out331_8_1 v226_1;
mov out331_12_1 x96306_1;
mov out331_16_1 x99309_1;
mov out331_20_1 x102312_1;
mov out331_24_1 x105315_1;
mov out331_28_1 x108318_1;
mov out331_32_1 x111321_1;
mov out331_36_1 x114324_1;
mov c0_1 out331_0_1;
mov c1_1 out331_4_1;
mov c2_1 out331_8_1;
mov c3_1 out331_12_1;
mov c4_1 out331_16_1;
mov c5_1 out331_20_1;
mov c6_1 out331_24_1;
mov c7_1 out331_28_1;
mov c8_1 out331_32_1;
mov c9_1 out331_36_1;
{ c0_1 + (c1_1 * 67108864) + (c2_1 * 2251799813685248) + (c3_1 * 151115727451828646838272) + (c4_1 * 5070602400912917605986812821504) + (c5_1 * 340282366920938463463374607431768211456) + (c6_1 * 11417981541647679048466287755595961091061972992) + (c7_1 * 766247770432944429179173513575154591809369561091801088) + (c8_1 * 25711008708143844408671393477458601640355247900524685364822016) + (c9_1 * 1725436586697640946858688965569256363112777243042596638790631055949824) = (a0_0 + (a1_0 * 67108864) + (a2_0 * 2251799813685248) + (a3_0 * 151115727451828646838272) + (a4_0 * 5070602400912917605986812821504) + (a5_0 * 340282366920938463463374607431768211456) + (a6_0 * 11417981541647679048466287755595961091061972992) + (a7_0 * 766247770432944429179173513575154591809369561091801088) + (a8_0 * 25711008708143844408671393477458601640355247900524685364822016) + (a9_0 * 1725436586697640946858688965569256363112777243042596638790631055949824)) * (b0_0 + (b1_0 * 67108864) + (b2_0 * 2251799813685248) + (b3_0 * 151115727451828646838272) + (b4_0 * 5070602400912917605986812821504) + (b5_0 * 340282366920938463463374607431768211456) + (b6_0 * 11417981541647679048466287755595961091061972992) + (b7_0 * 766247770432944429179173513575154591809369561091801088) + (b8_0 * 25711008708143844408671393477458601640355247900524685364822016) + (b9_0 * 1725436586697640946858688965569256363112777243042596638790631055949824)) (mod 57896044618658097711785492504343953926634992332820282019728792003956564819968 - 19) && and [tmp1_1 = 0@64, tmp1_2 = 0@64, tmp1_3 = 0@64, tmp1_4 = 0@64, tmp1_5 = 0@64, tmp1_6 = 0@64, tmp1_7 = 0@64, tmp1_8 = 0@64, tmp1_9 = 0@64, tmp1_10 = 0@64, tmp1_11 = 0@64, tmp1_12 = 0@64, tmp1_13 = 0@64, tmp1_14 = 0@64, tmp1_15 = 0@64, tmp1_16 = 0@64, tmp1_17 = 0@64, tmp1_18 = 0@64, x87297_1 = tmp_to_use_p_1, x90300_1 = tmp_to_use_p_2, x93303_1 = tmp_to_use_p_3, x96306_1 = tmp_to_use_p_4, x99309_1 = tmp_to_use_p_5, x102312_1 = tmp_to_use_p_6, x105315_1 = tmp_to_use_p_7, x108318_1 = tmp_to_use_p_8, x111321_1 = tmp_to_use_p_9, x114324_1 = tmp_to_use_p_10, x117327_1 = tmp_to_use_p_11, x120330_1 = tmp_to_use_p_12, c0_1 <=u 73819750@32, c1_1 <=u 36909875@32, c2_1 <=u 73819750@32, c3_1 <=u 36909875@32, c4_1 <=u 73819750@32, c5_1 <=u 36909875@32, c6_1 <=u 73819750@32, c7_1 <=u 36909875@32, c8_1 <=u 73819750@32, c9_1 <=u 36909875@32] }
