(* @frege
===== Verification =====
Prefix: OCAMLRUNPARAM=s=8G
Options: -v -jobs 16 -fork -cadical /home/mht208/Sources/cadical/cadical-rel-1.3.0/build/cadical  -sat_cert grat  -gratchk /home/mht208/Sources/grat/gratchk/code/gratchk  -gratgen /home/mht208/Sources/grat/gratgen/gratgen  -no_carry_constraint -tmpdir .
Command: OCAMLRUNPARAM=s=8G ./coqcryptoline.exe -v -jobs 16 -fork -cadical /home/mht208/Sources/cadical/cadical-rel-1.3.0/build/cadical  -sat_cert grat  -gratchk /home/mht208/Sources/grat/gratchk/code/gratchk  -gratgen /home/mht208/Sources/grat/gratgen/gratgen  -no_carry_constraint -tmpdir .  fe_sqr_impl_tuned.cl

Results of checking CNF formulas:       [OK]            92.184027 seconds
Finding polynomial coefficients         [OK]            0.365072 seconds
Verification result:                    [OK]            113.739841 seconds
*)

proc main(uint32 a0_0, uint32 a1_0, uint32 a2_0, uint32 a3_0, uint32 a4_0, uint32 a5_0, uint32 a6_0, uint32 a7_0, uint32 a8_0, uint32 a9_0) =
{ true && and [a0_0 <=u 221459250@32, a1_0 <=u 110729625@32, a2_0 <=u 221459250@32, a3_0 <=u 110729625@32, a4_0 <=u 221459250@32, a5_0 <=u 110729625@32, a6_0 <=u 221459250@32, a7_0 <=u 110729625@32, a8_0 <=u 221459250@32, a9_0 <=u 110729625@32] }
mov in1147_0_1 a0_0;
mov in1147_4_1 a1_0;
mov in1147_8_1 a2_0;
mov in1147_12_1 a3_0;
mov in1147_16_1 a4_0;
mov in1147_20_1 a5_0;
mov in1147_24_1 a6_0;
mov in1147_28_1 a7_0;
mov in1147_32_1 a8_0;
mov in1147_36_1 a9_0;
mov x17148_1 in1147_36_1;
mov x18149_1 in1147_32_1;
mov x16150_1 in1147_28_1;
mov x14151_1 in1147_24_1;
mov x12152_1 in1147_20_1;
mov x10153_1 in1147_16_1;
mov x8154_1 in1147_12_1;
mov x6155_1 in1147_8_1;
mov x4156_1 in1147_4_1;
mov x2157_1 in1147_0_1;
mulj x19158_1 x2157_1 x2157_1;
mul v2_1 x2157_1 2@uint32;
mulj x20159_1 v2_1 x4156_1;
mulj v5_1 x4156_1 x4156_1;
mulj v7_1 x2157_1 x6155_1;
add v8_1 v5_1 v7_1;
mul x21160_1 v8_1 2@uint64;
mulj v9_1 x4156_1 x6155_1;
mulj v11_1 x2157_1 x8154_1;
add v12_1 v9_1 v11_1;
mul x22161_1 v12_1 2@uint64;
mulj v13_1 x6155_1 x6155_1;
mul v14_1 x4156_1 4@uint32;
mulj v16_1 x8154_1 v14_1;
mulj v19_1 v2_1 x10153_1;
add v259_1 v16_1 v19_1;
add v260_1 v13_1 v259_1;
mulj v20_1 x6155_1 x8154_1;
mulj v21_1 x4156_1 x10153_1;
add v22_1 v20_1 v21_1;
mulj v24_1 x2157_1 x12152_1;
add v25_1 v22_1 v24_1;
mul x24163_1 v25_1 2@uint64;
mulj v26_1 x8154_1 x8154_1;
mulj v27_1 x6155_1 x10153_1;
add v28_1 v26_1 v27_1;
mul v29_1 x4156_1 2@uint32;
mulj v31_1 x12152_1 v29_1;
mulj v33_1 x2157_1 x14151_1;
add v281_1 v28_1 v33_1;
add v35_1 v31_1 v281_1;
mul x25164_1 v35_1 2@uint64;
mulj v36_1 x8154_1 x10153_1;
mulj v37_1 x6155_1 x12152_1;
add v279_1 v36_1 v37_1;
mulj v40_1 x2157_1 x16150_1;
mulj v41_1 x4156_1 x14151_1;
add v280_1 v40_1 v279_1;
add v43_1 v41_1 v280_1;
mul x26165_1 v43_1 2@uint64;
mulj v44_1 x10153_1 x10153_1;
mulj v45_1 x6155_1 x14151_1;
mulj v47_1 x2157_1 x18149_1;
add v48_1 v45_1 v47_1;
mulj v49_1 x4156_1 x16150_1;
mulj v50_1 x8154_1 x12152_1;
add v51_1 v49_1 v50_1;
mul v52_1 v51_1 2@uint64;
add v53_1 v48_1 v52_1;
mul v54_1 v53_1 2@uint64;
mulj v55_1 x10153_1 x12152_1;
mulj v56_1 x8154_1 x14151_1;
add v276_1 v55_1 v56_1;
mulj v58_1 x4156_1 x18149_1;
mulj v59_1 x6155_1 x16150_1;
add v277_1 v58_1 v276_1;
add v61_1 v59_1 v277_1;
mulj v63_1 x2157_1 x17148_1;
add v64_1 v61_1 v63_1;
mul x28167_1 v64_1 2@uint64;
mulj v65_1 x12152_1 x12152_1;
mulj v66_1 x10153_1 x14151_1;
add v67_1 v65_1 v66_1;
mulj v68_1 x8154_1 x16150_1;
mulj v69_1 x4156_1 x17148_1;
add v70_1 v68_1 v69_1;
mul v71_1 v70_1 2@uint64;
mulj v72_1 x6155_1 x18149_1;
add v274_1 v67_1 v72_1;
add v74_1 v71_1 v274_1;
mul x29168_1 v74_1 2@uint64;
mulj v75_1 x12152_1 x14151_1;
mulj v76_1 x10153_1 x16150_1;
add v272_1 v75_1 v76_1;
mulj v78_1 x6155_1 x17148_1;
mulj v79_1 x8154_1 x18149_1;
add v273_1 v78_1 v272_1;
add v81_1 v79_1 v273_1;
mul x30169_1 v81_1 2@uint64;
mulj v82_1 x14151_1 x14151_1;
mulj v83_1 x10153_1 x18149_1;
mulj v84_1 x12152_1 x16150_1;
mulj v85_1 x8154_1 x17148_1;
add v86_1 v84_1 v85_1;
mul v87_1 v86_1 2@uint64;
add v88_1 v83_1 v87_1;
mul v89_1 v88_1 2@uint64;
add x31170_1 v82_1 v89_1;
mulj v90_1 x14151_1 x16150_1;
mulj v91_1 x12152_1 x18149_1;
add v92_1 v90_1 v91_1;
mulj v93_1 x10153_1 x17148_1;
add v94_1 v92_1 v93_1;
mul x32171_1 v94_1 2@uint64;
mulj v95_1 x16150_1 x16150_1;
mulj v96_1 x14151_1 x18149_1;
add v97_1 v95_1 v96_1;
mul v98_1 x12152_1 2@uint32;
mulj v100_1 x17148_1 v98_1;
add v101_1 v97_1 v100_1;
mul x33172_1 v101_1 2@uint64;
mulj v102_1 x16150_1 x18149_1;
mulj v103_1 x14151_1 x17148_1;
add v104_1 v102_1 v103_1;
mul x34173_1 v104_1 2@uint64;
mulj v105_1 x18149_1 x18149_1;
mul v106_1 x16150_1 4@uint32;
mulj v108_1 x17148_1 v106_1;
add x35174_1 v105_1 v108_1;
mul v109_1 x18149_1 2@uint32;
mulj x36175_1 x17148_1 v109_1;
mul v111_1 x17148_1 2@uint32;
mulj x37176_1 x17148_1 v111_1;
add v251_1 v44_1 x37176_1;
split tmp1_1 tmp2_1 x37176_1 60;
shl v113_1 tmp2_1 4;
assume tmp1_1 = 0 && true;
add v250_1 v113_1 v251_1;
split tmp1_2 tmp2_2 x37176_1 63;
shl v114_1 tmp2_2 1;
assume tmp1_2 = 0 && true;
add v252_1 v114_1 v250_1;
add x40179_1 v54_1 v252_1;
split tmp1_3 tmp2_3 x36175_1 60;
shl v115_1 tmp2_3 4;
assume tmp1_3 = 0 && true;
split tmp1_4 tmp2_4 x36175_1 63;
shl v116_1 tmp2_4 1;
assume tmp1_4 = 0 && true;
add v253_1 v115_1 v116_1;
add v254_1 x36175_1 v253_1;
add x43182_1 x26165_1 v254_1;
split tmp1_5 tmp2_5 x35174_1 60;
shl v117_1 tmp2_5 4;
assume tmp1_5 = 0 && true;
split tmp1_6 tmp2_6 x35174_1 63;
shl v118_1 tmp2_6 1;
assume tmp1_6 = 0 && true;
add v255_1 v117_1 v118_1;
add v256_1 x35174_1 v255_1;
add x46185_1 x25164_1 v256_1;
split tmp1_7 tmp2_7 x34173_1 60;
shl v119_1 tmp2_7 4;
assume tmp1_7 = 0 && true;
add v257_1 v119_1 x24163_1;
split tmp1_8 tmp2_8 x34173_1 63;
shl v120_1 tmp2_8 1;
assume tmp1_8 = 0 && true;
add v258_1 x34173_1 v257_1;
add x49188_1 v120_1 v258_1;
split tmp1_9 tmp2_9 x33172_1 60;
shl v121_1 tmp2_9 4;
assume tmp1_9 = 0 && true;
add v261_1 x33172_1 v260_1;
split tmp1_10 tmp2_10 x33172_1 63;
shl v122_1 tmp2_10 1;
assume tmp1_10 = 0 && true;
add v262_1 v121_1 v261_1;
add x52191_1 v122_1 v262_1;
split tmp1_11 tmp2_11 x32171_1 60;
shl v123_1 tmp2_11 4;
assume tmp1_11 = 0 && true;
add v263_1 x22161_1 x32171_1;
split tmp1_12 tmp2_12 x32171_1 63;
shl v124_1 tmp2_12 1;
assume tmp1_12 = 0 && true;
add v264_1 v123_1 v263_1;
add x55194_1 v124_1 v264_1;
split tmp1_13 tmp2_13 x31170_1 60;
shl v125_1 tmp2_13 4;
assume tmp1_13 = 0 && true;
add v265_1 x21160_1 x31170_1;
split tmp1_14 tmp2_14 x31170_1 63;
shl v126_1 tmp2_14 1;
assume tmp1_14 = 0 && true;
add v266_1 v125_1 v265_1;
add x58197_1 v126_1 v266_1;
split tmp1_15 tmp2_15 x30169_1 60;
shl v127_1 tmp2_15 4;
assume tmp1_15 = 0 && true;
add v267_1 x20159_1 x30169_1;
split tmp1_16 tmp2_16 x30169_1 63;
shl v128_1 tmp2_16 1;
assume tmp1_16 = 0 && true;
add v268_1 v127_1 v267_1;
add x61200_1 v128_1 v268_1;
split tmp1_17 tmp2_17 x29168_1 60;
shl v129_1 tmp2_17 4;
assume tmp1_17 = 0 && true;
add v269_1 x19158_1 x29168_1;
split tmp1_18 tmp2_18 x29168_1 63;
shl v130_1 tmp2_18 1;
assume tmp1_18 = 0 && true;
add v270_1 v129_1 v269_1;
add x64203_1 v130_1 v270_1;
split x65204_1 tmp_to_use_1 x64203_1 26;
cast v131_1@uint32 x64203_1;
and x66205_1@uint32 v131_1 67108863@uint32;
vpc tmp_to_use_p_1@uint32 tmp_to_use_1;
assume x66205_1 = tmp_to_use_p_1 && true;
add x67206_1 x61200_1 x65204_1;
split x68207_1 tmp_to_use_2 x67206_1 25;
cast v132_1@uint32 x67206_1;
and x69208_1@uint32 v132_1 33554431@uint32;
vpc tmp_to_use_p_2@uint32 tmp_to_use_2;
assume x69208_1 = tmp_to_use_p_2 && true;
add x70209_1 x58197_1 x68207_1;
split x71210_1 tmp_to_use_3 x70209_1 26;
cast v133_1@uint32 x70209_1;
and x72211_1@uint32 v133_1 67108863@uint32;
vpc tmp_to_use_p_3@uint32 tmp_to_use_3;
assume x72211_1 = tmp_to_use_p_3 && true;
add x73212_1 x55194_1 x71210_1;
split x74213_1 tmp_to_use_4 x73212_1 25;
cast v134_1@uint32 x73212_1;
and x75214_1@uint32 v134_1 33554431@uint32;
vpc tmp_to_use_p_4@uint32 tmp_to_use_4;
assume x75214_1 = tmp_to_use_p_4 && true;
add x76215_1 x52191_1 x74213_1;
split x77216_1 tmp_to_use_5 x76215_1 26;
cast v135_1@uint32 x76215_1;
and x78217_1@uint32 v135_1 67108863@uint32;
vpc tmp_to_use_p_5@uint32 tmp_to_use_5;
assume x78217_1 = tmp_to_use_p_5 && true;
add x79218_1 x49188_1 x77216_1;
split x80219_1 tmp_to_use_6 x79218_1 25;
cast v136_1@uint32 x79218_1;
and x81220_1@uint32 v136_1 33554431@uint32;
vpc tmp_to_use_p_6@uint32 tmp_to_use_6;
assume x81220_1 = tmp_to_use_p_6 && true;
add x82221_1 x46185_1 x80219_1;
split x83222_1 tmp_to_use_7 x82221_1 26;
cast v137_1@uint32 x82221_1;
and x84223_1@uint32 v137_1 67108863@uint32;
vpc tmp_to_use_p_7@uint32 tmp_to_use_7;
assume x84223_1 = tmp_to_use_p_7 && true;
add x85224_1 x43182_1 x83222_1;
split x86225_1 tmp_to_use_8 x85224_1 25;
cast v138_1@uint32 x85224_1;
and x87226_1@uint32 v138_1 33554431@uint32;
vpc tmp_to_use_p_8@uint32 tmp_to_use_8;
assume x87226_1 = tmp_to_use_p_8 && true;
add x88227_1 x40179_1 x86225_1;
split x89228_1 tmp_to_use_9 x88227_1 26;
cast v139_1@uint32 x88227_1;
and x90229_1@uint32 v139_1 67108863@uint32;
vpc tmp_to_use_p_9@uint32 tmp_to_use_9;
assume x90229_1 = tmp_to_use_p_9 && true;
add x91230_1 x28167_1 x89228_1;
split x92231_1 tmp_to_use_10 x91230_1 25;
cast v140_1@uint32 x91230_1;
and x93232_1@uint32 v140_1 33554431@uint32;
vpc tmp_to_use_p_10@uint32 tmp_to_use_10;
assume x93232_1 = tmp_to_use_p_10 && true;
vpc v141_1@uint64 x66205_1;
mul v142_1 x92231_1 19@uint64;
add x94233_1 v141_1 v142_1;
split v143_1 tmp_to_use_11 x94233_1 26;
vpc x95234_1@uint32 v143_1;
cast v144_1@uint32 x94233_1;
and x96235_1@uint32 v144_1 67108863@uint32;
vpc tmp_to_use_p_11@uint32 tmp_to_use_11;
assume x96235_1 = tmp_to_use_p_11 && true;
add x97236_1 x69208_1 x95234_1;
split x98237_1 tmp_to_use_12 x97236_1 25;
and x99238_1@uint32 x97236_1 33554431@uint32;
vpc tmp_to_use_p_12@uint32 tmp_to_use_12;
assume x99238_1 = tmp_to_use_p_12 && true;
mov out239_0_1 x96235_1;
mov out239_4_1 x99238_1;
add v145_1 x72211_1 x98237_1;
mov out239_8_1 v145_1;
mov out239_12_1 x75214_1;
mov out239_16_1 x78217_1;
mov out239_20_1 x81220_1;
mov out239_24_1 x84223_1;
mov out239_28_1 x87226_1;
mov out239_32_1 x90229_1;
mov out239_36_1 x93232_1;
mov c0_1 out239_0_1;
mov c1_1 out239_4_1;
mov c2_1 out239_8_1;
mov c3_1 out239_12_1;
mov c4_1 out239_16_1;
mov c5_1 out239_20_1;
mov c6_1 out239_24_1;
mov c7_1 out239_28_1;
mov c8_1 out239_32_1;
mov c9_1 out239_36_1;
{ c0_1 + (c1_1 * 67108864) + (c2_1 * 2251799813685248) + (c3_1 * 151115727451828646838272) + (c4_1 * 5070602400912917605986812821504) + (c5_1 * 340282366920938463463374607431768211456) + (c6_1 * 11417981541647679048466287755595961091061972992) + (c7_1 * 766247770432944429179173513575154591809369561091801088) + (c8_1 * 25711008708143844408671393477458601640355247900524685364822016) + (c9_1 * 1725436586697640946858688965569256363112777243042596638790631055949824) = (a0_0 + (a1_0 * 67108864) + (a2_0 * 2251799813685248) + (a3_0 * 151115727451828646838272) + (a4_0 * 5070602400912917605986812821504) + (a5_0 * 340282366920938463463374607431768211456) + (a6_0 * 11417981541647679048466287755595961091061972992) + (a7_0 * 766247770432944429179173513575154591809369561091801088) + (a8_0 * 25711008708143844408671393477458601640355247900524685364822016) + (a9_0 * 1725436586697640946858688965569256363112777243042596638790631055949824)) * (a0_0 + (a1_0 * 67108864) + (a2_0 * 2251799813685248) + (a3_0 * 151115727451828646838272) + (a4_0 * 5070602400912917605986812821504) + (a5_0 * 340282366920938463463374607431768211456) + (a6_0 * 11417981541647679048466287755595961091061972992) + (a7_0 * 766247770432944429179173513575154591809369561091801088) + (a8_0 * 25711008708143844408671393477458601640355247900524685364822016) + (a9_0 * 1725436586697640946858688965569256363112777243042596638790631055949824)) (mod 57896044618658097711785492504343953926634992332820282019728792003956564819968 - 19) && and [tmp1_1 = 0@64, tmp1_2 = 0@64, tmp1_3 = 0@64, tmp1_4 = 0@64, tmp1_5 = 0@64, tmp1_6 = 0@64, tmp1_7 = 0@64, tmp1_8 = 0@64, tmp1_9 = 0@64, tmp1_10 = 0@64, tmp1_11 = 0@64, tmp1_12 = 0@64, tmp1_13 = 0@64, tmp1_14 = 0@64, tmp1_15 = 0@64, tmp1_16 = 0@64, tmp1_17 = 0@64, tmp1_18 = 0@64, x66205_1 = tmp_to_use_p_1, x69208_1 = tmp_to_use_p_2, x72211_1 = tmp_to_use_p_3, x75214_1 = tmp_to_use_p_4, x78217_1 = tmp_to_use_p_5, x81220_1 = tmp_to_use_p_6, x84223_1 = tmp_to_use_p_7, x87226_1 = tmp_to_use_p_8, x90229_1 = tmp_to_use_p_9, x93232_1 = tmp_to_use_p_10, x96235_1 = tmp_to_use_p_11, x99238_1 = tmp_to_use_p_12, c0_1 <=u 73819750@32, c1_1 <=u 36909875@32, c2_1 <=u 73819750@32, c3_1 <=u 36909875@32, c4_1 <=u 73819750@32, c5_1 <=u 36909875@32, c6_1 <=u 73819750@32, c7_1 <=u 36909875@32, c8_1 <=u 73819750@32, c9_1 <=u 36909875@32] }
