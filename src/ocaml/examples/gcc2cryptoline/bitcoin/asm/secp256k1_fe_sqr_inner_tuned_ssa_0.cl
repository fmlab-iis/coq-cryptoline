proc main(uint64 a0_0, uint64 a1_0, uint64 a2_0, uint64 a3_0, uint64 a4_0) =
{ true && and [a0_0 <u 72057594037927928@64, a1_0 <u 72057594037927928@64, a2_0 <u 72057594037927928@64, a3_0 <u 72057594037927928@64, a4_0 <u 4503599627370488@64] }
mul rax_2 a0_0 2@uint64;
mull rdx_1 rax_3 rax_2 a3_0;
mul rax_4 a1_0 2@uint64;
mull rdx_2 rax_5 rax_4 a2_0;
adds carry_1 rbx_2 rax_3 rax_5;
adc rcx_2 rdx_1 rdx_2 carry_1;
mull rdx_3 rax_7 a4_0 a4_0;
and rax_8@uint64 rax_7 4503599627370495@uint64;
mull rdx_5 rax_9 rax_8 68719492368@uint64;
adds carry_2 rbx_3 rbx_2 rax_9;
adc rcx_3 rcx_2 rdx_5 carry_2;
join tmpp_1 rdx_3 rax_7;
split r8_2 tmp_to_use_1 tmpp_1 52;
vpc r8_3@uint64 r8_2;
vpc tmp_to_use_p_1@uint64 tmp_to_use_1;
assume tmp_to_use_1 = rax_8 && true;
and rsi_2@uint64 rbx_3 4503599627370495@uint64;
join tmpp_2 rcx_3 rbx_3;
split rbx_4 tmp_to_use_2 tmpp_2 52;
vpc rbx_5@uint64 rbx_4;
vpc tmp_to_use_p_2@uint64 tmp_to_use_2;
assume tmp_to_use_2 = rsi_2 && true;
adds carry_3 r14_2 a4_0 a4_0;
assume carry_3 = 0 && true;
mull rdx_6 rax_11 a0_0 r14_2;
adds carry_4 rbx_6 rbx_5 rax_11;
adc rcx_5 0@uint64 rdx_6 carry_4;
mul rax_12 a1_0 2@uint64;
mull rdx_7 rax_13 rax_12 a3_0;
adds carry_5 rbx_7 rbx_6 rax_13;
adc rcx_6 rcx_5 rdx_7 carry_5;
mull rdx_8 rax_15 a2_0 a2_0;
adds carry_6 rbx_8 rbx_7 rax_15;
adc rcx_7 rcx_6 rdx_8 carry_6;
mull rdx_10 rax_17 r8_3 68719492368@uint64;
adds carry_7 rbx_9 rbx_8 rax_17;
adc rcx_8 rcx_7 rdx_10 carry_7;
and rsi_4@uint64 rbx_9 4503599627370495@uint64;
join tmpp_3 rcx_8 rbx_9;
split rbx_10 tmp_to_use_3 tmpp_3 52;
vpc rbx_11@uint64 rbx_10;
vpc tmp_to_use_p_3@uint64 tmp_to_use_3;
assume tmp_to_use_3 = rsi_4 && true;
split rax_19 tmp_to_use_4 rsi_4 48;
and rsi_5@uint64 rsi_4 281474976710655@uint64;
assume rsi_5 = tmp_to_use_4 && true;
mull rdx_11 rax_22 a0_0 a0_0;
mull rdx_12 rax_24 a1_0 r14_2;
adds carry_8 rbx_12 rbx_11 rax_24;
adc rcx_10 0@uint64 rdx_12 carry_8;
mul rax_25 a2_0 2@uint64;
mull rdx_13 rax_26 rax_25 a3_0;
adds carry_9 rbx_13 rbx_12 rax_26;
adc rcx_11 rcx_10 rdx_13 carry_9;
and rsi_7@uint64 rbx_13 4503599627370495@uint64;
join tmpp_4 rcx_11 rbx_13;
split rbx_14 tmp_to_use_5 tmpp_4 52;
vpc rbx_15@uint64 rbx_14;
vpc tmp_to_use_p_4@uint64 tmp_to_use_5;
assume tmp_to_use_5 = rsi_7 && true;
shl rsi_8 rsi_7 4;
or rsi_9@uint64 rsi_8 rax_19;
assume rsi_9 = rax_19 + rsi_8 && true;
mull rdx_14 rax_29 4294968273@uint64 rsi_9;
adds carry_10 r8_5 rax_22 rax_29;
adc r9_3 rdx_11 rdx_14 carry_10;
and rax_31@uint64 r8_5 4503599627370495@uint64;
join tmpp_5 r9_3 r8_5;
split r8_6 tmp_to_use_6 tmpp_5 52;
vpc r8_7@uint64 r8_6;
vpc tmp_to_use_p_5@uint64 tmp_to_use_6;
assume tmp_to_use_6 = rax_31 && true;
adds carry_11 r10_2 a0_0 a0_0;
assume carry_11 = 0 && true;
mull rdx_15 rax_33 r10_2 a1_0;
adds carry_12 r8_8 r8_7 rax_33;
adc r9_5 0@uint64 rdx_15 carry_12;
mull rdx_16 rax_35 a2_0 r14_2;
adds carry_13 rbx_16 rbx_15 rax_35;
adc rcx_13 0@uint64 rdx_16 carry_13;
mull rdx_17 rax_37 a3_0 a3_0;
adds carry_14 rbx_17 rbx_16 rax_37;
adc rcx_14 rcx_13 rdx_17 carry_14;
and rax_39@uint64 rbx_17 4503599627370495@uint64;
mull rdx_19 rax_40 rax_39 68719492368@uint64;
adds carry_15 r8_9 r8_8 rax_40;
adc r9_6 r9_5 rdx_19 carry_15;
join tmpp_6 rcx_14 rbx_17;
split rbx_18 tmp_to_use_7 tmpp_6 52;
vpc rbx_19@uint64 rbx_18;
vpc tmp_to_use_p_6@uint64 tmp_to_use_7;
assume tmp_to_use_7 = rax_39 && true;
and rax_42@uint64 r8_9 4503599627370495@uint64;
join tmpp_7 r9_6 r8_9;
split r8_10 tmp_to_use_8 tmpp_7 52;
vpc r8_11@uint64 r8_10;
vpc tmp_to_use_p_7@uint64 tmp_to_use_8;
assume tmp_to_use_8 = rax_42 && true;
mull rdx_20 rax_44 r10_2 a2_0;
adds carry_16 r8_12 r8_11 rax_44;
adc r9_8 0@uint64 rdx_20 carry_16;
mull rdx_21 rax_46 a1_0 a1_0;
adds carry_17 r8_13 r8_12 rax_46;
adc r9_9 r9_8 rdx_21 carry_17;
mull rdx_22 rax_48 a3_0 r14_2;
adds carry_18 rbx_20 rbx_19 rax_48;
adc rcx_16 0@uint64 rdx_22 carry_18;
and rax_50@uint64 rbx_20 4503599627370495@uint64;
mull rdx_24 rax_51 rax_50 68719492368@uint64;
adds carry_19 r8_14 r8_13 rax_51;
adc r9_10 r9_9 rdx_24 carry_19;
join tmpp_8 rcx_16 rbx_20;
split rbx_21 tmp_to_use_9 tmpp_8 52;
vpc rbx_22@uint64 rbx_21;
vpc tmp_to_use_p_8@uint64 tmp_to_use_9;
assume tmp_to_use_9 = rax_50 && true;
and rax_53@uint64 r8_14 4503599627370495@uint64;
join tmpp_9 r9_10 r8_14;
split r8_15 tmp_to_use_10 tmpp_9 52;
vpc r8_16@uint64 r8_15;
vpc tmp_to_use_p_9@uint64 tmp_to_use_10;
assume tmp_to_use_10 = rax_53 && true;
adds carry_20 r8_17 r8_16 rsi_2;
assume carry_20 = 0 && true;
mull rdx_26 rax_55 rbx_22 68719492368@uint64;
adds carry_21 r8_18 r8_17 rax_55;
adc r9_12 0@uint64 rdx_26 carry_21;
and rax_57@uint64 r8_18 4503599627370495@uint64;
join tmpp_10 r9_12 r8_18;
split r8_19 tmp_to_use_11 tmpp_10 52;
vpc r8_20@uint64 r8_19;
vpc tmp_to_use_p_10@uint64 tmp_to_use_11;
assume tmp_to_use_11 = rax_57 && true;
adds carry_22 r8_21 r8_20 rsi_5;
assume carry_22 = 0 && true;
{ rax_31 + (rax_42 * 4503599627370496) + (rax_53 * 20282409603651670423947251286016) + (rax_57 * 91343852333181432387730302044767688728495783936) + (r8_21 * 411376139330301510538742295639337626245683966408394965837152256) = (a0_0 + (a1_0 * 4503599627370496) + (a2_0 * 20282409603651670423947251286016) + (a3_0 * 91343852333181432387730302044767688728495783936) + (a4_0 * 411376139330301510538742295639337626245683966408394965837152256)) * (a0_0 + (a1_0 * 4503599627370496) + (a2_0 * 20282409603651670423947251286016) + (a3_0 * 91343852333181432387730302044767688728495783936) + (a4_0 * 411376139330301510538742295639337626245683966408394965837152256)) (mod 115792089237316195423570985008687907853269984665640564039457584007908834671663) && and [tmp_to_use_p_1 = rax_8, tmp_to_use_p_2 = rsi_2, carry_3 = 0@1, tmp_to_use_p_3 = rsi_4, rsi_5 = tmp_to_use_4, tmp_to_use_p_4 = rsi_7, rsi_9 = add (rax_19) (rsi_8), tmp_to_use_p_5 = rax_31, carry_11 = 0@1, tmp_to_use_p_6 = rax_39, tmp_to_use_p_7 = rax_42, tmp_to_use_p_8 = rax_50, tmp_to_use_p_9 = rax_53, carry_20 = 0@1, tmp_to_use_p_10 = rax_57, carry_22 = 0@1, rax_31 <u 9007199254740991@64, rax_42 <u 9007199254740991@64, rax_53 <u 9007199254740991@64, rax_57 <u 9007199254740991@64, r8_21 <u 562949953421311@64] }