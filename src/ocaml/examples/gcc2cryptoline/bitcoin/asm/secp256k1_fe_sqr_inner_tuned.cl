(* @frege
===== Verification =====
Prefix: OCAMLRUNPARAM=s=8G
Options: -v -jobs 16 -fork -cadical /home/mht208/Sources/cadical/cadical-rel-1.3.0/build/cadical  -sat_cert grat  -gratchk /home/mht208/Sources/grat/gratchk/code/gratchk  -gratgen /home/mht208/Sources/grat/gratgen/gratgen  -no_carry_constraint -tmpdir .
Command: OCAMLRUNPARAM=s=8G ./coqcryptoline.exe -v -jobs 16 -fork -cadical /home/mht208/Sources/cadical/cadical-rel-1.3.0/build/cadical  -sat_cert grat  -gratchk /home/mht208/Sources/grat/gratchk/code/gratchk  -gratgen /home/mht208/Sources/grat/gratgen/gratgen  -no_carry_constraint -tmpdir .  secp256k1_fe_sqr_inner_tuned.cl

Results of checking CNF formulas:       [OK]            53.428507 seconds
Finding polynomial coefficients         [OK]            0.153779 seconds
Verification result:                    [OK]            65.072060 seconds
*)

proc main(uint64 a0_0, uint64 a1_0, uint64 a2_0, uint64 a3_0, uint64 a4_0) =
{ true && and [a0_0 <u 72057594037927928@64, a1_0 <u 72057594037927928@64, a2_0 <u 72057594037927928@64, a3_0 <u 72057594037927928@64, a4_0 <u 4503599627370488@64] }
mov L0x7ffda5b2f950_1 a0_0;
mov L0x7ffda5b2f958_1 a1_0;
mov L0x7ffda5b2f960_1 a2_0;
mov L0x7ffda5b2f968_1 a3_0;
mov L0x7ffda5b2f970_1 a4_0;
mov rax_1 0@uint64;
mov r10_1 L0x7ffda5b2f950_1;
mov r11_1 L0x7ffda5b2f958_1;
mov r12_1 L0x7ffda5b2f960_1;
mov r13_1 L0x7ffda5b2f968_1;
mov r14_1 L0x7ffda5b2f970_1;
mov r15_1 4503599627370495@uint64;
mul rax_2 r10_1 2@uint64;
mull rdx_1 rax_3 rax_2 r13_1;
mov rbx_1 rax_3;
mov rcx_1 rdx_1;
mul rax_4 r11_1 2@uint64;
mull rdx_2 rax_5 rax_4 r12_1;
adds carry_1 rbx_2 rbx_1 rax_5;
adc rcx_2 rcx_1 rdx_2 carry_1;
mov rax_6 r14_1;
mull rdx_3 rax_7 rax_6 r14_1;
mov r8_1 rax_7;
mov r9_1 rdx_3;
and rax_8@uint64 rax_7 r15_1;
mov tmp_1 rax_8;
mov rdx_4 68719492368@uint64;
mull rdx_5 rax_9 rax_8 rdx_4;
adds carry_2 rbx_3 rbx_2 rax_9;
adc rcx_3 rcx_2 rdx_5 carry_2;
join tmpp_1 r9_1 r8_1;
split r8_2 tmp_to_use_1 tmpp_1 52;
vpc r8_3@uint64 r8_2;
vpc tmp_to_use_p_1@uint64 tmp_to_use_1;
assume tmp_to_use_1 = tmp_1 && true;
mov rsi_1 rbx_3;
and rsi_2@uint64 rsi_1 r15_1;
mov L0x7ffda5b2f7b0_1 rsi_2;
join tmpp_2 rcx_3 rbx_3;
split rbx_4 tmp_to_use_2 tmpp_2 52;
vpc rbx_5@uint64 rbx_4;
vpc tmp_to_use_p_2@uint64 tmp_to_use_2;
assume tmp_to_use_2 = rsi_2 && true;
mov rcx_4 0@uint64;
adds carry_3 r14_2 r14_1 r14_1;
assume carry_3 = 0 && true;
mov rax_10 r10_1;
mull rdx_6 rax_11 rax_10 r14_2;
adds carry_4 rbx_6 rbx_5 rax_11;
adc rcx_5 rcx_4 rdx_6 carry_4;
mul rax_12 r11_1 2@uint64;
mull rdx_7 rax_13 rax_12 r13_1;
adds carry_5 rbx_7 rbx_6 rax_13;
adc rcx_6 rcx_5 rdx_7 carry_5;
mov rax_14 r12_1;
mull rdx_8 rax_15 rax_14 r12_1;
adds carry_6 rbx_8 rbx_7 rax_15;
adc rcx_7 rcx_6 rdx_8 carry_6;
mov rax_16 r8_3;
mov rdx_9 68719492368@uint64;
mull rdx_10 rax_17 rax_16 rdx_9;
adds carry_7 rbx_9 rbx_8 rax_17;
adc rcx_8 rcx_7 rdx_10 carry_7;
mov rsi_3 rbx_9;
and rsi_4@uint64 rsi_3 r15_1;
join tmpp_3 rcx_8 rbx_9;
split rbx_10 tmp_to_use_3 tmpp_3 52;
vpc rbx_11@uint64 rbx_10;
vpc tmp_to_use_p_3@uint64 tmp_to_use_3;
assume tmp_to_use_3 = rsi_4 && true;
mov rcx_9 0@uint64;
mov rax_18 rsi_4;
split rax_19 tmp_to_use_4 rax_18 48;
mov L0x7ffda5b2f7c0_1 rax_19;
mov rax_20 281474976710655@uint64;
and rsi_5@uint64 rsi_4 rax_20;
assume rsi_5 = tmp_to_use_4 && true;
mov L0x7ffda5b2f7b8_1 rsi_5;
mov rax_21 r10_1;
mull rdx_11 rax_22 rax_21 r10_1;
mov r8_4 rax_22;
mov r9_2 rdx_11;
mov rax_23 r11_1;
mull rdx_12 rax_24 rax_23 r14_2;
adds carry_8 rbx_12 rbx_11 rax_24;
adc rcx_10 rcx_9 rdx_12 carry_8;
mul rax_25 r12_1 2@uint64;
mull rdx_13 rax_26 rax_25 r13_1;
adds carry_9 rbx_13 rbx_12 rax_26;
adc rcx_11 rcx_10 rdx_13 carry_9;
mov rsi_6 rbx_13;
and rsi_7@uint64 rsi_6 r15_1;
join tmpp_4 rcx_11 rbx_13;
split rbx_14 tmp_to_use_5 tmpp_4 52;
vpc rbx_15@uint64 rbx_14;
vpc tmp_to_use_p_4@uint64 tmp_to_use_5;
assume tmp_to_use_5 = rsi_7 && true;
mov rcx_12 0@uint64;
shl rsi_8 rsi_7 4;
mov rax_27 L0x7ffda5b2f7c0_1;
mov old_rsi_1 rsi_8;
or rsi_9@uint64 rsi_8 rax_27;
assume rsi_9 = rax_27 + old_rsi_1 && true;
mov rax_28 4294968273@uint64;
mull rdx_14 rax_29 rax_28 rsi_9;
adds carry_10 r8_5 r8_4 rax_29;
adc r9_3 r9_2 rdx_14 carry_10;
mov rax_30 r8_5;
and rax_31@uint64 rax_30 r15_1;
mov L0x7ffda5b2f800_1 rax_31;
join tmpp_5 r9_3 r8_5;
split r8_6 tmp_to_use_6 tmpp_5 52;
vpc r8_7@uint64 r8_6;
vpc tmp_to_use_p_5@uint64 tmp_to_use_6;
assume tmp_to_use_6 = rax_31 && true;
mov r9_4 0@uint64;
adds carry_11 r10_2 r10_1 r10_1;
assume carry_11 = 0 && true;
mov rax_32 r10_2;
mull rdx_15 rax_33 rax_32 r11_1;
adds carry_12 r8_8 r8_7 rax_33;
adc r9_5 r9_4 rdx_15 carry_12;
mov rax_34 r12_1;
mull rdx_16 rax_35 rax_34 r14_2;
adds carry_13 rbx_16 rbx_15 rax_35;
adc rcx_13 rcx_12 rdx_16 carry_13;
mov rax_36 r13_1;
mull rdx_17 rax_37 rax_36 r13_1;
adds carry_14 rbx_17 rbx_16 rax_37;
adc rcx_14 rcx_13 rdx_17 carry_14;
mov rax_38 rbx_17;
and rax_39@uint64 rax_38 r15_1;
mov tmp_2 rax_39;
mov rdx_18 68719492368@uint64;
mull rdx_19 rax_40 rax_39 rdx_18;
adds carry_15 r8_9 r8_8 rax_40;
adc r9_6 r9_5 rdx_19 carry_15;
join tmpp_6 rcx_14 rbx_17;
split rbx_18 tmp_to_use_7 tmpp_6 52;
vpc rbx_19@uint64 rbx_18;
vpc tmp_to_use_p_6@uint64 tmp_to_use_7;
assume tmp_to_use_7 = tmp_2 && true;
mov rcx_15 0@uint64;
mov rax_41 r8_9;
and rax_42@uint64 rax_41 r15_1;
mov L0x7ffda5b2f808_1 rax_42;
join tmpp_7 r9_6 r8_9;
split r8_10 tmp_to_use_8 tmpp_7 52;
vpc r8_11@uint64 r8_10;
vpc tmp_to_use_p_7@uint64 tmp_to_use_8;
assume tmp_to_use_8 = rax_42 && true;
mov r9_7 0@uint64;
mov rax_43 r10_2;
mull rdx_20 rax_44 rax_43 r12_1;
adds carry_16 r8_12 r8_11 rax_44;
adc r9_8 r9_7 rdx_20 carry_16;
mov rsi_10 L0x7ffda5b2f7b8_1;
mov r10_3 L0x7ffda5b2f7b0_1;
mov rax_45 r11_1;
mull rdx_21 rax_46 rax_45 r11_1;
adds carry_17 r8_13 r8_12 rax_46;
adc r9_9 r9_8 rdx_21 carry_17;
mov rax_47 r13_1;
mull rdx_22 rax_48 rax_47 r14_2;
adds carry_18 rbx_20 rbx_19 rax_48;
adc rcx_16 rcx_15 rdx_22 carry_18;
mov rax_49 rbx_20;
and rax_50@uint64 rax_49 r15_1;
mov tmp_3 rax_50;
mov rdx_23 68719492368@uint64;
mull rdx_24 rax_51 rax_50 rdx_23;
adds carry_19 r8_14 r8_13 rax_51;
adc r9_10 r9_9 rdx_24 carry_19;
join tmpp_8 rcx_16 rbx_20;
split rbx_21 tmp_to_use_9 tmpp_8 52;
vpc rbx_22@uint64 rbx_21;
vpc tmp_to_use_p_8@uint64 tmp_to_use_9;
assume tmp_to_use_9 = tmp_3 && true;
mov rax_52 r8_14;
and rax_53@uint64 rax_52 r15_1;
mov L0x7ffda5b2f810_1 rax_53;
join tmpp_9 r9_10 r8_14;
split r8_15 tmp_to_use_10 tmpp_9 52;
vpc r8_16@uint64 r8_15;
vpc tmp_to_use_p_9@uint64 tmp_to_use_10;
assume tmp_to_use_10 = rax_53 && true;
mov r9_11 0@uint64;
adds carry_20 r8_17 r8_16 r10_3;
assume carry_20 = 0 && true;
mov rax_54 rbx_22;
mov rdx_25 68719492368@uint64;
mull rdx_26 rax_55 rax_54 rdx_25;
adds carry_21 r8_18 r8_17 rax_55;
adc r9_12 r9_11 rdx_26 carry_21;
mov rax_56 r8_18;
and rax_57@uint64 rax_56 r15_1;
mov L0x7ffda5b2f818_1 rax_57;
join tmpp_10 r9_12 r8_18;
split r8_19 tmp_to_use_11 tmpp_10 52;
vpc r8_20@uint64 r8_19;
vpc tmp_to_use_p_10@uint64 tmp_to_use_11;
assume tmp_to_use_11 = rax_57 && true;
adds carry_22 r8_21 r8_20 rsi_10;
assume carry_22 = 0 && true;
mov L0x7ffda5b2f820_1 r8_21;
mov c0_1 L0x7ffda5b2f800_1;
mov c1_1 L0x7ffda5b2f808_1;
mov c2_1 L0x7ffda5b2f810_1;
mov c3_1 L0x7ffda5b2f818_1;
mov c4_1 L0x7ffda5b2f820_1;
{ c0_1 + (c1_1 * 4503599627370496) + (c2_1 * 20282409603651670423947251286016) + (c3_1 * 91343852333181432387730302044767688728495783936) + (c4_1 * 411376139330301510538742295639337626245683966408394965837152256) = (a0_0 + (a1_0 * 4503599627370496) + (a2_0 * 20282409603651670423947251286016) + (a3_0 * 91343852333181432387730302044767688728495783936) + (a4_0 * 411376139330301510538742295639337626245683966408394965837152256)) * (a0_0 + (a1_0 * 4503599627370496) + (a2_0 * 20282409603651670423947251286016) + (a3_0 * 91343852333181432387730302044767688728495783936) + (a4_0 * 411376139330301510538742295639337626245683966408394965837152256)) (mod 115792089237316195423570985008687907853269984665640564039457584007908834671663) && and [tmp_to_use_p_1 = tmp_1, tmp_to_use_p_2 = rsi_2, carry_3 = 0@1, tmp_to_use_p_3 = rsi_4, rsi_5 = tmp_to_use_4, tmp_to_use_p_4 = rsi_7, rsi_9 = add (rax_27) (old_rsi_1), tmp_to_use_p_5 = rax_31, carry_11 = 0@1, tmp_to_use_p_6 = tmp_2, tmp_to_use_p_7 = rax_42, tmp_to_use_p_8 = tmp_3, tmp_to_use_p_9 = rax_53, carry_20 = 0@1, tmp_to_use_p_10 = rax_57, carry_22 = 0@1, c0_1 <u 9007199254740991@64, c1_1 <u 9007199254740991@64, c2_1 <u 9007199254740991@64, c3_1 <u 9007199254740991@64, c4_1 <u 562949953421311@64] }
