proc main(uint64 a0_0, uint64 a1_0, uint64 a2_0, uint64 a3_0, uint64 a4_0, uint64 b0_0, uint64 b1_0, uint64 b2_0, uint64 b3_0, uint64 b4_0) =
{ true && and [a0_0 <u 72057594037927928@64, a1_0 <u 72057594037927928@64, a2_0 <u 72057594037927928@64, a3_0 <u 72057594037927928@64, a4_0 <u 4503599627370488@64, b0_0 <u 72057594037927928@64, b1_0 <u 72057594037927928@64, b2_0 <u 72057594037927928@64, b3_0 <u 72057594037927928@64, b4_0 <u 4503599627370488@64] }
mov L0x7fff9a47f530_1 a0_0;
mov L0x7fff9a47f538_1 a1_0;
mov L0x7fff9a47f540_1 a2_0;
mov L0x7fff9a47f548_1 a3_0;
mov L0x7fff9a47f550_1 a4_0;
mov L0x7fff9a47f3e0_1 b0_0;
mov L0x7fff9a47f3e8_1 b1_0;
mov L0x7fff9a47f3f0_1 b2_0;
mov L0x7fff9a47f3f8_1 b3_0;
mov L0x7fff9a47f400_1 b4_0;
mov r10_1 L0x7fff9a47f530_1;
mov r11_1 L0x7fff9a47f538_1;
mov r12_1 L0x7fff9a47f540_1;
mov r13_1 L0x7fff9a47f548_1;
mov r14_1 L0x7fff9a47f550_1;
mov rax_1 L0x7fff9a47f3e0_1;
mull rdx_1 rax_2 rax_1 r13_1;
mov rcx_1 rax_2;
mov r15_1 rdx_1;
mov rax_3 L0x7fff9a47f3e8_1;
mull rdx_2 rax_4 rax_3 r12_1;
adds carry_1 rcx_2 rcx_1 rax_4;
adc r15_2 r15_1 rdx_2 carry_1;
mov rax_5 L0x7fff9a47f3f0_1;
mull rdx_3 rax_6 rax_5 r11_1;
adds carry_2 rcx_3 rcx_2 rax_6;
adc r15_3 r15_2 rdx_3 carry_2;
mov rax_7 L0x7fff9a47f3f8_1;
mull rdx_4 rax_8 rax_7 r10_1;
adds carry_3 rcx_4 rcx_3 rax_8;
adc r15_4 r15_3 rdx_4 carry_3;
mov rax_9 L0x7fff9a47f400_1;
mull rdx_5 rax_10 rax_9 r14_1;
mov r8_1 rax_10;
mov r9_1 rdx_5;
mov rdx_6 4503599627370495@uint64;
and rax_11@uint64 rax_10 rdx_6;
mov tmp_1 rax_11;
mov rdx_7 68719492368@uint64;
mull rdx_8 rax_12 rax_11 rdx_7;
adds carry_4 rcx_5 rcx_4 rax_12;
adc r15_5 r15_4 rdx_8 carry_4;
join tmpp_1 r9_1 r8_1;
split r8_2 tmp_to_use_1 tmpp_1 52;
vpc r8_3@uint64 r8_2;
vpc tmp_to_use_p_1@uint64 tmp_to_use_1;
assume tmp_to_use_1 = tmp_1 && true;
mov rsi_1 rcx_5;
mov rdx_9 4503599627370495@uint64;
and rsi_2@uint64 rsi_1 rdx_9;
mov L0x7fff9a47f390_1 rsi_2;
join tmp_2 r15_5 rcx_5;
split rcx_6 tmp_to_use_2 tmp_2 52;
vpc rcx_7@uint64 rcx_6;
vpc tmp_to_use_p_2@uint64 tmp_to_use_2;
assume tmp_to_use_2 = rsi_2 && true;
mov r15_6 0@uint64;
mov rax_13 L0x7fff9a47f3e0_1;
mull rdx_10 rax_14 rax_13 r14_1;
adds carry_5 rcx_8 rcx_7 rax_14;
adc r15_7 r15_6 rdx_10 carry_5;
mov rax_15 L0x7fff9a47f3e8_1;
mull rdx_11 rax_16 rax_15 r13_1;
adds carry_6 rcx_9 rcx_8 rax_16;
adc r15_8 r15_7 rdx_11 carry_6;
mov rax_17 L0x7fff9a47f3f0_1;
mull rdx_12 rax_18 rax_17 r12_1;
adds carry_7 rcx_10 rcx_9 rax_18;
adc r15_9 r15_8 rdx_12 carry_7;
mov rax_19 L0x7fff9a47f3f8_1;
mull rdx_13 rax_20 rax_19 r11_1;
adds carry_8 rcx_11 rcx_10 rax_20;
adc r15_10 r15_9 rdx_13 carry_8;
mov rax_21 L0x7fff9a47f400_1;
mull rdx_14 rax_22 rax_21 r10_1;
adds carry_9 rcx_12 rcx_11 rax_22;
adc r15_11 r15_10 rdx_14 carry_9;
mov rax_23 r8_3;
mov rdx_15 68719492368@uint64;
mull rdx_16 rax_24 rax_23 rdx_15;
adds carry_10 rcx_13 rcx_12 rax_24;
adc r15_12 r15_11 rdx_16 carry_10;
mov rsi_3 rcx_13;
mov rdx_17 4503599627370495@uint64;
and rsi_4@uint64 rsi_3 rdx_17;
join tmpp_2 r15_12 rcx_13;
split rcx_14 tmp_to_use_3 tmpp_2 52;
vpc rcx_15@uint64 rcx_14;
vpc tmp_to_use_p_3@uint64 tmp_to_use_3;
assume tmp_to_use_3 = rsi_4 && true;
mov r15_13 0@uint64;
mov rax_25 rsi_4;
split rax_26 tmp_to_use_4 rax_25 48;
mov L0x7fff9a47f3a0_1 rax_26;
mov rax_27 281474976710655@uint64;
and rsi_5@uint64 rsi_4 rax_27;
assume rsi_5 = tmp_to_use_4 && true;
mov L0x7fff9a47f398_1 rsi_5;
mov rax_28 L0x7fff9a47f3e0_1;
mull rdx_18 rax_29 rax_28 r10_1;
mov r8_4 rax_29;
mov r9_2 rdx_18;
mov rax_30 L0x7fff9a47f3e8_1;
mull rdx_19 rax_31 rax_30 r14_1;
adds carry_11 rcx_16 rcx_15 rax_31;
adc r15_14 r15_13 rdx_19 carry_11;
mov rax_32 L0x7fff9a47f3f0_1;
mull rdx_20 rax_33 rax_32 r13_1;
adds carry_12 rcx_17 rcx_16 rax_33;
adc r15_15 r15_14 rdx_20 carry_12;
mov rax_34 L0x7fff9a47f3f8_1;
mull rdx_21 rax_35 rax_34 r12_1;
adds carry_13 rcx_18 rcx_17 rax_35;
adc r15_16 r15_15 rdx_21 carry_13;
mov rax_36 L0x7fff9a47f400_1;
mull rdx_22 rax_37 rax_36 r11_1;
adds carry_14 rcx_19 rcx_18 rax_37;
adc r15_17 r15_16 rdx_22 carry_14;
mov rsi_6 rcx_19;
mov rdx_23 4503599627370495@uint64;
and rsi_7@uint64 rsi_6 rdx_23;
join tmpp_3 r15_17 rcx_19;
split rcx_20 tmp_to_use_5 tmpp_3 52;
vpc rcx_21@uint64 rcx_20;
vpc tmp_to_use_p_4@uint64 tmp_to_use_5;
assume tmp_to_use_5 = rsi_7 && true;
mov r15_18 0@uint64;
shl rsi_8 rsi_7 4;
mov rax_38 L0x7fff9a47f3a0_1;
mov old_rsi_1 rsi_8;
or rsi_9@uint64 rsi_8 rax_38;
assume rsi_9 = old_rsi_1 + rax_38 && true;
mov rax_39 4294968273@uint64;
mull rdx_24 rax_40 rax_39 rsi_9;
adds carry_15 r8_5 r8_4 rax_40;
adc r9_3 r9_2 rdx_24 carry_15;
mov rax_41 r8_5;
mov rdx_25 4503599627370495@uint64;
and rax_42@uint64 rax_41 rdx_25;
mov L0x7fff9a47f410_1 rax_42;
join tmpp_4 r9_3 r8_5;
split r8_6 tmp_to_use_6 tmpp_4 52;
vpc r8_7@uint64 r8_6;
vpc tmp_to_use_p_5@uint64 tmp_to_use_6;
assume tmp_to_use_6 = rax_42 && true;
mov r9_4 0@uint64;
mov rax_43 L0x7fff9a47f3e0_1;
mull rdx_26 rax_44 rax_43 r11_1;
adds carry_16 r8_8 r8_7 rax_44;
adc r9_5 r9_4 rdx_26 carry_16;
mov rax_45 L0x7fff9a47f3e8_1;
mull rdx_27 rax_46 rax_45 r10_1;
adds carry_17 r8_9 r8_8 rax_46;
adc r9_6 r9_5 rdx_27 carry_17;
mov rax_47 L0x7fff9a47f3f0_1;
mull rdx_28 rax_48 rax_47 r14_1;
adds carry_18 rcx_22 rcx_21 rax_48;
adc r15_19 r15_18 rdx_28 carry_18;
mov rax_49 L0x7fff9a47f3f8_1;
mull rdx_29 rax_50 rax_49 r13_1;
adds carry_19 rcx_23 rcx_22 rax_50;
adc r15_20 r15_19 rdx_29 carry_19;
mov rax_51 L0x7fff9a47f400_1;
mull rdx_30 rax_52 rax_51 r12_1;
adds carry_20 rcx_24 rcx_23 rax_52;
adc r15_21 r15_20 rdx_30 carry_20;
mov rax_53 rcx_24;
mov rdx_31 4503599627370495@uint64;
and rax_54@uint64 rax_53 rdx_31;
mov tmp_3 rax_54;
mov rdx_32 68719492368@uint64;
mull rdx_33 rax_55 rax_54 rdx_32;
adds carry_21 r8_10 r8_9 rax_55;
adc r9_7 r9_6 rdx_33 carry_21;
join tmpp_5 r15_21 rcx_24;
split rcx_25 tmp_to_use_7 tmpp_5 52;
vpc rcx_26@uint64 rcx_25;
vpc tmp_to_use_p_6@uint64 tmp_to_use_7;
assume tmp_to_use_7 = tmp_3 && true;
mov r15_22 0@uint64;
mov rax_56 r8_10;
mov rdx_34 4503599627370495@uint64;
and rax_57@uint64 rax_56 rdx_34;
mov L0x7fff9a47f418_1 rax_57;
join tmpp_6 r9_7 r8_10;
split r8_11 tmp_to_use_8 tmpp_6 52;
vpc r8_12@uint64 r8_11;
vpc tmp_to_use_p_7@uint64 tmp_to_use_8;
assume tmp_to_use_8 = rax_57 && true;
mov r9_8 0@uint64;
mov rax_58 L0x7fff9a47f3e0_1;
mull rdx_35 rax_59 rax_58 r12_1;
adds carry_22 r8_13 r8_12 rax_59;
adc r9_9 r9_8 rdx_35 carry_22;
mov rax_60 L0x7fff9a47f3e8_1;
mull rdx_36 rax_61 rax_60 r11_1;
adds carry_23 r8_14 r8_13 rax_61;
adc r9_10 r9_9 rdx_36 carry_23;
mov rax_62 L0x7fff9a47f3f0_1;
mull rdx_37 rax_63 rax_62 r10_1;
adds carry_24 r8_15 r8_14 rax_63;
adc r9_11 r9_10 rdx_37 carry_24;
mov rsi_10 L0x7fff9a47f398_1;
mov r10_2 L0x7fff9a47f390_1;
mov rax_64 L0x7fff9a47f3f8_1;
mull rdx_38 rax_65 rax_64 r14_1;
adds carry_25 rcx_27 rcx_26 rax_65;
adc r15_23 r15_22 rdx_38 carry_25;
mov rax_66 L0x7fff9a47f400_1;
mull rdx_39 rax_67 rax_66 r13_1;
adds carry_26 rcx_28 rcx_27 rax_67;
adc r15_24 r15_23 rdx_39 carry_26;
mov rax_68 rcx_28;
mov rdx_40 4503599627370495@uint64;
and rax_69@uint64 rax_68 rdx_40;
mov tmp_4 rax_69;
mov rdx_41 68719492368@uint64;
mull rdx_42 rax_70 rax_69 rdx_41;
adds carry_27 r8_16 r8_15 rax_70;
adc r9_12 r9_11 rdx_42 carry_27;
join tmpp_7 r15_24 rcx_28;
split rcx_29 tmp_to_use_9 tmpp_7 52;
vpc rcx_30@uint64 rcx_29;
vpc tmp_to_use_p_8@uint64 tmp_to_use_9;
assume tmp_to_use_9 = tmp_4 && true;
mov rax_71 r8_16;
mov rdx_43 4503599627370495@uint64;
and rax_72@uint64 rax_71 rdx_43;
mov L0x7fff9a47f420_1 rax_72;
join tmpp_8 r9_12 r8_16;
split r8_17 tmp_to_use_10 tmpp_8 52;
vpc r8_18@uint64 r8_17;
vpc tmp_to_use_p_9@uint64 tmp_to_use_10;
assume tmp_to_use_10 = rax_72 && true;
mov r9_13 0@uint64;
add r8_19 r8_18 r10_2;
mov rax_73 rcx_30;
mov rdx_44 68719492368@uint64;
mull rdx_45 rax_74 rax_73 rdx_44;
adds carry_28 r8_20 r8_19 rax_74;
adc r9_14 r9_13 rdx_45 carry_28;
mov rax_75 r8_20;
mov rdx_46 4503599627370495@uint64;
and rax_76@uint64 rax_75 rdx_46;
mov L0x7fff9a47f428_1 rax_76;
join tmp_5 r9_14 r8_20;
split r8_21 tmp_to_use_11 tmp_5 52;
vpc r8_22@uint64 r8_21;
vpc tmp_to_use_p_10@uint64 tmp_to_use_11;
assume tmp_to_use_11 = rax_76 && true;
add r8_23 r8_22 rsi_10;
mov L0x7fff9a47f430_1 r8_23;
mov c0_1 L0x7fff9a47f410_1;
mov c1_1 L0x7fff9a47f418_1;
mov c2_1 L0x7fff9a47f420_1;
mov c3_1 L0x7fff9a47f428_1;
mov c4_1 L0x7fff9a47f430_1;
{ c0_1 + (c1_1 * 4503599627370496) + (c2_1 * 20282409603651670423947251286016) + (c3_1 * 91343852333181432387730302044767688728495783936) + (c4_1 * 411376139330301510538742295639337626245683966408394965837152256) = (a0_0 + (a1_0 * 4503599627370496) + (a2_0 * 20282409603651670423947251286016) + (a3_0 * 91343852333181432387730302044767688728495783936) + (a4_0 * 411376139330301510538742295639337626245683966408394965837152256)) * (b0_0 + (b1_0 * 4503599627370496) + (b2_0 * 20282409603651670423947251286016) + (b3_0 * 91343852333181432387730302044767688728495783936) + (b4_0 * 411376139330301510538742295639337626245683966408394965837152256)) (mod 115792089237316195423570985008687907853269984665640564039457584007908834671663) && and [tmp_to_use_p_1 = tmp_1, tmp_to_use_p_2 = rsi_2, tmp_to_use_p_3 = rsi_4, rsi_5 = tmp_to_use_4, tmp_to_use_p_4 = rsi_7, rsi_9 = add (old_rsi_1) (rax_38), tmp_to_use_p_5 = rax_42, tmp_to_use_p_6 = tmp_3, tmp_to_use_p_7 = rax_57, tmp_to_use_p_8 = tmp_4, tmp_to_use_p_9 = rax_72, tmp_to_use_p_10 = rax_76, c0_1 <u 9007199254740991@64, c1_1 <u 9007199254740991@64, c2_1 <u 9007199254740991@64, c3_1 <u 9007199254740991@64, c4_1 <u 562949953421311@64] }
